// this really only is a stack
class vector<T>
{
	const int INITIAL_CAPACITY = 16;
	var int	size { get; },
			capa { get; };
	var	T*	buff;
	
	[static]
	var int numRealocs;

public:
	class iterator
	{
		var T* ptr;

	public:
		ctor(T* ptr) : ptr(ptr);

		// [pre] or the 'this'
		[pre]
		operator "++this" () -> iterator& {
			++ptr;
			return self;
		}

		[post]
		operator "this++" () -> iterator {
			return ptr++;
		}

		operator "==" (const iterator& other) {
			return self.ptr == other.ptr;
		} 
	}

	ctor()
	:	capa(INITIAL_CAPACITY),
		size(0),
		buff(new T[INITIAL_CAPACITY]);

	ctor(int capacity)
	:	capa(capacity),
		size(0),
		buff(new T[capacity]);

	dtor()
	{
		if(buff != null)
			delete[] buff;
	}

	[pure]
	func {
		front()	-> T& => buff[0];
		back()	-> T& => buff[size-1];
	}

	[virtual]
	func push(const T& v) {
		if(size >= capa)
			grow();
		buff[size] = v;
		++size;
	}

	func pop() {
		--size;
	}

	operator "[]" (int index) -> T& => buff[index];

private:
	func grow() {
		++numRealocs;
		capa *= 2;
		var T* new_buff = new T[capa];
		size times i {
			new_buff[i] = buff[i];
		}
		delete[] buff;
		buff = new_buff;
	}
}

class sorted_vector<T> : vector<T>
{
public:
	[override]
	func push(const T& v)
	{
		// TODO: would be faster to find the correct spot to insert, then move the rest
		base::push_back(v);
		sort(buff);
	}
}


