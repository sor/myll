#!/bin/myll

namespace myll::core;

func main() -> int {
	const BC a;
	a.c();
	return 0;
}
class BC : SomeBase {}


Globale namen werden erfasst, lokale scopes werden komplett auf sp채ter verschoben...
Dadurch ist es einfach Implementierungen komplett zu skippen.

Phase 1:
Z5: 'func main' wird erzeugt, lokaler Scope wird gequeued f체r phase 3.
Z10: class BC wird erzeugt, baseclass SomeBase wird gequeued f체r phase 2

Phase 2:
Z10 SomeBase wird gesucht und als Basisklasse zu BC assoziiert

Phase 3: Lokale Scopes werden...
Z6: 'const a' wird erzeugt im lokalen Scope, Typ BC wird im LocalScope nicht gefunden, in GlobalScope schon. Typ von 'a' ist voll resolved.
Z7: 'a' wird im lokalen Scope gefunden, ".c" member und fcall auf diesen kann gepr체ft werden weil BC und SomeBase bekannt sind. ReturnType der Expression bekannt.

*/

/*
var {
	float	f;
	double	d;
	int*	ptr;
	int		bi;	// bool stored in an int, like return value from isupper
	string	str;
	func	fn(){}
	class Foo<T> {}
}

'is' operator like in sql:
	f is nan		// isnan(f)
	d is not inf	// !isinf(d)
	ptr is null		// ptr == nullptr
	bi is true		// may just do: bi != 0
	str is upper	// isupper(str) != 0
	fn is pure		// maybe compile time check of aspect
	T is ordered	// compile time check of concept
= OR =
transform the operators:
	f == nan		// isnan(f)
	d != inf		// !isinf(d)
	ptr == null		// ptr == nullptr
	bi == true		// may just do: bi != 0
	str == upper	// Ugly! isupper(str) != 0
	str.isupper()	// UFCS, yeah! isupper(str) != 0
	fn == pure		// Ugly? maybe compile time check of aspect
	pure<fn>		// compile time check of aspect
	T == ordered	// Ugly? compile time check of concept
	ordered<T>		// compile time check of concept
	sortable<T>		// better name for above

Whenever something is constexpr, it is, you dont need to write it.

Use [must aspect_name] when the aspect must match, otherwise don't fail if aspect does not exist, keep it and pass deeper, may match there...
[const] namespace A{}		// namespaces can not be const, but dont fail
[must const] namespace A{}	// namespaces can not be const, FAIL

aspect static
	: structural, structural::var, structural::const, structural::func; // makes them static in C++
	// class A { [static] func a(){} }

aspect const
	: structural::operator, structural::func, structural // makes the target unable to change 'this' state

aspect pure
	: operator, func, structural // makes the target unable to change global state

aspect pre // or post
	: operator // makes the op a pre or post increment

aspect symmetric
	: operator, func // makes the op or func symmetric, f(b,a) calls f(a,b) 

aspect asymmetric
	: operator, func // makes the op or func asymmetric, f(b,a) calls !f(a,b) or -f(a,b)
*/

class vector<T>
{
	const int INITIAL_CAPACITY = 16;
	var int	size { get; },
			capa { get; };
	var	T*	buff;
	
	[static]
	var int numRealocs;

[public]:
	class iterator
	{
		var T* ptr;

	[public]:
		constructor(T* ptr) : ptr(ptr);

		// [pre] or the 'n'
		[pre]
		operator "++n" () -> iterator& {
			++ptr;
			return self;
		}

		[post]
		operator "n++" () -> iterator {
			return ptr++;
		}

		operator "==" (const iterator& other) {
			return self.ptr == other.ptr;
		} 
	}

	constructor()
	:	capa(INITIAL_CAPACITY),
		size(0),
		buff(new T[INITIAL_CAPACITY]);

	constructor(int capa)
	:	capa(capa),
		size(0),
		buff(new T[capa]);

	destructor()
	{
		if(buff != null)
			delete[] buff;
	}

	[pure] funcs {
		front()	-> T& => buff[0];
		back()	-> T& => buff[size-1];
	}

	// use [virtual] at your own discretion
	func push(const T& v) {
		if(size >= capa)
			grow();
		buff[size] = v;
		++size;
	}

	func pop() {
		--size;
	}

	operator "[]" (int index) -> T& => buff[index];

[priv]:
	func grow() {
		++numRealocs;
		capa *= 2;
		var T* new_buff = new T[capa];
		size times i {
			new_buff[i] = buff[i];
		}
		delete[] buff;
		buff = new_buff;
	}
}

class sorted_vector<T> : vector<T>
{
	[pub, override]
	func push(const T& v)
	{
		// TODO: would be faster to find the correct spot to insert, then move the rest
		base::push_back(v);
		sort(buff);
	}
}

//class array

concept Compareable<TL,TR>
{
	[symetric]	// for operators and functions, generates a (TR r, TL l) mirrored equivalent op/func 
	operator "<" (TL l, TR r) -> bool;
}

func hans<T>(T& val) -> V
requires Compareable<T,int>
{
	return val == 6;
}

func foo<T>([look] vector<T> vec, [share] T val) {}

func test()
{
	var int@+ intPtr = 99; // make_shared<int>(99)
	
	// IDE can display the following:
	//  [look] vec,   [share] val
	foo(myIntVec,	  intPtr);
	
	// OR:
	//  [look],        [share]
	foo(vec: myIntVec, val: intPtr);
	
	// you dont need to think about the correct way of passing
	// if val is a shared_ptr then its passed by value
	// if val is a raw ptr then its passed by pointer
}

/*


class A { // container: list<decl>, kann hoeher und tiefer traversen
	static var int B;
	static func C( int D ) { // scope: dict<decl>, kann nur hoeher traversen //// list<stmt>
		var int E;
		if ...
		D+E+B
	}
}

class G : A {
using namespace std;
}

A::B
A::C
A::C::D NICHT
A::C::E NICHT
G::B
G::pow

A ist Scope, children sind B und C decls

ns global{
	enum Moep {
		A,
		B,
		C,
	}
}
*/


