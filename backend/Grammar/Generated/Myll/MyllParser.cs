//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sor/myll/backend/Grammar/MyllParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Myll {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MyllParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, STRING_LIT=2, CHAR_LIT=3, ARROW_STAR=4, POINT_STAR=5, PTR_TO_ARY=6, 
		COMPARE=7, TRP_POINT=8, DBL_POINT=9, DBL_AMP=10, DBL_QM=11, QM_COLON=12, 
		DBL_PLUS=13, DBL_MINUS=14, RARROW=15, LARROW=16, PHATRARROW=17, LSHIFT=18, 
		SCOPE=19, AT_LBRACK=20, AUTOINDEX=21, LBRACK=22, RBRACK=23, LCURLY=24, 
		RCURLY=25, QM_LPAREN=26, LPAREN=27, RPAREN=28, AT=29, AMP=30, STAR=31, 
		SLASH=32, MOD=33, PLUS=34, MINUS=35, SEMI=36, COLON=37, COMMA=38, QM_POINT_STAR=39, 
		QM_POINT=40, QM_LBRACK=41, DOT=42, CROSS=43, DIV=44, POINT=45, EM=46, 
		TILDE=47, DBL_PIPE=48, PIPE=49, QM=50, HAT=51, USCORE=52, EQ=53, NEQ=54, 
		LTEQ=55, GTEQ=56, LT=57, GT=58, ASSIGN=59, AS_POW=60, AS_MUL=61, AS_SLASH=62, 
		AS_MOD=63, AS_DOT=64, AS_CROSS=65, AS_DIV=66, AS_ADD=67, AS_SUB=68, AS_LSH=69, 
		AS_RSH=70, AS_AND=71, AS_OR=72, AS_XOR=73, AS_QM=74, AUTO=75, VOID=76, 
		BOOL=77, INT=78, UINT=79, ISIZE=80, USIZE=81, BYTE=82, CHAR=83, CODEPOINT=84, 
		STRING=85, FLOAT=86, I64=87, I32=88, I16=89, I8=90, U64=91, U32=92, U16=93, 
		U8=94, B64=95, B32=96, B16=97, B8=98, F128=99, F64=100, F32=101, F16=102, 
		NAMESPACE=103, MODULE=104, IMPORT=105, VOLATILE=106, STABLE=107, CONST=108, 
		MUTABLE=109, USING=110, ALIAS=111, UNION=112, STRUCT=113, CLASS=114, CTOR=115, 
		DTOR=116, FUNC=117, PROC=118, METHOD=119, ENUM=120, ASPECT=121, CONCEPT=122, 
		REQUIRES=123, PROP=124, GET=125, REFGET=126, SET=127, FIELD=128, OPERATOR=129, 
		VAR=130, LET=131, LOOP=132, FOR=133, DO=134, WHILE=135, TIMES=136, IF=137, 
		ELSE=138, SWITCH=139, DEFAULT=140, CASE=141, CONTINUE=142, BREAK=143, 
		FALL=144, RETURN=145, TRY=146, CATCH=147, DEFER=148, SIZEOF=149, NEW=150, 
		DELETE=151, THROW=152, NOT=153, NAN=154, INF=155, IS=156, CONVERT=157, 
		FORWARD=158, MOVE=159, COPY=160, ID=161, NUL=162, CLASS_LIT=163, BOOL_LIT=164, 
		FLOAT_LIT=165, HEX_LIT=166, OCT_LIT=167, BIN_LIT=168, INTEGER_LIT=169, 
		NL=170, WS=171;
	public const int
		RULE_prog = 0, RULE_module = 1, RULE_imports = 2, RULE_levStmt = 3, RULE_attribBlk = 4, 
		RULE_attrib = 5, RULE_attribId = 6, RULE_defDecl = 7, RULE_declNamespace = 8, 
		RULE_declUsing = 9, RULE_declAlias = 10, RULE_declAspect = 11, RULE_declConcept = 12, 
		RULE_declEnum = 13, RULE_declStruct = 14, RULE_declConvert = 15, RULE_declCtor = 16, 
		RULE_declDtor = 17, RULE_declOp = 18, RULE_declFunc = 19, RULE_declVar = 20, 
		RULE_kindOfStruct = 21, RULE_kindOfFunc = 22, RULE_kindOfVar = 23, RULE_kindOfPassing = 24, 
		RULE_decl = 25, RULE_attrDecl = 26, RULE_attrUsing = 27, RULE_attrAlias = 28, 
		RULE_attrConvert = 29, RULE_attrCtor = 30, RULE_attrOp = 31, RULE_attrFunc = 32, 
		RULE_attrVar = 33, RULE_defNamespace = 34, RULE_defUsing = 35, RULE_defAlias = 36, 
		RULE_defAspect = 37, RULE_defConcept = 38, RULE_defEnum = 39, RULE_defStruct = 40, 
		RULE_defConvert = 41, RULE_defCtor = 42, RULE_defDtor = 43, RULE_defOp = 44, 
		RULE_defFunc = 45, RULE_defCoreFunc = 46, RULE_defVar = 47, RULE_comment = 48, 
		RULE_preOP = 49, RULE_postOP = 50, RULE_powOP = 51, RULE_multOP = 52, 
		RULE_addOP = 53, RULE_shiftOP = 54, RULE_cmpOp = 55, RULE_relOP = 56, 
		RULE_equalOP = 57, RULE_andOP = 58, RULE_orOP = 59, RULE_nulCoalOP = 60, 
		RULE_memAccOP = 61, RULE_memAccPtrOP = 62, RULE_assignOP = 63, RULE_aggrAssignOP = 64, 
		RULE_lit = 65, RULE_wildId = 66, RULE_id = 67, RULE_idOrLit = 68, RULE_specialType = 69, 
		RULE_charType = 70, RULE_floatingType = 71, RULE_binaryType = 72, RULE_signedIntType = 73, 
		RULE_unsignIntType = 74, RULE_qual = 75, RULE_typePtr = 76, RULE_idTplArgs = 77, 
		RULE_typespec = 78, RULE_typespecBasic = 79, RULE_typespecFunc = 80, RULE_typespecNested = 81, 
		RULE_typespecsNested = 82, RULE_arg = 83, RULE_args = 84, RULE_funcCall = 85, 
		RULE_indexCall = 86, RULE_param = 87, RULE_funcTypeDef = 88, RULE_tplArg = 89, 
		RULE_tplArgs = 90, RULE_tplParams = 91, RULE_threeWay = 92, RULE_capture = 93, 
		RULE_expr = 94, RULE_idAccessor = 95, RULE_idExpr = 96, RULE_idAccessors = 97, 
		RULE_idExprs = 98, RULE_typedIdAcors = 99, RULE_caseBlock = 100, RULE_defaultBlock = 101, 
		RULE_initList = 102, RULE_funcBody = 103, RULE_accessorDef = 104, RULE_funcDef = 105, 
		RULE_opDef = 106, RULE_condThen = 107, RULE_inStmt = 108;
	public static readonly string[] ruleNames = {
		"prog", "module", "imports", "levStmt", "attribBlk", "attrib", "attribId", 
		"defDecl", "declNamespace", "declUsing", "declAlias", "declAspect", "declConcept", 
		"declEnum", "declStruct", "declConvert", "declCtor", "declDtor", "declOp", 
		"declFunc", "declVar", "kindOfStruct", "kindOfFunc", "kindOfVar", "kindOfPassing", 
		"decl", "attrDecl", "attrUsing", "attrAlias", "attrConvert", "attrCtor", 
		"attrOp", "attrFunc", "attrVar", "defNamespace", "defUsing", "defAlias", 
		"defAspect", "defConcept", "defEnum", "defStruct", "defConvert", "defCtor", 
		"defDtor", "defOp", "defFunc", "defCoreFunc", "defVar", "comment", "preOP", 
		"postOP", "powOP", "multOP", "addOP", "shiftOP", "cmpOp", "relOP", "equalOP", 
		"andOP", "orOP", "nulCoalOP", "memAccOP", "memAccPtrOP", "assignOP", "aggrAssignOP", 
		"lit", "wildId", "id", "idOrLit", "specialType", "charType", "floatingType", 
		"binaryType", "signedIntType", "unsignIntType", "qual", "typePtr", "idTplArgs", 
		"typespec", "typespecBasic", "typespecFunc", "typespecNested", "typespecsNested", 
		"arg", "args", "funcCall", "indexCall", "param", "funcTypeDef", "tplArg", 
		"tplArgs", "tplParams", "threeWay", "capture", "expr", "idAccessor", "idExpr", 
		"idAccessors", "idExprs", "typedIdAcors", "caseBlock", "defaultBlock", 
		"initList", "funcBody", "accessorDef", "funcDef", "opDef", "condThen", 
		"inStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'->*'", "'.*'", "'[*]'", "'<=>'", "'...'", "'..'", 
		"'&&'", "'??'", "'?:'", "'++'", "'--'", "'->'", "'<-'", "'=>'", "'<<'", 
		"'::'", "'@['", null, "'['", "']'", "'{'", "'}'", "'?('", "'('", "')'", 
		"'@'", "'&'", "'*'", "'/'", "'%'", "'+'", "'-'", "';'", "':'", "','", 
		"'?.*'", "'?.'", "'?['", "'\\u00B7'", "'\\u00D7'", "'\\u00F7'", "'.'", 
		"'!'", "'~'", "'||'", "'|'", "'?'", "'^'", "'_'", "'=='", "'!='", "'<='", 
		"'>='", "'<'", "'>'", "'='", "'**='", "'*='", "'/='", "'%='", "'\\u00B7='", 
		"'\\u00D7='", "'\\u00F7='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
		"'|='", "'^='", "'?='", "'auto'", "'void'", "'bool'", "'int'", "'uint'", 
		"'isize'", "'usize'", "'byte'", "'char'", null, "'string'", "'float'", 
		"'i64'", "'i32'", "'i16'", "'i8'", "'u64'", "'u32'", "'u16'", "'u8'", 
		"'b64'", "'b32'", "'b16'", "'b8'", "'f128'", "'f64'", "'f32'", "'f16'", 
		"'namespace'", "'module'", "'import'", "'volatile'", "'stable'", "'const'", 
		null, "'using'", "'alias'", "'union'", "'struct'", "'class'", "'ctor'", 
		"'dtor'", "'func'", "'proc'", null, "'enum'", "'aspect'", "'concept'", 
		"'requires'", "'prop'", "'get'", "'refget'", "'set'", "'field'", "'operator'", 
		"'var'", "'let'", "'loop'", "'for'", "'do'", "'while'", "'times'", "'if'", 
		"'else'", "'switch'", "'default'", "'case'", "'continue'", "'break'", 
		"'fall'", "'return'", "'try'", "'catch'", "'defer'", "'sizeof'", "'new'", 
		"'delete'", "'throw'", "'not'", "'nan'", "'inf'", "'is'", null, null, 
		"'move'", "'copy'", null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "STRING_LIT", "CHAR_LIT", "ARROW_STAR", "POINT_STAR", 
		"PTR_TO_ARY", "COMPARE", "TRP_POINT", "DBL_POINT", "DBL_AMP", "DBL_QM", 
		"QM_COLON", "DBL_PLUS", "DBL_MINUS", "RARROW", "LARROW", "PHATRARROW", 
		"LSHIFT", "SCOPE", "AT_LBRACK", "AUTOINDEX", "LBRACK", "RBRACK", "LCURLY", 
		"RCURLY", "QM_LPAREN", "LPAREN", "RPAREN", "AT", "AMP", "STAR", "SLASH", 
		"MOD", "PLUS", "MINUS", "SEMI", "COLON", "COMMA", "QM_POINT_STAR", "QM_POINT", 
		"QM_LBRACK", "DOT", "CROSS", "DIV", "POINT", "EM", "TILDE", "DBL_PIPE", 
		"PIPE", "QM", "HAT", "USCORE", "EQ", "NEQ", "LTEQ", "GTEQ", "LT", "GT", 
		"ASSIGN", "AS_POW", "AS_MUL", "AS_SLASH", "AS_MOD", "AS_DOT", "AS_CROSS", 
		"AS_DIV", "AS_ADD", "AS_SUB", "AS_LSH", "AS_RSH", "AS_AND", "AS_OR", "AS_XOR", 
		"AS_QM", "AUTO", "VOID", "BOOL", "INT", "UINT", "ISIZE", "USIZE", "BYTE", 
		"CHAR", "CODEPOINT", "STRING", "FLOAT", "I64", "I32", "I16", "I8", "U64", 
		"U32", "U16", "U8", "B64", "B32", "B16", "B8", "F128", "F64", "F32", "F16", 
		"NAMESPACE", "MODULE", "IMPORT", "VOLATILE", "STABLE", "CONST", "MUTABLE", 
		"USING", "ALIAS", "UNION", "STRUCT", "CLASS", "CTOR", "DTOR", "FUNC", 
		"PROC", "METHOD", "ENUM", "ASPECT", "CONCEPT", "REQUIRES", "PROP", "GET", 
		"REFGET", "SET", "FIELD", "OPERATOR", "VAR", "LET", "LOOP", "FOR", "DO", 
		"WHILE", "TIMES", "IF", "ELSE", "SWITCH", "DEFAULT", "CASE", "CONTINUE", 
		"BREAK", "FALL", "RETURN", "TRY", "CATCH", "DEFER", "SIZEOF", "NEW", "DELETE", 
		"THROW", "NOT", "NAN", "INF", "IS", "CONVERT", "FORWARD", "MOVE", "COPY", 
		"ID", "NUL", "CLASS_LIT", "BOOL_LIT", "FLOAT_LIT", "HEX_LIT", "OCT_LIT", 
		"BIN_LIT", "INTEGER_LIT", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyllParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MyllParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyllParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyllParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext[] imports() {
			return GetRuleContexts<ImportsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext imports(int i) {
			return GetRuleContext<ImportsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODULE) {
				{
				State = 218;
				module();
				}
			}

			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 221;
				imports();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
				{
				{
				State = 227;
				decl();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MyllParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(MODULE);
			State = 234;
			id();
			State = 235;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MyllParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 4, RULE_imports);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(IMPORT);
			State = 238;
			id();
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 239;
					Match(COMMA);
					State = 240;
					id();
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 246;
				Match(COMMA);
				}
			}

			State = 249;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevStmtContext : ParserRuleContext {
		public LevStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levStmt; } }
	 
		public LevStmtContext() { }
		public virtual void CopyFrom(LevStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttribStmtContext : LevStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public InStmtContext inStmt() {
			return GetRuleContext<InStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		public AttribStmtContext(LevStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevStmtContext levStmt() {
		LevStmtContext _localctx = new LevStmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_levStmt);
		int _la;
		try {
			_localctx = new AttribStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 251;
				attribBlk();
				}
			}

			State = 254;
			inStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribBlkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public AttribBlkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribBlk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribBlk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribBlkContext attribBlk() {
		AttribBlkContext _localctx = new AttribBlkContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribBlk);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(LBRACK);
			State = 257;
			attrib();
			State = 262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 258;
					Match(COMMA);
					State = 259;
					attrib();
					}
					} 
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 265;
				Match(COMMA);
				}
			}

			State = 268;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttribIdContext attribId() {
			return GetRuleContext<AttribIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdOrLitContext[] idOrLit() {
			return GetRuleContexts<IdOrLitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdOrLitContext idOrLit(int i) {
			return GetRuleContext<IdOrLitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 10, RULE_attrib);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			attribId();
			State = 287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 271;
				Match(ASSIGN);
				State = 272;
				idOrLit();
				}
				break;
			case LPAREN:
				{
				State = 273;
				Match(LPAREN);
				State = 274;
				idOrLit();
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 275;
						Match(COMMA);
						State = 276;
						idOrLit();
						}
						} 
					}
					State = 281;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 282;
					Match(COMMA);
					}
				}

				State = 285;
				Match(RPAREN);
				}
				break;
			case RBRACK:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALL() { return GetToken(MyllParser.FALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MyllParser.DEFAULT, 0); }
		public AttribIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribIdContext attribId() {
		AttribIdContext _localctx = new AttribIdContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribId);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				id();
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				Match(CONST);
				}
				break;
			case FALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 291;
				Match(FALL);
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 292;
				Match(THROW);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 293;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclNamespaceContext declNamespace() {
			return GetRuleContext<DeclNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclUsingContext declUsing() {
			return GetRuleContext<DeclUsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclAliasContext declAlias() {
			return GetRuleContext<DeclAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclAspectContext declAspect() {
			return GetRuleContext<DeclAspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclConceptContext declConcept() {
			return GetRuleContext<DeclConceptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclEnumContext declEnum() {
			return GetRuleContext<DeclEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclStructContext declStruct() {
			return GetRuleContext<DeclStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclConvertContext declConvert() {
			return GetRuleContext<DeclConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclCtorContext declCtor() {
			return GetRuleContext<DeclCtorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclDtorContext declDtor() {
			return GetRuleContext<DeclDtorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclOpContext declOp() {
			return GetRuleContext<DeclOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclFuncContext declFunc() {
			return GetRuleContext<DeclFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclVarContext declVar() {
			return GetRuleContext<DeclVarContext>(0);
		}
		public DefDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDeclContext defDecl() {
		DefDeclContext _localctx = new DefDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_defDecl);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				declNamespace();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				declUsing();
				}
				break;
			case ALIAS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 298;
				declAlias();
				}
				break;
			case ASPECT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 299;
				declAspect();
				}
				break;
			case CONCEPT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 300;
				declConcept();
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 301;
				declEnum();
				}
				break;
			case UNION:
			case STRUCT:
			case CLASS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 302;
				declStruct();
				}
				break;
			case CONVERT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 303;
				declConvert();
				}
				break;
			case CTOR:
				EnterOuterAlt(_localctx, 9);
				{
				State = 304;
				declCtor();
				}
				break;
			case DTOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 305;
				declDtor();
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 306;
				declOp();
				}
				break;
			case FUNC:
			case PROC:
			case METHOD:
				EnterOuterAlt(_localctx, 12);
				{
				State = 307;
				declFunc();
				}
				break;
			case CONST:
			case FIELD:
			case VAR:
			case LET:
				EnterOuterAlt(_localctx, 13);
				{
				State = 308;
				declVar();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(MyllParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefNamespaceContext defNamespace() {
			return GetRuleContext<DefNamespaceContext>(0);
		}
		public DeclNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclNamespaceContext declNamespace() {
		DeclNamespaceContext _localctx = new DeclNamespaceContext(Context, State);
		EnterRule(_localctx, 16, RULE_declNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(NAMESPACE);
			{
			State = 312;
			defNamespace();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclUsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MyllParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefUsingContext defUsing() {
			return GetRuleContext<DefUsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrUsingContext[] attrUsing() {
			return GetRuleContexts<AttrUsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrUsingContext attrUsing(int i) {
			return GetRuleContext<AttrUsingContext>(i);
		}
		public DeclUsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declUsing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclUsingContext declUsing() {
		DeclUsingContext _localctx = new DeclUsingContext(Context, State);
		EnterRule(_localctx, 18, RULE_declUsing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(USING);
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 315;
				defUsing();
				State = 316;
				Match(SEMI);
				}
				break;
			case LCURLY:
				{
				State = 318;
				Match(LCURLY);
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || _la==ID) {
					{
					{
					State = 319;
					attrUsing();
					}
					}
					State = 324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 325;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(MyllParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefAliasContext defAlias() {
			return GetRuleContext<DefAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrAliasContext[] attrAlias() {
			return GetRuleContexts<AttrAliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrAliasContext attrAlias(int i) {
			return GetRuleContext<AttrAliasContext>(i);
		}
		public DeclAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclAliasContext declAlias() {
		DeclAliasContext _localctx = new DeclAliasContext(Context, State);
		EnterRule(_localctx, 20, RULE_declAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(ALIAS);
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 329;
				defAlias();
				State = 330;
				Match(SEMI);
				}
				break;
			case LCURLY:
				{
				State = 332;
				Match(LCURLY);
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || _la==ID) {
					{
					{
					State = 333;
					attrAlias();
					}
					}
					State = 338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 339;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclAspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASPECT() { return GetToken(MyllParser.ASPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefAspectContext defAspect() {
			return GetRuleContext<DefAspectContext>(0);
		}
		public DeclAspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declAspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclAspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclAspectContext declAspect() {
		DeclAspectContext _localctx = new DeclAspectContext(Context, State);
		EnterRule(_localctx, 22, RULE_declAspect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(ASPECT);
			{
			State = 343;
			defAspect();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclConceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCEPT() { return GetToken(MyllParser.CONCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefConceptContext defConcept() {
			return GetRuleContext<DefConceptContext>(0);
		}
		public DeclConceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declConcept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclConcept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclConceptContext declConcept() {
		DeclConceptContext _localctx = new DeclConceptContext(Context, State);
		EnterRule(_localctx, 24, RULE_declConcept);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(CONCEPT);
			{
			State = 346;
			defConcept();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MyllParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefEnumContext defEnum() {
			return GetRuleContext<DefEnumContext>(0);
		}
		public DeclEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclEnumContext declEnum() {
		DeclEnumContext _localctx = new DeclEnumContext(Context, State);
		EnterRule(_localctx, 26, RULE_declEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(ENUM);
			{
			State = 349;
			defEnum();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KindOfStructContext kindOfStruct() {
			return GetRuleContext<KindOfStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefStructContext defStruct() {
			return GetRuleContext<DefStructContext>(0);
		}
		public DeclStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclStructContext declStruct() {
		DeclStructContext _localctx = new DeclStructContext(Context, State);
		EnterRule(_localctx, 28, RULE_declStruct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			kindOfStruct();
			{
			State = 352;
			defStruct();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclConvertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MyllParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefConvertContext defConvert() {
			return GetRuleContext<DefConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrConvertContext[] attrConvert() {
			return GetRuleContexts<AttrConvertContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrConvertContext attrConvert(int i) {
			return GetRuleContext<AttrConvertContext>(i);
		}
		public DeclConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclConvert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclConvertContext declConvert() {
		DeclConvertContext _localctx = new DeclConvertContext(Context, State);
		EnterRule(_localctx, 30, RULE_declConvert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(CONVERT);
			State = 364;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RARROW:
			case LARROW:
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				{
				State = 355;
				defConvert();
				}
				break;
			case LCURLY:
				{
				State = 356;
				Match(LCURLY);
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RARROW) | (1L << LARROW) | (1L << LBRACK))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
					{
					{
					State = 357;
					attrConvert();
					}
					}
					State = 362;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 363;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclCtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CTOR() { return GetToken(MyllParser.CTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefCtorContext defCtor() {
			return GetRuleContext<DefCtorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrCtorContext[] attrCtor() {
			return GetRuleContexts<AttrCtorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrCtorContext attrCtor(int i) {
			return GetRuleContext<AttrCtorContext>(i);
		}
		public DeclCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declCtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclCtorContext declCtor() {
		DeclCtorContext _localctx = new DeclCtorContext(Context, State);
		EnterRule(_localctx, 32, RULE_declCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(CTOR);
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 367;
				defCtor();
				}
				break;
			case 2:
				{
				State = 368;
				Match(LCURLY);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << PHATRARROW) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << COLON) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (CONVERT - 108)) | (1L << (FORWARD - 108)) | (1L << (MOVE - 108)) | (1L << (COPY - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 369;
					attrCtor();
					}
					}
					State = 374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 375;
				Match(RCURLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclDtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTOR() { return GetToken(MyllParser.DTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefDtorContext defDtor() {
			return GetRuleContext<DefDtorContext>(0);
		}
		public DeclDtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declDtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclDtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclDtorContext declDtor() {
		DeclDtorContext _localctx = new DeclDtorContext(Context, State);
		EnterRule(_localctx, 34, RULE_declDtor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(DTOR);
			{
			State = 379;
			defDtor();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(MyllParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefOpContext defOp() {
			return GetRuleContext<DefOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrOpContext[] attrOp() {
			return GetRuleContexts<AttrOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrOpContext attrOp(int i) {
			return GetRuleContext<AttrOpContext>(i);
		}
		public DeclOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclOpContext declOp() {
		DeclOpContext _localctx = new DeclOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_declOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			Match(OPERATOR);
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LIT:
			case CONVERT:
			case FORWARD:
			case MOVE:
			case COPY:
				{
				State = 382;
				defOp();
				}
				break;
			case LCURLY:
				{
				State = 383;
				Match(LCURLY);
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STRING_LIT || _la==LBRACK || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (CONVERT - 157)) | (1L << (FORWARD - 157)) | (1L << (MOVE - 157)) | (1L << (COPY - 157)))) != 0)) {
					{
					{
					State = 384;
					attrOp();
					}
					}
					State = 389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 390;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KindOfFuncContext kindOfFunc() {
			return GetRuleContext<KindOfFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefFuncContext defFunc() {
			return GetRuleContext<DefFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrFuncContext[] attrFunc() {
			return GetRuleContexts<AttrFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrFuncContext attrFunc(int i) {
			return GetRuleContext<AttrFuncContext>(i);
		}
		public DeclFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclFuncContext declFunc() {
		DeclFuncContext _localctx = new DeclFuncContext(Context, State);
		EnterRule(_localctx, 38, RULE_declFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			kindOfFunc();
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 394;
				defFunc();
				}
				break;
			case LCURLY:
				{
				State = 395;
				Match(LCURLY);
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || _la==ID) {
					{
					{
					State = 396;
					attrFunc();
					}
					}
					State = 401;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 402;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KindOfVarContext kindOfVar() {
			return GetRuleContext<KindOfVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefVarContext defVar() {
			return GetRuleContext<DefVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrVarContext[] attrVar() {
			return GetRuleContexts<AttrVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrVarContext attrVar(int i) {
			return GetRuleContext<AttrVarContext>(i);
		}
		public DeclVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclVarContext declVar() {
		DeclVarContext _localctx = new DeclVarContext(Context, State);
		EnterRule(_localctx, 40, RULE_declVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			kindOfVar();
			State = 415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				{
				State = 406;
				defVar();
				}
				break;
			case LCURLY:
				{
				State = 407;
				Match(LCURLY);
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
					{
					{
					State = 408;
					attrVar();
					}
					}
					State = 413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 414;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindOfStructContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(MyllParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MyllParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MyllParser.UNION, 0); }
		public KindOfStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindOfStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindOfStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindOfStructContext kindOfStruct() {
		KindOfStructContext _localctx = new KindOfStructContext(Context, State);
		EnterRule(_localctx, 42, RULE_kindOfStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (UNION - 112)) | (1L << (STRUCT - 112)) | (1L << (CLASS - 112)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindOfFuncContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(MyllParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(MyllParser.METHOD, 0); }
		public KindOfFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindOfFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindOfFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindOfFuncContext kindOfFunc() {
		KindOfFuncContext _localctx = new KindOfFuncContext(Context, State);
		EnterRule(_localctx, 44, RULE_kindOfFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (PROC - 117)) | (1L << (METHOD - 117)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindOfVarContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(MyllParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MyllParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(MyllParser.LET, 0); }
		public KindOfVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindOfVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindOfVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindOfVarContext kindOfVar() {
		KindOfVarContext _localctx = new KindOfVarContext(Context, State);
		EnterRule(_localctx, 46, RULE_kindOfVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindOfPassingContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MyllParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(MyllParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(MyllParser.FORWARD, 0); }
		public KindOfPassingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindOfPassing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindOfPassing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindOfPassingContext kindOfPassing() {
		KindOfPassingContext _localctx = new KindOfPassingContext(Context, State);
		EnterRule(_localctx, 48, RULE_kindOfPassing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (FORWARD - 158)) | (1L << (MOVE - 158)) | (1L << (COPY - 158)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrDeclContext attrDecl() {
			return GetRuleContext<AttrDeclContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 50, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			attrDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefDeclContext defDecl() {
			return GetRuleContext<DefDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrDeclContext[] attrDecl() {
			return GetRuleContexts<AttrDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrDeclContext attrDecl(int i) {
			return GetRuleContext<AttrDeclContext>(i);
		}
		public AttrDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrDeclContext attrDecl() {
		AttrDeclContext _localctx = new AttrDeclContext(Context, State);
		EnterRule(_localctx, 52, RULE_attrDecl);
		int _la;
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
			case CONST:
			case USING:
			case ALIAS:
			case UNION:
			case STRUCT:
			case CLASS:
			case CTOR:
			case DTOR:
			case FUNC:
			case PROC:
			case METHOD:
			case ENUM:
			case ASPECT:
			case CONCEPT:
			case FIELD:
			case OPERATOR:
			case VAR:
			case LET:
			case CONVERT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427;
				defDecl();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428;
				attribBlk();
				State = 439;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAMESPACE:
				case CONST:
				case USING:
				case ALIAS:
				case UNION:
				case STRUCT:
				case CLASS:
				case CTOR:
				case DTOR:
				case FUNC:
				case PROC:
				case METHOD:
				case ENUM:
				case ASPECT:
				case CONCEPT:
				case FIELD:
				case OPERATOR:
				case VAR:
				case LET:
				case CONVERT:
					{
					State = 429;
					defDecl();
					}
					break;
				case LCURLY:
					{
					State = 430;
					Match(LCURLY);
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
						{
						{
						State = 431;
						attrDecl();
						}
						}
						State = 436;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 437;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 438;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrUsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefUsingContext defUsing() {
			return GetRuleContext<DefUsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrUsingContext[] attrUsing() {
			return GetRuleContexts<AttrUsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrUsingContext attrUsing(int i) {
			return GetRuleContext<AttrUsingContext>(i);
		}
		public AttrUsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrUsing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrUsingContext attrUsing() {
		AttrUsingContext _localctx = new AttrUsingContext(Context, State);
		EnterRule(_localctx, 54, RULE_attrUsing);
		int _la;
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443;
				defUsing();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444;
				attribBlk();
				State = 455;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 445;
					defUsing();
					}
					break;
				case LCURLY:
					{
					State = 446;
					Match(LCURLY);
					State = 450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || _la==ID) {
						{
						{
						State = 447;
						attrUsing();
						}
						}
						State = 452;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 453;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 454;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefAliasContext defAlias() {
			return GetRuleContext<DefAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrAliasContext[] attrAlias() {
			return GetRuleContexts<AttrAliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrAliasContext attrAlias(int i) {
			return GetRuleContext<AttrAliasContext>(i);
		}
		public AttrAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrAliasContext attrAlias() {
		AttrAliasContext _localctx = new AttrAliasContext(Context, State);
		EnterRule(_localctx, 56, RULE_attrAlias);
		int _la;
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 459;
				defAlias();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460;
				attribBlk();
				State = 471;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 461;
					defAlias();
					}
					break;
				case LCURLY:
					{
					State = 462;
					Match(LCURLY);
					State = 466;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || _la==ID) {
						{
						{
						State = 463;
						attrAlias();
						}
						}
						State = 468;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 469;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 470;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrConvertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefConvertContext defConvert() {
			return GetRuleContext<DefConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrConvertContext[] attrConvert() {
			return GetRuleContexts<AttrConvertContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrConvertContext attrConvert(int i) {
			return GetRuleContext<AttrConvertContext>(i);
		}
		public AttrConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrConvert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrConvertContext attrConvert() {
		AttrConvertContext _localctx = new AttrConvertContext(Context, State);
		EnterRule(_localctx, 58, RULE_attrConvert);
		int _la;
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RARROW:
			case LARROW:
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				defConvert();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				attribBlk();
				State = 487;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RARROW:
				case LARROW:
				case AUTO:
				case VOID:
				case BOOL:
				case INT:
				case UINT:
				case ISIZE:
				case USIZE:
				case BYTE:
				case CHAR:
				case CODEPOINT:
				case STRING:
				case FLOAT:
				case I64:
				case I32:
				case I16:
				case I8:
				case U64:
				case U32:
				case U16:
				case U8:
				case B64:
				case B32:
				case B16:
				case B8:
				case F128:
				case F64:
				case F32:
				case F16:
				case VOLATILE:
				case STABLE:
				case CONST:
				case MUTABLE:
				case FUNC:
				case ID:
					{
					State = 477;
					defConvert();
					}
					break;
				case LCURLY:
					{
					State = 478;
					Match(LCURLY);
					State = 482;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RARROW) | (1L << LARROW) | (1L << LBRACK))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
						{
						{
						State = 479;
						attrConvert();
						}
						}
						State = 484;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 485;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 486;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrCtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefCtorContext defCtor() {
			return GetRuleContext<DefCtorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrCtorContext[] attrCtor() {
			return GetRuleContexts<AttrCtorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrCtorContext attrCtor(int i) {
			return GetRuleContext<AttrCtorContext>(i);
		}
		public AttrCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrCtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrCtorContext attrCtor() {
		AttrCtorContext _localctx = new AttrCtorContext(Context, State);
		EnterRule(_localctx, 60, RULE_attrCtor);
		int _la;
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491;
				defCtor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492;
				attribBlk();
				State = 503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 493;
					defCtor();
					}
					break;
				case 2:
					{
					State = 494;
					Match(LCURLY);
					State = 498;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << PHATRARROW) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << COLON) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (CONVERT - 108)) | (1L << (FORWARD - 108)) | (1L << (MOVE - 108)) | (1L << (COPY - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
						{
						{
						State = 495;
						attrCtor();
						}
						}
						State = 500;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 501;
					Match(RCURLY);
					}
					break;
				case 3:
					{
					State = 502;
					Match(COLON);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefOpContext defOp() {
			return GetRuleContext<DefOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrOpContext[] attrOp() {
			return GetRuleContexts<AttrOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrOpContext attrOp(int i) {
			return GetRuleContext<AttrOpContext>(i);
		}
		public AttrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrOpContext attrOp() {
		AttrOpContext _localctx = new AttrOpContext(Context, State);
		EnterRule(_localctx, 62, RULE_attrOp);
		int _la;
		try {
			State = 521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LIT:
			case CONVERT:
			case FORWARD:
			case MOVE:
			case COPY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507;
				defOp();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508;
				attribBlk();
				State = 519;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LIT:
				case CONVERT:
				case FORWARD:
				case MOVE:
				case COPY:
					{
					State = 509;
					defOp();
					}
					break;
				case LCURLY:
					{
					State = 510;
					Match(LCURLY);
					State = 514;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==STRING_LIT || _la==LBRACK || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (CONVERT - 157)) | (1L << (FORWARD - 157)) | (1L << (MOVE - 157)) | (1L << (COPY - 157)))) != 0)) {
						{
						{
						State = 511;
						attrOp();
						}
						}
						State = 516;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 517;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 518;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefFuncContext defFunc() {
			return GetRuleContext<DefFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrFuncContext[] attrFunc() {
			return GetRuleContexts<AttrFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrFuncContext attrFunc(int i) {
			return GetRuleContext<AttrFuncContext>(i);
		}
		public AttrFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrFuncContext attrFunc() {
		AttrFuncContext _localctx = new AttrFuncContext(Context, State);
		EnterRule(_localctx, 64, RULE_attrFunc);
		int _la;
		try {
			State = 537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				defFunc();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				attribBlk();
				State = 535;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 525;
					defFunc();
					}
					break;
				case LCURLY:
					{
					State = 526;
					Match(LCURLY);
					State = 530;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || _la==ID) {
						{
						{
						State = 527;
						attrFunc();
						}
						}
						State = 532;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 533;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 534;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefVarContext defVar() {
			return GetRuleContext<DefVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrVarContext[] attrVar() {
			return GetRuleContexts<AttrVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrVarContext attrVar(int i) {
			return GetRuleContext<AttrVarContext>(i);
		}
		public AttrVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrVarContext attrVar() {
		AttrVarContext _localctx = new AttrVarContext(Context, State);
		EnterRule(_localctx, 66, RULE_attrVar);
		int _la;
		try {
			State = 553;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				defVar();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540;
				attribBlk();
				State = 551;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO:
				case VOID:
				case BOOL:
				case INT:
				case UINT:
				case ISIZE:
				case USIZE:
				case BYTE:
				case CHAR:
				case CODEPOINT:
				case STRING:
				case FLOAT:
				case I64:
				case I32:
				case I16:
				case I8:
				case U64:
				case U32:
				case U16:
				case U8:
				case B64:
				case B32:
				case B16:
				case B8:
				case F128:
				case F64:
				case F32:
				case F16:
				case VOLATILE:
				case STABLE:
				case CONST:
				case MUTABLE:
				case FUNC:
				case ID:
					{
					State = 541;
					defVar();
					}
					break;
				case LCURLY:
					{
					State = 542;
					Match(LCURLY);
					State = 546;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
						{
						{
						State = 543;
						attrVar();
						}
						}
						State = 548;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 549;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 550;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DefNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefNamespaceContext defNamespace() {
		DefNamespaceContext _localctx = new DefNamespaceContext(Context, State);
		EnterRule(_localctx, 68, RULE_defNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			id();
			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOPE) {
				{
				{
				State = 556;
				Match(SCOPE);
				State = 557;
				id();
				}
				}
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				{
				State = 563;
				Match(SEMI);
				}
				break;
			case COLON:
				{
				State = 564;
				Match(COLON);
				}
				break;
			case LCURLY:
				{
				State = 565;
				Match(LCURLY);
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
					{
					{
					State = 566;
					decl();
					}
					}
					State = 571;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 572;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefUsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		public DefUsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defUsing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefUsingContext defUsing() {
		DefUsingContext _localctx = new DefUsingContext(Context, State);
		EnterRule(_localctx, 70, RULE_defUsing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			typespecsNested();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		public DefAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefAliasContext defAlias() {
		DefAliasContext _localctx = new DefAliasContext(Context, State);
		EnterRule(_localctx, 72, RULE_defAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			id();
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 578;
				tplParams();
				}
			}

			State = 581;
			Match(ASSIGN);
			State = 582;
			typespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefAspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		public DefAspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defAspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefAspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefAspectContext defAspect() {
		DefAspectContext _localctx = new DefAspectContext(Context, State);
		EnterRule(_localctx, 74, RULE_defAspect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			id();
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 585;
				tplParams();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefConceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DefConceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defConcept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefConcept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefConceptContext defConcept() {
		DefConceptContext _localctx = new DefConceptContext(Context, State);
		EnterRule(_localctx, 76, RULE_defConcept);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			id();
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 589;
				tplParams();
				}
			}

			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 592;
				Match(COLON);
				State = 593;
				typespecsNested();
				}
			}

			State = 596;
			Match(LCURLY);
			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
				{
				{
				State = 597;
				decl();
				}
				}
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 603;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefEnumContext : ParserRuleContext {
		public TypespecBasicContext bases;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdExprsContext idExprs() {
			return GetRuleContext<IdExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecBasicContext typespecBasic() {
			return GetRuleContext<TypespecBasicContext>(0);
		}
		public DefEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefEnumContext defEnum() {
		DefEnumContext _localctx = new DefEnumContext(Context, State);
		EnterRule(_localctx, 78, RULE_defEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			id();
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 606;
				Match(COLON);
				State = 607;
				_localctx.bases = typespecBasic();
				}
			}

			State = 610;
			Match(LCURLY);
			State = 611;
			idExprs();
			State = 612;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefStructContext : ParserRuleContext {
		public TypespecsNestedContext bases;
		public TypespecsNestedContext reqs;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext[] typespecsNested() {
			return GetRuleContexts<TypespecsNestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested(int i) {
			return GetRuleContext<TypespecsNestedContext>(i);
		}
		public DefStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefStructContext defStruct() {
		DefStructContext _localctx = new DefStructContext(Context, State);
		EnterRule(_localctx, 80, RULE_defStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			id();
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 615;
				tplParams();
				}
			}

			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 618;
				Match(COLON);
				State = 619;
				_localctx.bases = typespecsNested();
				}
			}

			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 622;
				Match(REQUIRES);
				State = 623;
				_localctx.reqs = typespecsNested();
				}
			}

			State = 626;
			Match(LCURLY);
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
				{
				{
				State = 627;
				decl();
				}
				}
				State = 632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 633;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefConvertContext : ParserRuleContext {
		public TypespecContext to;
		public TypespecContext from;
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(MyllParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public DefConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefConvert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefConvertContext defConvert() {
		DefConvertContext _localctx = new DefConvertContext(Context, State);
		EnterRule(_localctx, 82, RULE_defConvert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RARROW:
				{
				State = 635;
				Match(RARROW);
				State = 636;
				_localctx.to = typespec();
				}
				break;
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				{
				State = 637;
				_localctx.from = typespec();
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 638;
					id();
					}
				}

				State = 641;
				Match(RARROW);
				}
				break;
			case LARROW:
				{
				State = 643;
				Match(LARROW);
				State = 644;
				_localctx.from = typespec();
				State = 646;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 645;
					id();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 650;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefCtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KindOfPassingContext kindOfPassing() {
			return GetRuleContext<KindOfPassingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MyllParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(MyllParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitListContext initList() {
			return GetRuleContext<InitListContext>(0);
		}
		public DefCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defCtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefCtorContext defCtor() {
		DefCtorContext _localctx = new DefCtorContext(Context, State);
		EnterRule(_localctx, 84, RULE_defCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 652;
				kindOfPassing();
				State = 654;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 653;
					id();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 656;
				Match(CONVERT);
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LARROW) {
					{
					State = 657;
					Match(LARROW);
					}
				}

				State = 660;
				typespec();
				State = 662;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 661;
					id();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 664;
				Match(CONVERT);
				State = 665;
				typespec();
				State = 667;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 666;
					id();
					}
					break;
				}
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 669;
					Match(RARROW);
					}
				}

				}
				break;
			case 4:
				{
				State = 673;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 672;
					funcTypeDef();
					}
					break;
				}
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 675;
					initList();
					}
				}

				}
				break;
			}
			State = 680;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		public DefDtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDtorContext defDtor() {
		DefDtorContext _localctx = new DefDtorContext(Context, State);
		EnterRule(_localctx, 86, RULE_defDtor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 682;
				Match(LPAREN);
				State = 683;
				Match(RPAREN);
				}
				break;
			}
			State = 686;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KindOfPassingContext kindOfPassing() {
			return GetRuleContext<KindOfPassingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MyllParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(MyllParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefCoreFuncContext defCoreFunc() {
			return GetRuleContext<DefCoreFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		public DefOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefOpContext defOp() {
		DefOpContext _localctx = new DefOpContext(Context, State);
		EnterRule(_localctx, 88, RULE_defOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORWARD:
			case MOVE:
			case COPY:
				{
				State = 688;
				kindOfPassing();
				State = 689;
				Match(ASSIGN);
				State = 691;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 690;
					id();
					}
					break;
				}
				}
				break;
			case CONVERT:
				{
				State = 693;
				Match(CONVERT);
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 694;
					tplParams();
					}
				}

				State = 698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 697;
					Match(RARROW);
					}
				}

				State = 700;
				typespec();
				}
				break;
			case STRING_LIT:
				{
				State = 701;
				Match(STRING_LIT);
				State = 702;
				defCoreFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 705;
				Match(REQUIRES);
				State = 706;
				typespecsNested();
				}
			}

			State = 709;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefCoreFuncContext defCoreFunc() {
			return GetRuleContext<DefCoreFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		public DefFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefFuncContext defFunc() {
		DefFuncContext _localctx = new DefFuncContext(Context, State);
		EnterRule(_localctx, 90, RULE_defFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			id();
			State = 712;
			defCoreFunc();
			State = 715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 713;
				Match(REQUIRES);
				State = 714;
				typespecsNested();
				}
			}

			State = 717;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefCoreFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public DefCoreFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defCoreFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefCoreFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefCoreFuncContext defCoreFunc() {
		DefCoreFuncContext _localctx = new DefCoreFuncContext(Context, State);
		EnterRule(_localctx, 92, RULE_defCoreFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 719;
				tplParams();
				}
			}

			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 722;
				funcTypeDef();
				}
				break;
			}
			State = 727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RARROW) {
				{
				State = 725;
				Match(RARROW);
				State = 726;
				typespec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdAcorsContext typedIdAcors() {
			return GetRuleContext<TypedIdAcorsContext>(0);
		}
		public DefVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefVarContext defVar() {
		DefVarContext _localctx = new DefVarContext(Context, State);
		EnterRule(_localctx, 94, RULE_defVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			typedIdAcors();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MyllParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 96, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PLUS() { return GetToken(MyllParser.DBL_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_MINUS() { return GetToken(MyllParser.DBL_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM() { return GetToken(MyllParser.EM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(MyllParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		public PreOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreOPContext preOP() {
		PreOPContext _localctx = new PreOPContext(Context, State);
		EnterRule(_localctx, 98, RULE_preOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PLUS() { return GetToken(MyllParser.DBL_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_MINUS() { return GetToken(MyllParser.DBL_MINUS, 0); }
		public PostOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostOPContext postOP() {
		PostOPContext _localctx = new PostOPContext(Context, State);
		EnterRule(_localctx, 100, RULE_postOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DBL_PLUS || _la==DBL_MINUS) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MyllParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MyllParser.STAR, i);
		}
		public PowOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowOPContext powOP() {
		PowOPContext _localctx = new PowOPContext(Context, State);
		EnterRule(_localctx, 102, RULE_powOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			Match(STAR);
			State = 738;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(MyllParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MyllParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MyllParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(MyllParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MyllParser.DIV, 0); }
		public MultOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOPContext multOP() {
		MultOPContext _localctx = new MultOPContext(Context, State);
		EnterRule(_localctx, 104, RULE_multOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AMP) | (1L << STAR) | (1L << SLASH) | (1L << MOD) | (1L << DOT) | (1L << CROSS) | (1L << DIV))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAT() { return GetToken(MyllParser.HAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(MyllParser.PIPE, 0); }
		public AddOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOPContext addOP() {
		AddOPContext _localctx = new AddOPContext(Context, State);
		EnterRule(_localctx, 106, RULE_addOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << PIPE) | (1L << HAT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(MyllParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(MyllParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(MyllParser.GT, i);
		}
		public ShiftOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOPContext shiftOP() {
		ShiftOPContext _localctx = new ShiftOPContext(Context, State);
		EnterRule(_localctx, 108, RULE_shiftOP);
		try {
			State = 747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LSHIFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 744;
				Match(LSHIFT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 745;
				Match(GT);
				State = 746;
				Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARE() { return GetToken(MyllParser.COMPARE, 0); }
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 110, RULE_cmpOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(COMPARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(MyllParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(MyllParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		public RelOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelOPContext relOP() {
		RelOPContext _localctx = new RelOPContext(Context, State);
		EnterRule(_localctx, 112, RULE_relOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTEQ) | (1L << GTEQ) | (1L << LT) | (1L << GT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MyllParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(MyllParser.NEQ, 0); }
		public EqualOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualOPContext equalOP() {
		EqualOPContext _localctx = new EqualOPContext(Context, State);
		EnterRule(_localctx, 114, RULE_equalOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==EQ || _la==NEQ) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_AMP() { return GetToken(MyllParser.DBL_AMP, 0); }
		public AndOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOPContext andOP() {
		AndOPContext _localctx = new AndOPContext(Context, State);
		EnterRule(_localctx, 116, RULE_andOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			Match(DBL_AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PIPE() { return GetToken(MyllParser.DBL_PIPE, 0); }
		public OrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrOPContext orOP() {
		OrOPContext _localctx = new OrOPContext(Context, State);
		EnterRule(_localctx, 118, RULE_orOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(DBL_PIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulCoalOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_COLON() { return GetToken(MyllParser.QM_COLON, 0); }
		public NulCoalOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulCoalOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulCoalOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulCoalOPContext nulCoalOP() {
		NulCoalOPContext _localctx = new NulCoalOPContext(Context, State);
		EnterRule(_localctx, 120, RULE_nulCoalOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			Match(QM_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemAccOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MyllParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_POINT() { return GetToken(MyllParser.QM_POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		public MemAccOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memAccOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemAccOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemAccOPContext memAccOP() {
		MemAccOPContext _localctx = new MemAccOPContext(Context, State);
		EnterRule(_localctx, 122, RULE_memAccOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RARROW) | (1L << QM_POINT) | (1L << POINT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemAccPtrOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_STAR() { return GetToken(MyllParser.POINT_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_POINT_STAR() { return GetToken(MyllParser.QM_POINT_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW_STAR() { return GetToken(MyllParser.ARROW_STAR, 0); }
		public MemAccPtrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memAccPtrOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemAccPtrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemAccPtrOPContext memAccPtrOP() {
		MemAccPtrOPContext _localctx = new MemAccPtrOPContext(Context, State);
		EnterRule(_localctx, 124, RULE_memAccPtrOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARROW_STAR) | (1L << POINT_STAR) | (1L << QM_POINT_STAR))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		public AssignOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOPContext assignOP() {
		AssignOPContext _localctx = new AssignOPContext(Context, State);
		EnterRule(_localctx, 126, RULE_assignOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggrAssignOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_POW() { return GetToken(MyllParser.AS_POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_MUL() { return GetToken(MyllParser.AS_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SLASH() { return GetToken(MyllParser.AS_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_MOD() { return GetToken(MyllParser.AS_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_AND() { return GetToken(MyllParser.AS_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_DOT() { return GetToken(MyllParser.AS_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_CROSS() { return GetToken(MyllParser.AS_CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_DIV() { return GetToken(MyllParser.AS_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_ADD() { return GetToken(MyllParser.AS_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SUB() { return GetToken(MyllParser.AS_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_OR() { return GetToken(MyllParser.AS_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_XOR() { return GetToken(MyllParser.AS_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_LSH() { return GetToken(MyllParser.AS_LSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_RSH() { return GetToken(MyllParser.AS_RSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_QM() { return GetToken(MyllParser.AS_QM, 0); }
		public AggrAssignOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggrAssignOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrAssignOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggrAssignOPContext aggrAssignOP() {
		AggrAssignOPContext _localctx = new AggrAssignOPContext(Context, State);
		EnterRule(_localctx, 128, RULE_aggrAssignOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (AS_POW - 60)) | (1L << (AS_MUL - 60)) | (1L << (AS_SLASH - 60)) | (1L << (AS_MOD - 60)) | (1L << (AS_DOT - 60)) | (1L << (AS_CROSS - 60)) | (1L << (AS_DIV - 60)) | (1L << (AS_ADD - 60)) | (1L << (AS_SUB - 60)) | (1L << (AS_LSH - 60)) | (1L << (AS_RSH - 60)) | (1L << (AS_AND - 60)) | (1L << (AS_OR - 60)) | (1L << (AS_XOR - 60)) | (1L << (AS_QM - 60)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_LIT() { return GetToken(MyllParser.CLASS_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(MyllParser.HEX_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LIT() { return GetToken(MyllParser.OCT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LIT() { return GetToken(MyllParser.BIN_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(MyllParser.FLOAT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(MyllParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LIT() { return GetToken(MyllParser.CHAR_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LIT() { return GetToken(MyllParser.BOOL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUL() { return GetToken(MyllParser.NUL, 0); }
		public LitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LitContext lit() {
		LitContext _localctx = new LitContext(Context, State);
		EnterRule(_localctx, 130, RULE_lit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LIT || _la==CHAR_LIT || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (NUL - 162)) | (1L << (CLASS_LIT - 162)) | (1L << (BOOL_LIT - 162)) | (1L << (FLOAT_LIT - 162)) | (1L << (HEX_LIT - 162)) | (1L << (OCT_LIT - 162)) | (1L << (BIN_LIT - 162)) | (1L << (INTEGER_LIT - 162)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINDEX() { return GetToken(MyllParser.AUTOINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USCORE() { return GetToken(MyllParser.USCORE, 0); }
		public WildIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildIdContext wildId() {
		WildIdContext _localctx = new WildIdContext(Context, State);
		EnterRule(_localctx, 132, RULE_wildId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTOINDEX || _la==USCORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyllParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 134, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdOrLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		public IdOrLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idOrLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdOrLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdOrLitContext idOrLit() {
		IdOrLitContext _localctx = new IdOrLitContext(Context, State);
		EnterRule(_localctx, 136, RULE_idOrLit);
		try {
			State = 777;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 775;
				id();
				}
				break;
			case STRING_LIT:
			case CHAR_LIT:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 776;
				lit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(MyllParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MyllParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MyllParser.BOOL, 0); }
		public SpecialTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialTypeContext specialType() {
		SpecialTypeContext _localctx = new SpecialTypeContext(Context, State);
		EnterRule(_localctx, 138, RULE_specialType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MyllParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEPOINT() { return GetToken(MyllParser.CODEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MyllParser.STRING, 0); }
		public CharTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharTypeContext charType() {
		CharTypeContext _localctx = new CharTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_charType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (CHAR - 83)) | (1L << (CODEPOINT - 83)) | (1L << (STRING - 83)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MyllParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F128() { return GetToken(MyllParser.F128, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F64() { return GetToken(MyllParser.F64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F32() { return GetToken(MyllParser.F32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F16() { return GetToken(MyllParser.F16, 0); }
		public FloatingTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingTypeContext floatingType() {
		FloatingTypeContext _localctx = new FloatingTypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_floatingType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (FLOAT - 86)) | (1L << (F128 - 86)) | (1L << (F64 - 86)) | (1L << (F32 - 86)) | (1L << (F16 - 86)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(MyllParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B64() { return GetToken(MyllParser.B64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B32() { return GetToken(MyllParser.B32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B16() { return GetToken(MyllParser.B16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B8() { return GetToken(MyllParser.B8, 0); }
		public BinaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryTypeContext binaryType() {
		BinaryTypeContext _localctx = new BinaryTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_binaryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (BYTE - 82)) | (1L << (B64 - 82)) | (1L << (B32 - 82)) | (1L << (B16 - 82)) | (1L << (B8 - 82)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MyllParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISIZE() { return GetToken(MyllParser.ISIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(MyllParser.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(MyllParser.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(MyllParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(MyllParser.I8, 0); }
		public SignedIntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedIntType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntTypeContext signedIntType() {
		SignedIntTypeContext _localctx = new SignedIntTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_signedIntType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (INT - 78)) | (1L << (ISIZE - 78)) | (1L << (I64 - 78)) | (1L << (I32 - 78)) | (1L << (I16 - 78)) | (1L << (I8 - 78)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignIntTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(MyllParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USIZE() { return GetToken(MyllParser.USIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U64() { return GetToken(MyllParser.U64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U32() { return GetToken(MyllParser.U32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U16() { return GetToken(MyllParser.U16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U8() { return GetToken(MyllParser.U8, 0); }
		public UnsignIntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignIntType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignIntTypeContext unsignIntType() {
		UnsignIntTypeContext _localctx = new UnsignIntTypeContext(Context, State);
		EnterRule(_localctx, 148, RULE_unsignIntType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (UINT - 79)) | (1L << (USIZE - 79)) | (1L << (U64 - 79)) | (1L << (U32 - 79)) | (1L << (U16 - 79)) | (1L << (U8 - 79)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTABLE() { return GetToken(MyllParser.MUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(MyllParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(MyllParser.STABLE, 0); }
		public QualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualContext qual() {
		QualContext _localctx = new QualContext(Context, State);
		EnterRule(_localctx, 150, RULE_qual);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePtrContext : ParserRuleContext {
		public IToken ptr;
		public IToken ary;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_AMP() { return GetToken(MyllParser.DBL_AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PTR_TO_ARY() { return GetToken(MyllParser.PTR_TO_ARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_LBRACK() { return GetToken(MyllParser.AT_LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM() { return GetToken(MyllParser.EM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		public TypePtrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePtr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePtr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePtrContext typePtr() {
		TypePtrContext _localctx = new TypePtrContext(Context, State);
		EnterRule(_localctx, 152, RULE_typePtr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)))) != 0)) {
				{
				{
				State = 793;
				qual();
				}
				}
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 805;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PTR_TO_ARY:
			case DBL_AMP:
			case AMP:
			case STAR:
				{
				State = 799;
				_localctx.ptr = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PTR_TO_ARY) | (1L << DBL_AMP) | (1L << AMP) | (1L << STAR))) != 0)) ) {
					_localctx.ptr = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AT_LBRACK:
			case LBRACK:
				{
				State = 800;
				_localctx.ary = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AT_LBRACK || _la==LBRACK) ) {
					_localctx.ary = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
					{
					State = 801;
					expr(0);
					}
				}

				State = 804;
				Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 807;
				_localctx.suffix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << EM) | (1L << QM))) != 0)) ) {
					_localctx.suffix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdTplArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplArgsContext tplArgs() {
			return GetRuleContext<TplArgsContext>(0);
		}
		public IdTplArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idTplArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdTplArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdTplArgsContext idTplArgs() {
		IdTplArgsContext _localctx = new IdTplArgsContext(Context, State);
		EnterRule(_localctx, 154, RULE_idTplArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			id();
			State = 812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 811;
				tplArgs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecBasicContext typespecBasic() {
			return GetRuleContext<TypespecBasicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecFuncContext typespecFunc() {
			return GetRuleContext<TypespecFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext typespecNested() {
			return GetRuleContext<TypespecNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePtrContext[] typePtr() {
			return GetRuleContexts<TypePtrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePtrContext typePtr(int i) {
			return GetRuleContext<TypePtrContext>(i);
		}
		public TypespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecContext typespec() {
		TypespecContext _localctx = new TypespecContext(Context, State);
		EnterRule(_localctx, 156, RULE_typespec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)))) != 0)) {
				{
				{
				State = 814;
				qual();
				}
				}
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
				{
				State = 820;
				typespecBasic();
				State = 824;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 821;
						typePtr();
						}
						} 
					}
					State = 826;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
				}
				}
				break;
			case FUNC:
				{
				State = 827;
				Match(FUNC);
				State = 831;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 828;
						typePtr();
						}
						} 
					}
					State = 833;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
				}
				State = 834;
				typespecFunc();
				}
				break;
			case ID:
				{
				State = 835;
				typespecNested();
				State = 839;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 836;
						typePtr();
						}
						} 
					}
					State = 841;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecBasicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialTypeContext specialType() {
			return GetRuleContext<SpecialTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharTypeContext charType() {
			return GetRuleContext<CharTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatingTypeContext floatingType() {
			return GetRuleContext<FloatingTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryTypeContext binaryType() {
			return GetRuleContext<BinaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedIntTypeContext signedIntType() {
			return GetRuleContext<SignedIntTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignIntTypeContext unsignIntType() {
			return GetRuleContext<UnsignIntTypeContext>(0);
		}
		public TypespecBasicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecBasic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecBasic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecBasicContext typespecBasic() {
		TypespecBasicContext _localctx = new TypespecBasicContext(Context, State);
		EnterRule(_localctx, 158, RULE_typespecBasic);
		try {
			State = 850;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 844;
				specialType();
				}
				break;
			case CHAR:
			case CODEPOINT:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 845;
				charType();
				}
				break;
			case FLOAT:
			case F128:
			case F64:
			case F32:
			case F16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 846;
				floatingType();
				}
				break;
			case BYTE:
			case B64:
			case B32:
			case B16:
			case B8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 847;
				binaryType();
				}
				break;
			case INT:
			case ISIZE:
			case I64:
			case I32:
			case I16:
			case I8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 848;
				signedIntType();
				}
				break;
			case UINT:
			case USIZE:
			case U64:
			case U32:
			case U16:
			case U8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 849;
				unsignIntType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public TypespecFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecFuncContext typespecFunc() {
		TypespecFuncContext _localctx = new TypespecFuncContext(Context, State);
		EnterRule(_localctx, 160, RULE_typespecFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 852;
				funcTypeDef();
				}
				break;
			}
			State = 857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 855;
				Match(RARROW);
				State = 856;
				typespec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecNestedContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext[] idTplArgs() {
			return GetRuleContexts<IdTplArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs(int i) {
			return GetRuleContext<IdTplArgsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CTOR() { return GetToken(MyllParser.CTOR, 0); }
		public TypespecNestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecNested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecNestedContext typespecNested() {
		TypespecNestedContext _localctx = new TypespecNestedContext(Context, State);
		EnterRule(_localctx, 162, RULE_typespecNested);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			idTplArgs();
			State = 864;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 860;
					Match(SCOPE);
					State = 861;
					idTplArgs();
					}
					} 
				}
				State = 866;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			State = 869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 867;
				Match(SCOPE);
				State = 868;
				_localctx.v = Match(CTOR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecsNestedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext[] typespecNested() {
			return GetRuleContexts<TypespecNestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext typespecNested(int i) {
			return GetRuleContext<TypespecNestedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TypespecsNestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecsNested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecsNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecsNestedContext typespecsNested() {
		TypespecsNestedContext _localctx = new TypespecsNestedContext(Context, State);
		EnterRule(_localctx, 164, RULE_typespecsNested);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			typespecNested();
			State = 876;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 872;
					Match(COMMA);
					State = 873;
					typespecNested();
					}
					} 
				}
				State = 878;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			}
			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 879;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 166, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 882;
				id();
				State = 883;
				Match(COLON);
				}
				break;
			}
			State = 887;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 168, RULE_args);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			arg();
			State = 894;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 890;
					Match(COMMA);
					State = 891;
					arg();
					}
					} 
				}
				State = 896;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			}
			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 897;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_LPAREN() { return GetToken(MyllParser.QM_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 170, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			_localctx.ary = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==QM_LPAREN || _la==LPAREN) ) {
				_localctx.ary = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
				{
				State = 901;
				args();
				}
			}

			State = 904;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexCallContext : ParserRuleContext {
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_LBRACK() { return GetToken(MyllParser.QM_LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		public IndexCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexCallContext indexCall() {
		IndexCallContext _localctx = new IndexCallContext(Context, State);
		EnterRule(_localctx, 172, RULE_indexCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			_localctx.ary = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LBRACK || _la==QM_LBRACK) ) {
				_localctx.ary = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 907;
			args();
			State = 908;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 174, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			typespec();
			State = 912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 911;
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public FuncTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeDefContext funcTypeDef() {
		FuncTypeDefContext _localctx = new FuncTypeDefContext(Context, State);
		EnterRule(_localctx, 176, RULE_funcTypeDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			Match(LPAREN);
			State = 926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
				{
				State = 915;
				param();
				State = 920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 916;
						Match(COMMA);
						State = 917;
						param();
						}
						} 
					}
					State = 922;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
				}
				State = 924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 923;
					Match(COMMA);
					}
				}

				}
			}

			State = 928;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public TplArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplArgContext tplArg() {
		TplArgContext _localctx = new TplArgContext(Context, State);
		EnterRule(_localctx, 178, RULE_tplArg);
		try {
			State = 932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LIT:
			case CHAR_LIT:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 930;
				lit();
				}
				break;
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 931;
				typespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplArgContext[] tplArg() {
			return GetRuleContexts<TplArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplArgContext tplArg(int i) {
			return GetRuleContext<TplArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TplArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplArgsContext tplArgs() {
		TplArgsContext _localctx = new TplArgsContext(Context, State);
		EnterRule(_localctx, 180, RULE_tplArgs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			Match(LT);
			State = 935;
			tplArg();
			State = 940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 936;
					Match(COMMA);
					State = 937;
					tplArg();
					}
					} 
				}
				State = 942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			}
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 943;
				Match(COMMA);
				}
			}

			State = 946;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TplParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplParamsContext tplParams() {
		TplParamsContext _localctx = new TplParamsContext(Context, State);
		EnterRule(_localctx, 182, RULE_tplParams);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			Match(LT);
			State = 949;
			id();
			State = 954;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 950;
					Match(COMMA);
					State = 951;
					id();
					}
					} 
				}
				State = 956;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			}
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 957;
				Match(COMMA);
				}
			}

			State = 960;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreeWayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOPContext relOP() {
			return GetRuleContext<RelOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualOPContext equalOP() {
			return GetRuleContext<EqualOPContext>(0);
		}
		public ThreeWayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threeWay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreeWay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreeWayContext threeWay() {
		ThreeWayContext _localctx = new ThreeWayContext(Context, State);
		EnterRule(_localctx, 184, RULE_threeWay);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LTEQ:
			case GTEQ:
			case LT:
			case GT:
				{
				State = 962;
				relOP();
				}
				break;
			case EQ:
			case NEQ:
				{
				State = 963;
				equalOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 966;
			Match(COLON);
			State = 967;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 186, RULE_capture);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			Match(LBRACK);
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
				{
				State = 970;
				args();
				}
			}

			State = 973;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndOPContext andOP() {
			return GetRuleContext<AndOPContext>(0);
		}
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public ComparisonExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public LambdaExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowOPContext powOP() {
			return GetRuleContext<PowOPContext>(0);
		}
		public PowExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOPContext multOP() {
			return GetRuleContext<MultOPContext>(0);
		}
		public MultExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostOPContext postOP() {
			return GetRuleContext<PostOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexCallContext indexCall() {
			return GetRuleContext<IndexCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemAccOPContext memAccOP() {
			return GetRuleContext<MemAccOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs() {
			return GetRuleContext<IdTplArgsContext>(0);
		}
		public PostExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOPContext addOP() {
			return GetRuleContext<AddOPContext>(0);
		}
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOPContext relOP() {
			return GetRuleContext<RelOPContext>(0);
		}
		public RelationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRP_POINT() { return GetToken(MyllParser.TRP_POINT, 0); }
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ConditionalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemPtrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemAccPtrOPContext memAccPtrOP() {
			return GetRuleContext<MemAccPtrOPContext>(0);
		}
		public MemPtrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemPtrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalesceExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NulCoalOPContext nulCoalOP() {
			return GetRuleContext<NulCoalOPContext>(0);
		}
		public NullCoalesceExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalesceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrOPContext orOP() {
			return GetRuleContext<OrOPContext>(0);
		}
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThreeWayConditionalExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_QM() { return GetToken(MyllParser.DBL_QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreeWayContext[] threeWay() {
			return GetRuleContexts<ThreeWayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreeWayContext threeWay(int i) {
			return GetRuleContext<ThreeWayContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ThreeWayConditionalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreeWayConditionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreExprContext : ExprContext {
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(MyllParser.SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MyllParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreOPContext preOP() {
			return GetRuleContext<PreOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MyllParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(MyllParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(MyllParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM() { return GetToken(MyllParser.EM, 0); }
		public PreExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildIdExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public WildIdContext wildId() {
			return GetRuleContext<WildIdContext>(0);
		}
		public WildIdExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualOPContext equalOP() {
			return GetRuleContext<EqualOPContext>(0);
		}
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThrowExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MyllParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public NewExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopedExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext[] idTplArgs() {
			return GetRuleContexts<IdTplArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs(int i) {
			return GetRuleContext<IdTplArgsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		public ScopedExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdTplExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs() {
			return GetRuleContext<IdTplArgsContext>(0);
		}
		public IdTplExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdTplExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOPContext shiftOP() {
			return GetRuleContext<ShiftOPContext>(0);
		}
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 188;
		EnterRecursionRule(_localctx, 188, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				_localctx = new ScopedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 979;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 976;
						idTplArgs();
						State = 977;
						Match(SCOPE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 981;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 983;
				idTplArgs();
				}
				break;
			case 2:
				{
				_localctx = new NewExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 985;
				Match(NEW);
				State = 987;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
				case 1:
					{
					State = 986;
					typespec();
					}
					break;
				}
				State = 990;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
				case 1:
					{
					State = 989;
					funcCall();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new PreExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1010;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 992;
					Match(LPAREN);
					State = 1000;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COPY:
						{
						State = 993;
						Match(COPY);
						}
						break;
					case MOVE:
						{
						State = 994;
						Match(MOVE);
						}
						break;
					case FORWARD:
						{
						State = 995;
						Match(FORWARD);
						}
						break;
					case EM:
					case QM:
					case AUTO:
					case VOID:
					case BOOL:
					case INT:
					case UINT:
					case ISIZE:
					case USIZE:
					case BYTE:
					case CHAR:
					case CODEPOINT:
					case STRING:
					case FLOAT:
					case I64:
					case I32:
					case I16:
					case I8:
					case U64:
					case U32:
					case U16:
					case U8:
					case B64:
					case B32:
					case B16:
					case B8:
					case F128:
					case F64:
					case F32:
					case F16:
					case VOLATILE:
					case STABLE:
					case CONST:
					case MUTABLE:
					case FUNC:
					case ID:
						{
						State = 997;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EM || _la==QM) {
							{
							State = 996;
							_la = TokenStream.LA(1);
							if ( !(_la==EM || _la==QM) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 999;
						typespec();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1002;
					Match(RPAREN);
					}
					break;
				case SIZEOF:
					{
					State = 1003;
					Match(SIZEOF);
					}
					break;
				case DELETE:
					{
					State = 1004;
					Match(DELETE);
					State = 1007;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LBRACK) {
						{
						State = 1005;
						((PreExprContext)_localctx).ary = Match(LBRACK);
						State = 1006;
						Match(RBRACK);
						}
					}

					}
					break;
				case DBL_PLUS:
				case DBL_MINUS:
				case AMP:
				case STAR:
				case PLUS:
				case MINUS:
				case EM:
				case TILDE:
					{
					State = 1009;
					preOP();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1012;
				expr(21);
				}
				break;
			case 4:
				{
				_localctx = new ThrowExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1013;
				Match(THROW);
				State = 1014;
				expr(6);
				}
				break;
			case 5:
				{
				_localctx = new LambdaExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1015;
				Match(FUNC);
				State = 1017;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
				case 1:
					{
					State = 1016;
					capture();
					}
					break;
				}
				State = 1020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1019;
					tplParams();
					}
				}

				State = 1023;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
				case 1:
					{
					State = 1022;
					funcTypeDef();
					}
					break;
				}
				State = 1027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 1025;
					Match(RARROW);
					State = 1026;
					typespec();
					}
				}

				State = 1029;
				funcBody();
				}
				break;
			case 6:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1030;
				Match(LPAREN);
				State = 1031;
				expr(0);
				State = 1032;
				Match(RPAREN);
				}
				break;
			case 7:
				{
				_localctx = new WildIdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1034;
				wildId();
				}
				break;
			case 8:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1035;
				lit();
				}
				break;
			case 9:
				{
				_localctx = new IdTplExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1036;
				idTplArgs();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1112;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
					case 1:
						{
						_localctx = new MemPtrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1039;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1040;
						memAccPtrOP();
						State = 1041;
						expr(21);
						}
						break;
					case 2:
						{
						_localctx = new PowExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1043;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1044;
						powOP();
						State = 1045;
						expr(19);
						}
						break;
					case 3:
						{
						_localctx = new MultExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1047;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1048;
						multOP();
						State = 1049;
						expr(19);
						}
						break;
					case 4:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1051;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1052;
						addOP();
						State = 1053;
						expr(18);
						}
						break;
					case 5:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1055;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1056;
						shiftOP();
						State = 1057;
						expr(17);
						}
						break;
					case 6:
						{
						_localctx = new ComparisonExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1059;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1060;
						cmpOp();
						State = 1061;
						expr(16);
						}
						break;
					case 7:
						{
						_localctx = new RelationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1063;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1064;
						relOP();
						State = 1065;
						expr(15);
						}
						break;
					case 8:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1067;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1068;
						equalOP();
						State = 1069;
						expr(14);
						}
						break;
					case 9:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1071;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1072;
						andOP();
						State = 1073;
						expr(13);
						}
						break;
					case 10:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1075;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1076;
						orOP();
						State = 1077;
						expr(12);
						}
						break;
					case 11:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1079;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1080;
						Match(TRP_POINT);
						State = 1081;
						expr(11);
						}
						break;
					case 12:
						{
						_localctx = new NullCoalesceExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1082;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1083;
						nulCoalOP();
						State = 1084;
						expr(10);
						}
						break;
					case 13:
						{
						_localctx = new ConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1086;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1087;
						Match(QM);
						State = 1088;
						expr(0);
						State = 1089;
						Match(COLON);
						State = 1090;
						expr(8);
						}
						break;
					case 14:
						{
						_localctx = new PostExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1092;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1099;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case DBL_PLUS:
						case DBL_MINUS:
							{
							State = 1093;
							postOP();
							}
							break;
						case QM_LPAREN:
						case LPAREN:
							{
							State = 1094;
							funcCall();
							}
							break;
						case LBRACK:
						case QM_LBRACK:
							{
							State = 1095;
							indexCall();
							}
							break;
						case RARROW:
						case QM_POINT:
						case POINT:
							{
							State = 1096;
							memAccOP();
							State = 1097;
							idTplArgs();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 15:
						{
						_localctx = new ThreeWayConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1101;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1102;
						Match(DBL_QM);
						State = 1104;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 1103;
								threeWay();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 1106;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 1110;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
						case 1:
							{
							State = 1108;
							Match(COLON);
							State = 1109;
							expr(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDefContext[] accessorDef() {
			return GetRuleContexts<AccessorDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDefContext accessorDef(int i) {
			return GetRuleContext<AccessorDefContext>(i);
		}
		public IdAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdAccessorContext idAccessor() {
		IdAccessorContext _localctx = new IdAccessorContext(Context, State);
		EnterRule(_localctx, 190, RULE_idAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117;
			id();
			State = 1126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 1118;
				Match(LCURLY);
				State = 1120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1119;
					accessorDef();
					}
					}
					State = 1122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LBRACK || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)) | (1L << (GET - 106)) | (1L << (REFGET - 106)) | (1L << (SET - 106)))) != 0) );
				State = 1124;
				Match(RCURLY);
				}
			}

			State = 1130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1128;
				Match(ASSIGN);
				State = 1129;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IdExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprContext idExpr() {
		IdExprContext _localctx = new IdExprContext(Context, State);
		EnterRule(_localctx, 192, RULE_idExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132;
			id();
			State = 1135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1133;
				Match(ASSIGN);
				State = 1134;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdAccessorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorContext[] idAccessor() {
			return GetRuleContexts<IdAccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorContext idAccessor(int i) {
			return GetRuleContext<IdAccessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public IdAccessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idAccessors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAccessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdAccessorsContext idAccessors() {
		IdAccessorsContext _localctx = new IdAccessorsContext(Context, State);
		EnterRule(_localctx, 194, RULE_idAccessors);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137;
			idAccessor();
			State = 1142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1138;
					Match(COMMA);
					State = 1139;
					idAccessor();
					}
					} 
				}
				State = 1144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1145;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExprContext[] idExpr() {
			return GetRuleContexts<IdExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdExprContext idExpr(int i) {
			return GetRuleContext<IdExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public IdExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprsContext idExprs() {
		IdExprsContext _localctx = new IdExprsContext(Context, State);
		EnterRule(_localctx, 196, RULE_idExprs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			idExpr();
			State = 1153;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1149;
					Match(COMMA);
					State = 1150;
					idExpr();
					}
					} 
				}
				State = 1155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			}
			State = 1157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1156;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdAcorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorsContext idAccessors() {
			return GetRuleContext<IdAccessorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public TypedIdAcorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdAcors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdAcors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdAcorsContext typedIdAcors() {
		TypedIdAcorsContext _localctx = new TypedIdAcorsContext(Context, State);
		EnterRule(_localctx, 198, RULE_typedIdAcors);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159;
			typespec();
			State = 1160;
			idAccessors();
			State = 1161;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MyllParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALL() { return GetToken(MyllParser.FALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 200, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163;
			Match(CASE);
			State = 1164;
			expr(0);
			State = 1169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1165;
				Match(COMMA);
				State = 1166;
				expr(0);
				}
				}
				State = 1171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 1172;
				Match(COLON);
				State = 1176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1173;
					levStmt();
					}
					}
					State = 1178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FALL) {
					{
					State = 1179;
					Match(FALL);
					State = 1180;
					Match(SEMI);
					}
				}

				}
				break;
			case LCURLY:
				{
				State = 1183;
				Match(LCURLY);
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1184;
					levStmt();
					}
					}
					State = 1189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FALL) {
					{
					State = 1190;
					Match(FALL);
					State = 1191;
					Match(SEMI);
					}
				}

				State = 1194;
				Match(RCURLY);
				}
				break;
			case PHATRARROW:
				{
				State = 1195;
				Match(PHATRARROW);
				State = 1196;
				levStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MyllParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 202, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199;
			_la = TokenStream.LA(1);
			if ( !(_la==ELSE || _la==DEFAULT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 1200;
				Match(COLON);
				State = 1204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1201;
					levStmt();
					}
					}
					State = 1206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LCURLY:
				{
				State = 1207;
				Match(LCURLY);
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1208;
					levStmt();
					}
					}
					State = 1213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1214;
				Match(RCURLY);
				}
				break;
			case PHATRARROW:
				{
				State = 1215;
				Match(PHATRARROW);
				State = 1216;
				levStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CTOR() { return GetToken(MyllParser.CTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public InitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitListContext initList() {
		InitListContext _localctx = new InitListContext(Context, State);
		EnterRule(_localctx, 204, RULE_initList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			Match(COLON);
			State = 1239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 1220;
				id();
				State = 1221;
				funcCall();
				State = 1228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1222;
						Match(COMMA);
						State = 1223;
						id();
						State = 1224;
						funcCall();
						}
						} 
					}
					State = 1230;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				}
				State = 1232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1231;
					Match(COMMA);
					}
				}

				}
				break;
			case CTOR:
				{
				State = 1234;
				Match(CTOR);
				State = 1235;
				funcCall();
				State = 1237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1236;
					Match(COMMA);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public FuncBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncBodyContext funcBody() {
		FuncBodyContext _localctx = new FuncBodyContext(Context, State);
		EnterRule(_localctx, 206, RULE_funcBody);
		try {
			State = 1246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PHATRARROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1241;
				Match(PHATRARROW);
				State = 1242;
				expr(0);
				State = 1243;
				Match(SEMI);
				}
				break;
			case STRING_LIT:
			case CHAR_LIT:
			case DBL_PLUS:
			case DBL_MINUS:
			case AUTOINDEX:
			case LBRACK:
			case LCURLY:
			case LPAREN:
			case AMP:
			case STAR:
			case PLUS:
			case MINUS:
			case SEMI:
			case EM:
			case TILDE:
			case USCORE:
			case CONST:
			case USING:
			case ALIAS:
			case FUNC:
			case FIELD:
			case VAR:
			case LET:
			case LOOP:
			case FOR:
			case DO:
			case WHILE:
			case IF:
			case SWITCH:
			case BREAK:
			case RETURN:
			case TRY:
			case DEFER:
			case SIZEOF:
			case NEW:
			case DELETE:
			case THROW:
			case ID:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1245;
				levStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDefContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(MyllParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFGET() { return GetToken(MyllParser.REFGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MyllParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		public AccessorDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDefContext accessorDef() {
		AccessorDefContext _localctx = new AccessorDefContext(Context, State);
		EnterRule(_localctx, 208, RULE_accessorDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 1248;
				attribBlk();
				}
			}

			State = 1254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)))) != 0)) {
				{
				{
				State = 1251;
				qual();
				}
				}
				State = 1256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1257;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (GET - 125)) | (1L << (REFGET - 125)) | (1L << (SET - 125)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1258;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(Context, State);
		EnterRule(_localctx, 210, RULE_funcDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			id();
			State = 1262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1261;
				tplParams();
				}
			}

			State = 1265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 1264;
				funcTypeDef();
				}
				break;
			}
			State = 1269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RARROW) {
				{
				State = 1267;
				Match(RARROW);
				State = 1268;
				typespec();
				}
			}

			State = 1273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 1271;
				Match(REQUIRES);
				State = 1272;
				typespecsNested();
				}
			}

			State = 1275;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(MyllParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		public OpDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpDefContext opDef() {
		OpDefContext _localctx = new OpDefContext(Context, State);
		EnterRule(_localctx, 212, RULE_opDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277;
			Match(STRING_LIT);
			State = 1279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1278;
				tplParams();
				}
			}

			State = 1282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1281;
				funcTypeDef();
				}
				break;
			}
			State = 1286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RARROW) {
				{
				State = 1284;
				Match(RARROW);
				State = 1285;
				typespec();
				}
			}

			State = 1290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 1288;
				Match(REQUIRES);
				State = 1289;
				typespecsNested();
				}
			}

			State = 1292;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondThenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public CondThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condThen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondThenContext condThen() {
		CondThenContext _localctx = new CondThenContext(Context, State);
		EnterRule(_localctx, 214, RULE_condThen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294;
			Match(LPAREN);
			State = 1295;
			expr(0);
			State = 1296;
			Match(RPAREN);
			State = 1297;
			levStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InStmtContext : ParserRuleContext {
		public InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inStmt; } }
	 
		public InStmtContext() { }
		public virtual void CopyFrom(InStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchStmtContext : InStmtContext {
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(MyllParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimesStmtContext : InStmtContext {
		public ExprContext count;
		public IdContext name;
		public LevStmtContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(MyllParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		public TimesStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggrAssignStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggrAssignOPContext aggrAssignOP() {
			return GetRuleContext<AggrAssignOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public AggrAssignStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStmtContext : InStmtContext {
		public LevStmtContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(MyllParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public LoopStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		public BlockStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnIfStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MyllParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MyllParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ReturnIfStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileStmtContext : InStmtContext {
		public LevStmtContext body;
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyllParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DoWhileStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ExpressionStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiAssignStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignOPContext[] assignOP() {
			return GetRuleContexts<AssignOPContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignOPContext assignOP(int i) {
			return GetRuleContext<AssignOPContext>(i);
		}
		public MultiAssignStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(MyllParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(MyllParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondThenContext[] condThen() {
			return GetRuleContexts<CondThenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondThenContext condThen(int i) {
			return GetRuleContext<CondThenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(MyllParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(MyllParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public IfStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : InStmtContext {
		public ExprContext cond;
		public LevStmtContext body;
		public LevStmtContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyllParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		public WhileStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableStmtContext : InStmtContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(MyllParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MyllParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(MyllParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdAcorsContext[] typedIdAcors() {
			return GetRuleContexts<TypedIdAcorsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdAcorsContext typedIdAcors(int i) {
			return GetRuleContext<TypedIdAcorsContext>(i);
		}
		public VariableStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MyllParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		public BreakStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(MyllParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public AliasStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MyllParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public UsingStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public EmptyStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MyllParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ThrowStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : InStmtContext {
		public LevStmtContext init;
		public ExprContext cond;
		public ExprContext iter;
		public LevStmtContext body;
		public LevStmtContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MyllParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeferStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFER() { return GetToken(MyllParser.DEFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public DeferStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeferStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryCatchStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(MyllParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(MyllParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(MyllParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext[] funcTypeDef() {
			return GetRuleContexts<FuncTypeDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef(int i) {
			return GetRuleContext<FuncTypeDefContext>(i);
		}
		public TryCatchStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InStmtContext inStmt() {
		InStmtContext _localctx = new InStmtContext(Context, State);
		EnterRule(_localctx, 216, RULE_inStmt);
		int _la;
		try {
			int _alt;
			State = 1463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				_localctx = new EmptyStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1299;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1300;
				Match(LCURLY);
				State = 1304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1301;
					levStmt();
					}
					}
					State = 1306;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1307;
				Match(RCURLY);
				}
				break;
			case 3:
				_localctx = new UsingStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1308;
				Match(USING);
				State = 1309;
				typespecsNested();
				State = 1310;
				Match(SEMI);
				}
				break;
			case 4:
				_localctx = new AliasStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1312;
				Match(ALIAS);
				State = 1313;
				id();
				State = 1314;
				Match(ASSIGN);
				State = 1315;
				typespec();
				State = 1316;
				Match(SEMI);
				}
				break;
			case 5:
				_localctx = new VariableStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1318;
				((VariableStmtContext)_localctx).v = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)))) != 0)) ) {
					((VariableStmtContext)_localctx).v = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1328;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LCURLY:
					{
					State = 1319;
					Match(LCURLY);
					State = 1323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
						{
						{
						State = 1320;
						typedIdAcors();
						}
						}
						State = 1325;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1326;
					Match(RCURLY);
					}
					break;
				case AUTO:
				case VOID:
				case BOOL:
				case INT:
				case UINT:
				case ISIZE:
				case USIZE:
				case BYTE:
				case CHAR:
				case CODEPOINT:
				case STRING:
				case FLOAT:
				case I64:
				case I32:
				case I16:
				case I8:
				case U64:
				case U32:
				case U16:
				case U8:
				case B64:
				case B32:
				case B16:
				case B8:
				case F128:
				case F64:
				case F32:
				case F16:
				case VOLATILE:
				case STABLE:
				case CONST:
				case MUTABLE:
				case FUNC:
				case ID:
					{
					State = 1327;
					typedIdAcors();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1330;
				Match(RETURN);
				State = 1332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
					{
					State = 1331;
					expr(0);
					}
				}

				State = 1334;
				Match(SEMI);
				}
				break;
			case 7:
				_localctx = new ReturnIfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1335;
				Match(DO);
				State = 1336;
				Match(RETURN);
				State = 1338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
					{
					State = 1337;
					expr(0);
					}
				}

				State = 1340;
				Match(IF);
				State = 1341;
				Match(LPAREN);
				State = 1342;
				expr(0);
				State = 1343;
				Match(RPAREN);
				State = 1344;
				Match(SEMI);
				}
				break;
			case 8:
				_localctx = new ThrowStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1346;
				Match(THROW);
				State = 1347;
				expr(0);
				State = 1348;
				Match(SEMI);
				}
				break;
			case 9:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1350;
				Match(BREAK);
				State = 1352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER_LIT) {
					{
					State = 1351;
					Match(INTEGER_LIT);
					}
				}

				State = 1354;
				Match(SEMI);
				}
				break;
			case 10:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1355;
				Match(IF);
				State = 1356;
				condThen();
				State = 1362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1357;
						Match(ELSE);
						State = 1358;
						Match(IF);
						State = 1359;
						condThen();
						}
						} 
					}
					State = 1364;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
				}
				State = 1367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
				case 1:
					{
					State = 1365;
					Match(ELSE);
					State = 1366;
					levStmt();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1369;
				Match(SWITCH);
				State = 1370;
				Match(LPAREN);
				State = 1371;
				((SwitchStmtContext)_localctx).cond = expr(0);
				State = 1372;
				Match(RPAREN);
				State = 1373;
				Match(LCURLY);
				State = 1375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1374;
					caseBlock();
					}
					}
					State = 1377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CASE );
				State = 1380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE || _la==DEFAULT) {
					{
					State = 1379;
					defaultBlock();
					}
				}

				State = 1382;
				Match(RCURLY);
				}
				break;
			case 12:
				_localctx = new LoopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1384;
				Match(LOOP);
				State = 1385;
				((LoopStmtContext)_localctx).body = levStmt();
				}
				break;
			case 13:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1386;
				Match(FOR);
				State = 1387;
				Match(LPAREN);
				State = 1388;
				((ForStmtContext)_localctx).init = levStmt();
				State = 1390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
					{
					State = 1389;
					((ForStmtContext)_localctx).cond = expr(0);
					}
				}

				State = 1392;
				Match(SEMI);
				State = 1394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
					{
					State = 1393;
					((ForStmtContext)_localctx).iter = expr(0);
					}
				}

				State = 1396;
				Match(RPAREN);
				State = 1397;
				((ForStmtContext)_localctx).body = levStmt();
				State = 1400;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
				case 1:
					{
					State = 1398;
					Match(ELSE);
					State = 1399;
					((ForStmtContext)_localctx).els = levStmt();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1402;
				Match(WHILE);
				State = 1403;
				Match(LPAREN);
				State = 1404;
				((WhileStmtContext)_localctx).cond = expr(0);
				State = 1405;
				Match(RPAREN);
				State = 1406;
				((WhileStmtContext)_localctx).body = levStmt();
				State = 1409;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
				case 1:
					{
					State = 1407;
					Match(ELSE);
					State = 1408;
					((WhileStmtContext)_localctx).els = levStmt();
					}
					break;
				}
				}
				break;
			case 15:
				_localctx = new DoWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1411;
				Match(DO);
				State = 1412;
				((DoWhileStmtContext)_localctx).body = levStmt();
				State = 1413;
				Match(WHILE);
				State = 1414;
				Match(LPAREN);
				State = 1415;
				((DoWhileStmtContext)_localctx).cond = expr(0);
				State = 1416;
				Match(RPAREN);
				}
				break;
			case 16:
				_localctx = new TimesStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DO) {
					{
					State = 1418;
					Match(DO);
					}
				}

				State = 1421;
				((TimesStmtContext)_localctx).count = expr(0);
				State = 1422;
				Match(TIMES);
				State = 1428;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
				case 1:
					{
					State = 1423;
					((TimesStmtContext)_localctx).name = id();
					State = 1426;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
					case 1:
						{
						State = 1424;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1425;
						Match(INTEGER_LIT);
						}
						break;
					}
					}
					break;
				}
				State = 1430;
				((TimesStmtContext)_localctx).body = levStmt();
				}
				break;
			case 17:
				_localctx = new TryCatchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1432;
				Match(TRY);
				State = 1433;
				levStmt();
				State = 1439;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1434;
						Match(CATCH);
						State = 1436;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
						case 1:
							{
							State = 1435;
							funcTypeDef();
							}
							break;
						}
						State = 1438;
						levStmt();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1441;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 18:
				_localctx = new DeferStmtContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1443;
				Match(DEFER);
				State = 1444;
				levStmt();
				}
				break;
			case 19:
				_localctx = new MultiAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1445;
				expr(0);
				State = 1449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1446;
					assignOP();
					State = 1447;
					expr(0);
					}
					}
					State = 1451;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ASSIGN );
				State = 1453;
				Match(SEMI);
				}
				break;
			case 20:
				_localctx = new AggrAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1455;
				expr(0);
				State = 1456;
				aggrAssignOP();
				State = 1457;
				expr(0);
				State = 1458;
				Match(SEMI);
				}
				break;
			case 21:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1460;
				expr(0);
				State = 1461;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 94: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 23);
		case 14: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,171,1466,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,3,0,220,8,0,1,0,5,
		0,223,8,0,10,0,12,0,226,9,0,1,0,5,0,229,8,0,10,0,12,0,232,9,0,1,1,1,1,
		1,1,1,1,1,2,1,2,1,2,1,2,5,2,242,8,2,10,2,12,2,245,9,2,1,2,3,2,248,8,2,
		1,2,1,2,1,3,3,3,253,8,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,261,8,4,10,4,12,4,
		264,9,4,1,4,3,4,267,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,278,8,
		5,10,5,12,5,281,9,5,1,5,3,5,284,8,5,1,5,1,5,3,5,288,8,5,1,6,1,6,1,6,1,
		6,1,6,3,6,295,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		3,7,310,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,321,8,9,10,9,12,9,
		324,9,9,1,9,3,9,327,8,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,335,8,10,10,
		10,12,10,338,9,10,1,10,3,10,341,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,
		1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,359,8,15,10,15,12,15,
		362,9,15,1,15,3,15,365,8,15,1,16,1,16,1,16,1,16,5,16,371,8,16,10,16,12,
		16,374,9,16,1,16,3,16,377,8,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,
		386,8,18,10,18,12,18,389,9,18,1,18,3,18,392,8,18,1,19,1,19,1,19,1,19,5,
		19,398,8,19,10,19,12,19,401,9,19,1,19,3,19,404,8,19,1,20,1,20,1,20,1,20,
		5,20,410,8,20,10,20,12,20,413,9,20,1,20,3,20,416,8,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,5,26,433,8,26,
		10,26,12,26,436,9,26,1,26,1,26,3,26,440,8,26,3,26,442,8,26,1,27,1,27,1,
		27,1,27,1,27,5,27,449,8,27,10,27,12,27,452,9,27,1,27,1,27,3,27,456,8,27,
		3,27,458,8,27,1,28,1,28,1,28,1,28,1,28,5,28,465,8,28,10,28,12,28,468,9,
		28,1,28,1,28,3,28,472,8,28,3,28,474,8,28,1,29,1,29,1,29,1,29,1,29,5,29,
		481,8,29,10,29,12,29,484,9,29,1,29,1,29,3,29,488,8,29,3,29,490,8,29,1,
		30,1,30,1,30,1,30,1,30,5,30,497,8,30,10,30,12,30,500,9,30,1,30,1,30,3,
		30,504,8,30,3,30,506,8,30,1,31,1,31,1,31,1,31,1,31,5,31,513,8,31,10,31,
		12,31,516,9,31,1,31,1,31,3,31,520,8,31,3,31,522,8,31,1,32,1,32,1,32,1,
		32,1,32,5,32,529,8,32,10,32,12,32,532,9,32,1,32,1,32,3,32,536,8,32,3,32,
		538,8,32,1,33,1,33,1,33,1,33,1,33,5,33,545,8,33,10,33,12,33,548,9,33,1,
		33,1,33,3,33,552,8,33,3,33,554,8,33,1,34,1,34,1,34,5,34,559,8,34,10,34,
		12,34,562,9,34,1,34,1,34,1,34,1,34,5,34,568,8,34,10,34,12,34,571,9,34,
		1,34,3,34,574,8,34,1,35,1,35,1,36,1,36,3,36,580,8,36,1,36,1,36,1,36,1,
		37,1,37,3,37,587,8,37,1,38,1,38,3,38,591,8,38,1,38,1,38,3,38,595,8,38,
		1,38,1,38,5,38,599,8,38,10,38,12,38,602,9,38,1,38,1,38,1,39,1,39,1,39,
		3,39,609,8,39,1,39,1,39,1,39,1,39,1,40,1,40,3,40,617,8,40,1,40,1,40,3,
		40,621,8,40,1,40,1,40,3,40,625,8,40,1,40,1,40,5,40,629,8,40,10,40,12,40,
		632,9,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,640,8,41,1,41,1,41,1,41,1,
		41,1,41,3,41,647,8,41,3,41,649,8,41,1,41,1,41,1,42,1,42,3,42,655,8,42,
		1,42,1,42,3,42,659,8,42,1,42,1,42,3,42,663,8,42,1,42,1,42,1,42,3,42,668,
		8,42,1,42,3,42,671,8,42,1,42,3,42,674,8,42,1,42,3,42,677,8,42,3,42,679,
		8,42,1,42,1,42,1,43,1,43,3,43,685,8,43,1,43,1,43,1,44,1,44,1,44,3,44,692,
		8,44,1,44,1,44,3,44,696,8,44,1,44,3,44,699,8,44,1,44,1,44,1,44,3,44,704,
		8,44,1,44,1,44,3,44,708,8,44,1,44,1,44,1,45,1,45,1,45,1,45,3,45,716,8,
		45,1,45,1,45,1,46,3,46,721,8,46,1,46,3,46,724,8,46,1,46,1,46,3,46,728,
		8,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
		1,53,1,53,1,54,1,54,1,54,3,54,748,8,54,1,55,1,55,1,56,1,56,1,57,1,57,1,
		58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,
		65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,3,68,778,8,68,1,69,1,69,1,70,1,70,
		1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,5,76,795,8,76,10,
		76,12,76,798,9,76,1,76,1,76,1,76,3,76,803,8,76,1,76,3,76,806,8,76,1,76,
		3,76,809,8,76,1,77,1,77,3,77,813,8,77,1,78,5,78,816,8,78,10,78,12,78,819,
		9,78,1,78,1,78,5,78,823,8,78,10,78,12,78,826,9,78,1,78,1,78,5,78,830,8,
		78,10,78,12,78,833,9,78,1,78,1,78,1,78,5,78,838,8,78,10,78,12,78,841,9,
		78,3,78,843,8,78,1,79,1,79,1,79,1,79,1,79,1,79,3,79,851,8,79,1,80,3,80,
		854,8,80,1,80,1,80,3,80,858,8,80,1,81,1,81,1,81,5,81,863,8,81,10,81,12,
		81,866,9,81,1,81,1,81,3,81,870,8,81,1,82,1,82,1,82,5,82,875,8,82,10,82,
		12,82,878,9,82,1,82,3,82,881,8,82,1,83,1,83,1,83,3,83,886,8,83,1,83,1,
		83,1,84,1,84,1,84,5,84,893,8,84,10,84,12,84,896,9,84,1,84,3,84,899,8,84,
		1,85,1,85,3,85,903,8,85,1,85,1,85,1,86,1,86,1,86,1,86,1,87,1,87,3,87,913,
		8,87,1,88,1,88,1,88,1,88,5,88,919,8,88,10,88,12,88,922,9,88,1,88,3,88,
		925,8,88,3,88,927,8,88,1,88,1,88,1,89,1,89,3,89,933,8,89,1,90,1,90,1,90,
		1,90,5,90,939,8,90,10,90,12,90,942,9,90,1,90,3,90,945,8,90,1,90,1,90,1,
		91,1,91,1,91,1,91,5,91,953,8,91,10,91,12,91,956,9,91,1,91,3,91,959,8,91,
		1,91,1,91,1,92,1,92,3,92,965,8,92,1,92,1,92,1,92,1,93,1,93,3,93,972,8,
		93,1,93,1,93,1,94,1,94,1,94,1,94,4,94,980,8,94,11,94,12,94,981,1,94,1,
		94,1,94,1,94,3,94,988,8,94,1,94,3,94,991,8,94,1,94,1,94,1,94,1,94,1,94,
		3,94,998,8,94,1,94,3,94,1001,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1008,8,
		94,1,94,3,94,1011,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1018,8,94,1,94,3,
		94,1021,8,94,1,94,3,94,1024,8,94,1,94,1,94,3,94,1028,8,94,1,94,1,94,1,
		94,1,94,1,94,1,94,1,94,1,94,3,94,1038,8,94,1,94,1,94,1,94,1,94,1,94,1,
		94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
		94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
		94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
		94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1100,
		8,94,1,94,1,94,1,94,4,94,1105,8,94,11,94,12,94,1106,1,94,1,94,3,94,1111,
		8,94,5,94,1113,8,94,10,94,12,94,1116,9,94,1,95,1,95,1,95,4,95,1121,8,95,
		11,95,12,95,1122,1,95,1,95,3,95,1127,8,95,1,95,1,95,3,95,1131,8,95,1,96,
		1,96,1,96,3,96,1136,8,96,1,97,1,97,1,97,5,97,1141,8,97,10,97,12,97,1144,
		9,97,1,97,3,97,1147,8,97,1,98,1,98,1,98,5,98,1152,8,98,10,98,12,98,1155,
		9,98,1,98,3,98,1158,8,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,5,
		100,1168,8,100,10,100,12,100,1171,9,100,1,100,1,100,5,100,1175,8,100,10,
		100,12,100,1178,9,100,1,100,1,100,3,100,1182,8,100,1,100,1,100,5,100,1186,
		8,100,10,100,12,100,1189,9,100,1,100,1,100,3,100,1193,8,100,1,100,1,100,
		1,100,3,100,1198,8,100,1,101,1,101,1,101,5,101,1203,8,101,10,101,12,101,
		1206,9,101,1,101,1,101,5,101,1210,8,101,10,101,12,101,1213,9,101,1,101,
		1,101,1,101,3,101,1218,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
		5,102,1227,8,102,10,102,12,102,1230,9,102,1,102,3,102,1233,8,102,1,102,
		1,102,1,102,3,102,1238,8,102,3,102,1240,8,102,1,103,1,103,1,103,1,103,
		1,103,3,103,1247,8,103,1,104,3,104,1250,8,104,1,104,5,104,1253,8,104,10,
		104,12,104,1256,9,104,1,104,1,104,1,104,1,105,1,105,3,105,1263,8,105,1,
		105,3,105,1266,8,105,1,105,1,105,3,105,1270,8,105,1,105,1,105,3,105,1274,
		8,105,1,105,1,105,1,106,1,106,3,106,1280,8,106,1,106,3,106,1283,8,106,
		1,106,1,106,3,106,1287,8,106,1,106,1,106,3,106,1291,8,106,1,106,1,106,
		1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,5,108,1303,8,108,10,108,
		12,108,1306,9,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
		1,108,1,108,1,108,1,108,1,108,5,108,1322,8,108,10,108,12,108,1325,9,108,
		1,108,1,108,3,108,1329,8,108,1,108,1,108,3,108,1333,8,108,1,108,1,108,
		1,108,1,108,3,108,1339,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
		1,108,1,108,1,108,1,108,1,108,3,108,1353,8,108,1,108,1,108,1,108,1,108,
		1,108,1,108,5,108,1361,8,108,10,108,12,108,1364,9,108,1,108,1,108,3,108,
		1368,8,108,1,108,1,108,1,108,1,108,1,108,1,108,4,108,1376,8,108,11,108,
		12,108,1377,1,108,3,108,1381,8,108,1,108,1,108,1,108,1,108,1,108,1,108,
		1,108,1,108,3,108,1391,8,108,1,108,1,108,3,108,1395,8,108,1,108,1,108,
		1,108,1,108,3,108,1401,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
		3,108,1410,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,
		1420,8,108,1,108,1,108,1,108,1,108,1,108,3,108,1427,8,108,3,108,1429,8,
		108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1437,8,108,1,108,4,108,1440,
		8,108,11,108,12,108,1441,1,108,1,108,1,108,1,108,1,108,1,108,4,108,1450,
		8,108,11,108,12,108,1451,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
		1,108,1,108,3,108,1464,8,108,1,108,0,1,188,109,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
		112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
		148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
		184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,0,
		31,1,0,112,114,1,0,117,119,3,0,108,108,128,128,130,131,1,0,158,160,4,0,
		13,14,30,31,34,35,46,47,1,0,13,14,2,0,30,33,42,44,3,0,34,35,49,49,51,51,
		1,0,55,58,1,0,53,54,3,0,15,15,40,40,45,45,2,0,4,5,39,39,1,0,60,74,2,0,
		2,3,162,169,2,0,21,21,52,52,1,0,75,77,1,0,83,85,2,0,86,86,99,102,2,0,82,
		82,95,98,3,0,78,78,80,80,87,90,3,0,79,79,81,81,91,94,1,0,106,109,3,0,6,
		6,10,10,30,31,2,0,20,20,22,22,3,0,34,34,46,46,50,50,1,0,26,27,2,0,22,22,
		41,41,2,0,46,46,50,50,2,0,138,138,140,140,1,0,125,127,1,0,34,35,1625,0,
		219,1,0,0,0,2,233,1,0,0,0,4,237,1,0,0,0,6,252,1,0,0,0,8,256,1,0,0,0,10,
		270,1,0,0,0,12,294,1,0,0,0,14,309,1,0,0,0,16,311,1,0,0,0,18,314,1,0,0,
		0,20,328,1,0,0,0,22,342,1,0,0,0,24,345,1,0,0,0,26,348,1,0,0,0,28,351,1,
		0,0,0,30,354,1,0,0,0,32,366,1,0,0,0,34,378,1,0,0,0,36,381,1,0,0,0,38,393,
		1,0,0,0,40,405,1,0,0,0,42,417,1,0,0,0,44,419,1,0,0,0,46,421,1,0,0,0,48,
		423,1,0,0,0,50,425,1,0,0,0,52,441,1,0,0,0,54,457,1,0,0,0,56,473,1,0,0,
		0,58,489,1,0,0,0,60,505,1,0,0,0,62,521,1,0,0,0,64,537,1,0,0,0,66,553,1,
		0,0,0,68,555,1,0,0,0,70,575,1,0,0,0,72,577,1,0,0,0,74,584,1,0,0,0,76,588,
		1,0,0,0,78,605,1,0,0,0,80,614,1,0,0,0,82,648,1,0,0,0,84,678,1,0,0,0,86,
		684,1,0,0,0,88,703,1,0,0,0,90,711,1,0,0,0,92,720,1,0,0,0,94,729,1,0,0,
		0,96,731,1,0,0,0,98,733,1,0,0,0,100,735,1,0,0,0,102,737,1,0,0,0,104,740,
		1,0,0,0,106,742,1,0,0,0,108,747,1,0,0,0,110,749,1,0,0,0,112,751,1,0,0,
		0,114,753,1,0,0,0,116,755,1,0,0,0,118,757,1,0,0,0,120,759,1,0,0,0,122,
		761,1,0,0,0,124,763,1,0,0,0,126,765,1,0,0,0,128,767,1,0,0,0,130,769,1,
		0,0,0,132,771,1,0,0,0,134,773,1,0,0,0,136,777,1,0,0,0,138,779,1,0,0,0,
		140,781,1,0,0,0,142,783,1,0,0,0,144,785,1,0,0,0,146,787,1,0,0,0,148,789,
		1,0,0,0,150,791,1,0,0,0,152,796,1,0,0,0,154,810,1,0,0,0,156,817,1,0,0,
		0,158,850,1,0,0,0,160,853,1,0,0,0,162,859,1,0,0,0,164,871,1,0,0,0,166,
		885,1,0,0,0,168,889,1,0,0,0,170,900,1,0,0,0,172,906,1,0,0,0,174,910,1,
		0,0,0,176,914,1,0,0,0,178,932,1,0,0,0,180,934,1,0,0,0,182,948,1,0,0,0,
		184,964,1,0,0,0,186,969,1,0,0,0,188,1037,1,0,0,0,190,1117,1,0,0,0,192,
		1132,1,0,0,0,194,1137,1,0,0,0,196,1148,1,0,0,0,198,1159,1,0,0,0,200,1163,
		1,0,0,0,202,1199,1,0,0,0,204,1219,1,0,0,0,206,1246,1,0,0,0,208,1249,1,
		0,0,0,210,1260,1,0,0,0,212,1277,1,0,0,0,214,1294,1,0,0,0,216,1463,1,0,
		0,0,218,220,3,2,1,0,219,218,1,0,0,0,219,220,1,0,0,0,220,224,1,0,0,0,221,
		223,3,4,2,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,
		0,0,0,225,230,1,0,0,0,226,224,1,0,0,0,227,229,3,50,25,0,228,227,1,0,0,
		0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,1,1,0,0,0,232,230,
		1,0,0,0,233,234,5,104,0,0,234,235,3,134,67,0,235,236,5,36,0,0,236,3,1,
		0,0,0,237,238,5,105,0,0,238,243,3,134,67,0,239,240,5,38,0,0,240,242,3,
		134,67,0,241,239,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,
		0,244,247,1,0,0,0,245,243,1,0,0,0,246,248,5,38,0,0,247,246,1,0,0,0,247,
		248,1,0,0,0,248,249,1,0,0,0,249,250,5,36,0,0,250,5,1,0,0,0,251,253,3,8,
		4,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,3,216,108,
		0,255,7,1,0,0,0,256,257,5,22,0,0,257,262,3,10,5,0,258,259,5,38,0,0,259,
		261,3,10,5,0,260,258,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,
		0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,265,267,5,38,0,0,266,265,1,0,0,0,
		266,267,1,0,0,0,267,268,1,0,0,0,268,269,5,23,0,0,269,9,1,0,0,0,270,287,
		3,12,6,0,271,272,5,59,0,0,272,288,3,136,68,0,273,274,5,27,0,0,274,279,
		3,136,68,0,275,276,5,38,0,0,276,278,3,136,68,0,277,275,1,0,0,0,278,281,
		1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,
		0,282,284,5,38,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,
		286,5,28,0,0,286,288,1,0,0,0,287,271,1,0,0,0,287,273,1,0,0,0,287,288,1,
		0,0,0,288,11,1,0,0,0,289,295,3,134,67,0,290,295,5,108,0,0,291,295,5,144,
		0,0,292,295,5,152,0,0,293,295,5,140,0,0,294,289,1,0,0,0,294,290,1,0,0,
		0,294,291,1,0,0,0,294,292,1,0,0,0,294,293,1,0,0,0,295,13,1,0,0,0,296,310,
		3,16,8,0,297,310,3,18,9,0,298,310,3,20,10,0,299,310,3,22,11,0,300,310,
		3,24,12,0,301,310,3,26,13,0,302,310,3,28,14,0,303,310,3,30,15,0,304,310,
		3,32,16,0,305,310,3,34,17,0,306,310,3,36,18,0,307,310,3,38,19,0,308,310,
		3,40,20,0,309,296,1,0,0,0,309,297,1,0,0,0,309,298,1,0,0,0,309,299,1,0,
		0,0,309,300,1,0,0,0,309,301,1,0,0,0,309,302,1,0,0,0,309,303,1,0,0,0,309,
		304,1,0,0,0,309,305,1,0,0,0,309,306,1,0,0,0,309,307,1,0,0,0,309,308,1,
		0,0,0,310,15,1,0,0,0,311,312,5,103,0,0,312,313,3,68,34,0,313,17,1,0,0,
		0,314,326,5,110,0,0,315,316,3,70,35,0,316,317,5,36,0,0,317,327,1,0,0,0,
		318,322,5,24,0,0,319,321,3,54,27,0,320,319,1,0,0,0,321,324,1,0,0,0,322,
		320,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,327,5,
		25,0,0,326,315,1,0,0,0,326,318,1,0,0,0,327,19,1,0,0,0,328,340,5,111,0,
		0,329,330,3,72,36,0,330,331,5,36,0,0,331,341,1,0,0,0,332,336,5,24,0,0,
		333,335,3,56,28,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,
		337,1,0,0,0,337,339,1,0,0,0,338,336,1,0,0,0,339,341,5,25,0,0,340,329,1,
		0,0,0,340,332,1,0,0,0,341,21,1,0,0,0,342,343,5,121,0,0,343,344,3,74,37,
		0,344,23,1,0,0,0,345,346,5,122,0,0,346,347,3,76,38,0,347,25,1,0,0,0,348,
		349,5,120,0,0,349,350,3,78,39,0,350,27,1,0,0,0,351,352,3,42,21,0,352,353,
		3,80,40,0,353,29,1,0,0,0,354,364,5,157,0,0,355,365,3,82,41,0,356,360,5,
		24,0,0,357,359,3,58,29,0,358,357,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,
		0,360,361,1,0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,365,5,25,0,0,364,
		355,1,0,0,0,364,356,1,0,0,0,365,31,1,0,0,0,366,376,5,115,0,0,367,377,3,
		84,42,0,368,372,5,24,0,0,369,371,3,60,30,0,370,369,1,0,0,0,371,374,1,0,
		0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,
		377,5,25,0,0,376,367,1,0,0,0,376,368,1,0,0,0,377,33,1,0,0,0,378,379,5,
		116,0,0,379,380,3,86,43,0,380,35,1,0,0,0,381,391,5,129,0,0,382,392,3,88,
		44,0,383,387,5,24,0,0,384,386,3,62,31,0,385,384,1,0,0,0,386,389,1,0,0,
		0,387,385,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,
		392,5,25,0,0,391,382,1,0,0,0,391,383,1,0,0,0,392,37,1,0,0,0,393,403,3,
		44,22,0,394,404,3,90,45,0,395,399,5,24,0,0,396,398,3,64,32,0,397,396,1,
		0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,
		401,399,1,0,0,0,402,404,5,25,0,0,403,394,1,0,0,0,403,395,1,0,0,0,404,39,
		1,0,0,0,405,415,3,46,23,0,406,416,3,94,47,0,407,411,5,24,0,0,408,410,3,
		66,33,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,
		0,412,414,1,0,0,0,413,411,1,0,0,0,414,416,5,25,0,0,415,406,1,0,0,0,415,
		407,1,0,0,0,416,41,1,0,0,0,417,418,7,0,0,0,418,43,1,0,0,0,419,420,7,1,
		0,0,420,45,1,0,0,0,421,422,7,2,0,0,422,47,1,0,0,0,423,424,7,3,0,0,424,
		49,1,0,0,0,425,426,3,52,26,0,426,51,1,0,0,0,427,442,3,14,7,0,428,439,3,
		8,4,0,429,440,3,14,7,0,430,434,5,24,0,0,431,433,3,52,26,0,432,431,1,0,
		0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,0,436,
		434,1,0,0,0,437,440,5,25,0,0,438,440,5,37,0,0,439,429,1,0,0,0,439,430,
		1,0,0,0,439,438,1,0,0,0,440,442,1,0,0,0,441,427,1,0,0,0,441,428,1,0,0,
		0,442,53,1,0,0,0,443,458,3,70,35,0,444,455,3,8,4,0,445,456,3,70,35,0,446,
		450,5,24,0,0,447,449,3,54,27,0,448,447,1,0,0,0,449,452,1,0,0,0,450,448,
		1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,456,5,25,0,
		0,454,456,5,37,0,0,455,445,1,0,0,0,455,446,1,0,0,0,455,454,1,0,0,0,456,
		458,1,0,0,0,457,443,1,0,0,0,457,444,1,0,0,0,458,55,1,0,0,0,459,474,3,72,
		36,0,460,471,3,8,4,0,461,472,3,72,36,0,462,466,5,24,0,0,463,465,3,56,28,
		0,464,463,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,
		469,1,0,0,0,468,466,1,0,0,0,469,472,5,25,0,0,470,472,5,37,0,0,471,461,
		1,0,0,0,471,462,1,0,0,0,471,470,1,0,0,0,472,474,1,0,0,0,473,459,1,0,0,
		0,473,460,1,0,0,0,474,57,1,0,0,0,475,490,3,82,41,0,476,487,3,8,4,0,477,
		488,3,82,41,0,478,482,5,24,0,0,479,481,3,58,29,0,480,479,1,0,0,0,481,484,
		1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,
		0,485,488,5,25,0,0,486,488,5,37,0,0,487,477,1,0,0,0,487,478,1,0,0,0,487,
		486,1,0,0,0,488,490,1,0,0,0,489,475,1,0,0,0,489,476,1,0,0,0,490,59,1,0,
		0,0,491,506,3,84,42,0,492,503,3,8,4,0,493,504,3,84,42,0,494,498,5,24,0,
		0,495,497,3,60,30,0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,
		499,1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,504,5,25,0,0,502,504,5,
		37,0,0,503,493,1,0,0,0,503,494,1,0,0,0,503,502,1,0,0,0,504,506,1,0,0,0,
		505,491,1,0,0,0,505,492,1,0,0,0,506,61,1,0,0,0,507,522,3,88,44,0,508,519,
		3,8,4,0,509,520,3,88,44,0,510,514,5,24,0,0,511,513,3,62,31,0,512,511,1,
		0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,
		516,514,1,0,0,0,517,520,5,25,0,0,518,520,5,37,0,0,519,509,1,0,0,0,519,
		510,1,0,0,0,519,518,1,0,0,0,520,522,1,0,0,0,521,507,1,0,0,0,521,508,1,
		0,0,0,522,63,1,0,0,0,523,538,3,90,45,0,524,535,3,8,4,0,525,536,3,90,45,
		0,526,530,5,24,0,0,527,529,3,64,32,0,528,527,1,0,0,0,529,532,1,0,0,0,530,
		528,1,0,0,0,530,531,1,0,0,0,531,533,1,0,0,0,532,530,1,0,0,0,533,536,5,
		25,0,0,534,536,5,37,0,0,535,525,1,0,0,0,535,526,1,0,0,0,535,534,1,0,0,
		0,536,538,1,0,0,0,537,523,1,0,0,0,537,524,1,0,0,0,538,65,1,0,0,0,539,554,
		3,94,47,0,540,551,3,8,4,0,541,552,3,94,47,0,542,546,5,24,0,0,543,545,3,
		66,33,0,544,543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,
		0,547,549,1,0,0,0,548,546,1,0,0,0,549,552,5,25,0,0,550,552,5,37,0,0,551,
		541,1,0,0,0,551,542,1,0,0,0,551,550,1,0,0,0,552,554,1,0,0,0,553,539,1,
		0,0,0,553,540,1,0,0,0,554,67,1,0,0,0,555,560,3,134,67,0,556,557,5,19,0,
		0,557,559,3,134,67,0,558,556,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,
		561,1,0,0,0,561,573,1,0,0,0,562,560,1,0,0,0,563,574,5,36,0,0,564,574,5,
		37,0,0,565,569,5,24,0,0,566,568,3,50,25,0,567,566,1,0,0,0,568,571,1,0,
		0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,569,1,0,0,0,572,
		574,5,25,0,0,573,563,1,0,0,0,573,564,1,0,0,0,573,565,1,0,0,0,574,69,1,
		0,0,0,575,576,3,164,82,0,576,71,1,0,0,0,577,579,3,134,67,0,578,580,3,182,
		91,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,582,5,59,0,0,
		582,583,3,156,78,0,583,73,1,0,0,0,584,586,3,134,67,0,585,587,3,182,91,
		0,586,585,1,0,0,0,586,587,1,0,0,0,587,75,1,0,0,0,588,590,3,134,67,0,589,
		591,3,182,91,0,590,589,1,0,0,0,590,591,1,0,0,0,591,594,1,0,0,0,592,593,
		5,37,0,0,593,595,3,164,82,0,594,592,1,0,0,0,594,595,1,0,0,0,595,596,1,
		0,0,0,596,600,5,24,0,0,597,599,3,50,25,0,598,597,1,0,0,0,599,602,1,0,0,
		0,600,598,1,0,0,0,600,601,1,0,0,0,601,603,1,0,0,0,602,600,1,0,0,0,603,
		604,5,25,0,0,604,77,1,0,0,0,605,608,3,134,67,0,606,607,5,37,0,0,607,609,
		3,158,79,0,608,606,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,5,24,
		0,0,611,612,3,196,98,0,612,613,5,25,0,0,613,79,1,0,0,0,614,616,3,134,67,
		0,615,617,3,182,91,0,616,615,1,0,0,0,616,617,1,0,0,0,617,620,1,0,0,0,618,
		619,5,37,0,0,619,621,3,164,82,0,620,618,1,0,0,0,620,621,1,0,0,0,621,624,
		1,0,0,0,622,623,5,123,0,0,623,625,3,164,82,0,624,622,1,0,0,0,624,625,1,
		0,0,0,625,626,1,0,0,0,626,630,5,24,0,0,627,629,3,50,25,0,628,627,1,0,0,
		0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,
		630,1,0,0,0,633,634,5,25,0,0,634,81,1,0,0,0,635,636,5,15,0,0,636,649,3,
		156,78,0,637,639,3,156,78,0,638,640,3,134,67,0,639,638,1,0,0,0,639,640,
		1,0,0,0,640,641,1,0,0,0,641,642,5,15,0,0,642,649,1,0,0,0,643,644,5,16,
		0,0,644,646,3,156,78,0,645,647,3,134,67,0,646,645,1,0,0,0,646,647,1,0,
		0,0,647,649,1,0,0,0,648,635,1,0,0,0,648,637,1,0,0,0,648,643,1,0,0,0,649,
		650,1,0,0,0,650,651,3,206,103,0,651,83,1,0,0,0,652,654,3,48,24,0,653,655,
		3,134,67,0,654,653,1,0,0,0,654,655,1,0,0,0,655,679,1,0,0,0,656,658,5,157,
		0,0,657,659,5,16,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,
		662,3,156,78,0,661,663,3,134,67,0,662,661,1,0,0,0,662,663,1,0,0,0,663,
		679,1,0,0,0,664,665,5,157,0,0,665,667,3,156,78,0,666,668,3,134,67,0,667,
		666,1,0,0,0,667,668,1,0,0,0,668,670,1,0,0,0,669,671,5,15,0,0,670,669,1,
		0,0,0,670,671,1,0,0,0,671,679,1,0,0,0,672,674,3,176,88,0,673,672,1,0,0,
		0,673,674,1,0,0,0,674,676,1,0,0,0,675,677,3,204,102,0,676,675,1,0,0,0,
		676,677,1,0,0,0,677,679,1,0,0,0,678,652,1,0,0,0,678,656,1,0,0,0,678,664,
		1,0,0,0,678,673,1,0,0,0,679,680,1,0,0,0,680,681,3,206,103,0,681,85,1,0,
		0,0,682,683,5,27,0,0,683,685,5,28,0,0,684,682,1,0,0,0,684,685,1,0,0,0,
		685,686,1,0,0,0,686,687,3,206,103,0,687,87,1,0,0,0,688,689,3,48,24,0,689,
		691,5,59,0,0,690,692,3,134,67,0,691,690,1,0,0,0,691,692,1,0,0,0,692,704,
		1,0,0,0,693,695,5,157,0,0,694,696,3,182,91,0,695,694,1,0,0,0,695,696,1,
		0,0,0,696,698,1,0,0,0,697,699,5,15,0,0,698,697,1,0,0,0,698,699,1,0,0,0,
		699,700,1,0,0,0,700,704,3,156,78,0,701,702,5,2,0,0,702,704,3,92,46,0,703,
		688,1,0,0,0,703,693,1,0,0,0,703,701,1,0,0,0,704,707,1,0,0,0,705,706,5,
		123,0,0,706,708,3,164,82,0,707,705,1,0,0,0,707,708,1,0,0,0,708,709,1,0,
		0,0,709,710,3,206,103,0,710,89,1,0,0,0,711,712,3,134,67,0,712,715,3,92,
		46,0,713,714,5,123,0,0,714,716,3,164,82,0,715,713,1,0,0,0,715,716,1,0,
		0,0,716,717,1,0,0,0,717,718,3,206,103,0,718,91,1,0,0,0,719,721,3,182,91,
		0,720,719,1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,724,3,176,88,0,723,
		722,1,0,0,0,723,724,1,0,0,0,724,727,1,0,0,0,725,726,5,15,0,0,726,728,3,
		156,78,0,727,725,1,0,0,0,727,728,1,0,0,0,728,93,1,0,0,0,729,730,3,198,
		99,0,730,95,1,0,0,0,731,732,5,1,0,0,732,97,1,0,0,0,733,734,7,4,0,0,734,
		99,1,0,0,0,735,736,7,5,0,0,736,101,1,0,0,0,737,738,5,31,0,0,738,739,5,
		31,0,0,739,103,1,0,0,0,740,741,7,6,0,0,741,105,1,0,0,0,742,743,7,7,0,0,
		743,107,1,0,0,0,744,748,5,18,0,0,745,746,5,58,0,0,746,748,5,58,0,0,747,
		744,1,0,0,0,747,745,1,0,0,0,748,109,1,0,0,0,749,750,5,7,0,0,750,111,1,
		0,0,0,751,752,7,8,0,0,752,113,1,0,0,0,753,754,7,9,0,0,754,115,1,0,0,0,
		755,756,5,10,0,0,756,117,1,0,0,0,757,758,5,48,0,0,758,119,1,0,0,0,759,
		760,5,12,0,0,760,121,1,0,0,0,761,762,7,10,0,0,762,123,1,0,0,0,763,764,
		7,11,0,0,764,125,1,0,0,0,765,766,5,59,0,0,766,127,1,0,0,0,767,768,7,12,
		0,0,768,129,1,0,0,0,769,770,7,13,0,0,770,131,1,0,0,0,771,772,7,14,0,0,
		772,133,1,0,0,0,773,774,5,161,0,0,774,135,1,0,0,0,775,778,3,134,67,0,776,
		778,3,130,65,0,777,775,1,0,0,0,777,776,1,0,0,0,778,137,1,0,0,0,779,780,
		7,15,0,0,780,139,1,0,0,0,781,782,7,16,0,0,782,141,1,0,0,0,783,784,7,17,
		0,0,784,143,1,0,0,0,785,786,7,18,0,0,786,145,1,0,0,0,787,788,7,19,0,0,
		788,147,1,0,0,0,789,790,7,20,0,0,790,149,1,0,0,0,791,792,7,21,0,0,792,
		151,1,0,0,0,793,795,3,150,75,0,794,793,1,0,0,0,795,798,1,0,0,0,796,794,
		1,0,0,0,796,797,1,0,0,0,797,805,1,0,0,0,798,796,1,0,0,0,799,806,7,22,0,
		0,800,802,7,23,0,0,801,803,3,188,94,0,802,801,1,0,0,0,802,803,1,0,0,0,
		803,804,1,0,0,0,804,806,5,23,0,0,805,799,1,0,0,0,805,800,1,0,0,0,806,808,
		1,0,0,0,807,809,7,24,0,0,808,807,1,0,0,0,808,809,1,0,0,0,809,153,1,0,0,
		0,810,812,3,134,67,0,811,813,3,180,90,0,812,811,1,0,0,0,812,813,1,0,0,
		0,813,155,1,0,0,0,814,816,3,150,75,0,815,814,1,0,0,0,816,819,1,0,0,0,817,
		815,1,0,0,0,817,818,1,0,0,0,818,842,1,0,0,0,819,817,1,0,0,0,820,824,3,
		158,79,0,821,823,3,152,76,0,822,821,1,0,0,0,823,826,1,0,0,0,824,822,1,
		0,0,0,824,825,1,0,0,0,825,843,1,0,0,0,826,824,1,0,0,0,827,831,5,117,0,
		0,828,830,3,152,76,0,829,828,1,0,0,0,830,833,1,0,0,0,831,829,1,0,0,0,831,
		832,1,0,0,0,832,834,1,0,0,0,833,831,1,0,0,0,834,843,3,160,80,0,835,839,
		3,162,81,0,836,838,3,152,76,0,837,836,1,0,0,0,838,841,1,0,0,0,839,837,
		1,0,0,0,839,840,1,0,0,0,840,843,1,0,0,0,841,839,1,0,0,0,842,820,1,0,0,
		0,842,827,1,0,0,0,842,835,1,0,0,0,843,157,1,0,0,0,844,851,3,138,69,0,845,
		851,3,140,70,0,846,851,3,142,71,0,847,851,3,144,72,0,848,851,3,146,73,
		0,849,851,3,148,74,0,850,844,1,0,0,0,850,845,1,0,0,0,850,846,1,0,0,0,850,
		847,1,0,0,0,850,848,1,0,0,0,850,849,1,0,0,0,851,159,1,0,0,0,852,854,3,
		176,88,0,853,852,1,0,0,0,853,854,1,0,0,0,854,857,1,0,0,0,855,856,5,15,
		0,0,856,858,3,156,78,0,857,855,1,0,0,0,857,858,1,0,0,0,858,161,1,0,0,0,
		859,864,3,154,77,0,860,861,5,19,0,0,861,863,3,154,77,0,862,860,1,0,0,0,
		863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,869,1,0,0,0,866,864,
		1,0,0,0,867,868,5,19,0,0,868,870,5,115,0,0,869,867,1,0,0,0,869,870,1,0,
		0,0,870,163,1,0,0,0,871,876,3,162,81,0,872,873,5,38,0,0,873,875,3,162,
		81,0,874,872,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,
		880,1,0,0,0,878,876,1,0,0,0,879,881,5,38,0,0,880,879,1,0,0,0,880,881,1,
		0,0,0,881,165,1,0,0,0,882,883,3,134,67,0,883,884,5,37,0,0,884,886,1,0,
		0,0,885,882,1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,0,887,888,3,188,94,0,
		888,167,1,0,0,0,889,894,3,166,83,0,890,891,5,38,0,0,891,893,3,166,83,0,
		892,890,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,898,
		1,0,0,0,896,894,1,0,0,0,897,899,5,38,0,0,898,897,1,0,0,0,898,899,1,0,0,
		0,899,169,1,0,0,0,900,902,7,25,0,0,901,903,3,168,84,0,902,901,1,0,0,0,
		902,903,1,0,0,0,903,904,1,0,0,0,904,905,5,28,0,0,905,171,1,0,0,0,906,907,
		7,26,0,0,907,908,3,168,84,0,908,909,5,23,0,0,909,173,1,0,0,0,910,912,3,
		156,78,0,911,913,3,134,67,0,912,911,1,0,0,0,912,913,1,0,0,0,913,175,1,
		0,0,0,914,926,5,27,0,0,915,920,3,174,87,0,916,917,5,38,0,0,917,919,3,174,
		87,0,918,916,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,
		924,1,0,0,0,922,920,1,0,0,0,923,925,5,38,0,0,924,923,1,0,0,0,924,925,1,
		0,0,0,925,927,1,0,0,0,926,915,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,
		928,929,5,28,0,0,929,177,1,0,0,0,930,933,3,130,65,0,931,933,3,156,78,0,
		932,930,1,0,0,0,932,931,1,0,0,0,933,179,1,0,0,0,934,935,5,57,0,0,935,940,
		3,178,89,0,936,937,5,38,0,0,937,939,3,178,89,0,938,936,1,0,0,0,939,942,
		1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,944,1,0,0,0,942,940,1,0,0,
		0,943,945,5,38,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,
		947,5,58,0,0,947,181,1,0,0,0,948,949,5,57,0,0,949,954,3,134,67,0,950,951,
		5,38,0,0,951,953,3,134,67,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,
		0,0,0,954,955,1,0,0,0,955,958,1,0,0,0,956,954,1,0,0,0,957,959,5,38,0,0,
		958,957,1,0,0,0,958,959,1,0,0,0,959,960,1,0,0,0,960,961,5,58,0,0,961,183,
		1,0,0,0,962,965,3,112,56,0,963,965,3,114,57,0,964,962,1,0,0,0,964,963,
		1,0,0,0,965,966,1,0,0,0,966,967,5,37,0,0,967,968,3,188,94,0,968,185,1,
		0,0,0,969,971,5,22,0,0,970,972,3,168,84,0,971,970,1,0,0,0,971,972,1,0,
		0,0,972,973,1,0,0,0,973,974,5,23,0,0,974,187,1,0,0,0,975,979,6,94,-1,0,
		976,977,3,154,77,0,977,978,5,19,0,0,978,980,1,0,0,0,979,976,1,0,0,0,980,
		981,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,3,
		154,77,0,984,1038,1,0,0,0,985,987,5,150,0,0,986,988,3,156,78,0,987,986,
		1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,991,3,170,85,0,990,989,1,0,
		0,0,990,991,1,0,0,0,991,1038,1,0,0,0,992,1000,5,27,0,0,993,1001,5,160,
		0,0,994,1001,5,159,0,0,995,1001,5,158,0,0,996,998,7,27,0,0,997,996,1,0,
		0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1001,3,156,78,0,1000,993,1,0,0,
		0,1000,994,1,0,0,0,1000,995,1,0,0,0,1000,997,1,0,0,0,1001,1002,1,0,0,0,
		1002,1011,5,28,0,0,1003,1011,5,149,0,0,1004,1007,5,151,0,0,1005,1006,5,
		22,0,0,1006,1008,5,23,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1011,
		1,0,0,0,1009,1011,3,98,49,0,1010,992,1,0,0,0,1010,1003,1,0,0,0,1010,1004,
		1,0,0,0,1010,1009,1,0,0,0,1011,1012,1,0,0,0,1012,1038,3,188,94,21,1013,
		1014,5,152,0,0,1014,1038,3,188,94,6,1015,1017,5,117,0,0,1016,1018,3,186,
		93,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1020,1,0,0,0,1019,1021,3,
		182,91,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1023,1,0,0,0,1022,1024,
		3,176,88,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1027,1,0,0,0,1025,
		1026,5,15,0,0,1026,1028,3,156,78,0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,
		1028,1029,1,0,0,0,1029,1038,3,206,103,0,1030,1031,5,27,0,0,1031,1032,3,
		188,94,0,1032,1033,5,28,0,0,1033,1038,1,0,0,0,1034,1038,3,132,66,0,1035,
		1038,3,130,65,0,1036,1038,3,154,77,0,1037,975,1,0,0,0,1037,985,1,0,0,0,
		1037,1010,1,0,0,0,1037,1013,1,0,0,0,1037,1015,1,0,0,0,1037,1030,1,0,0,
		0,1037,1034,1,0,0,0,1037,1035,1,0,0,0,1037,1036,1,0,0,0,1038,1114,1,0,
		0,0,1039,1040,10,20,0,0,1040,1041,3,124,62,0,1041,1042,3,188,94,21,1042,
		1113,1,0,0,0,1043,1044,10,19,0,0,1044,1045,3,102,51,0,1045,1046,3,188,
		94,19,1046,1113,1,0,0,0,1047,1048,10,18,0,0,1048,1049,3,104,52,0,1049,
		1050,3,188,94,19,1050,1113,1,0,0,0,1051,1052,10,17,0,0,1052,1053,3,106,
		53,0,1053,1054,3,188,94,18,1054,1113,1,0,0,0,1055,1056,10,16,0,0,1056,
		1057,3,108,54,0,1057,1058,3,188,94,17,1058,1113,1,0,0,0,1059,1060,10,15,
		0,0,1060,1061,3,110,55,0,1061,1062,3,188,94,16,1062,1113,1,0,0,0,1063,
		1064,10,14,0,0,1064,1065,3,112,56,0,1065,1066,3,188,94,15,1066,1113,1,
		0,0,0,1067,1068,10,13,0,0,1068,1069,3,114,57,0,1069,1070,3,188,94,14,1070,
		1113,1,0,0,0,1071,1072,10,12,0,0,1072,1073,3,116,58,0,1073,1074,3,188,
		94,13,1074,1113,1,0,0,0,1075,1076,10,11,0,0,1076,1077,3,118,59,0,1077,
		1078,3,188,94,12,1078,1113,1,0,0,0,1079,1080,10,10,0,0,1080,1081,5,8,0,
		0,1081,1113,3,188,94,11,1082,1083,10,9,0,0,1083,1084,3,120,60,0,1084,1085,
		3,188,94,10,1085,1113,1,0,0,0,1086,1087,10,8,0,0,1087,1088,5,50,0,0,1088,
		1089,3,188,94,0,1089,1090,5,37,0,0,1090,1091,3,188,94,8,1091,1113,1,0,
		0,0,1092,1099,10,23,0,0,1093,1100,3,100,50,0,1094,1100,3,170,85,0,1095,
		1100,3,172,86,0,1096,1097,3,122,61,0,1097,1098,3,154,77,0,1098,1100,1,
		0,0,0,1099,1093,1,0,0,0,1099,1094,1,0,0,0,1099,1095,1,0,0,0,1099,1096,
		1,0,0,0,1100,1113,1,0,0,0,1101,1102,10,7,0,0,1102,1104,5,11,0,0,1103,1105,
		3,184,92,0,1104,1103,1,0,0,0,1105,1106,1,0,0,0,1106,1104,1,0,0,0,1106,
		1107,1,0,0,0,1107,1110,1,0,0,0,1108,1109,5,37,0,0,1109,1111,3,188,94,0,
		1110,1108,1,0,0,0,1110,1111,1,0,0,0,1111,1113,1,0,0,0,1112,1039,1,0,0,
		0,1112,1043,1,0,0,0,1112,1047,1,0,0,0,1112,1051,1,0,0,0,1112,1055,1,0,
		0,0,1112,1059,1,0,0,0,1112,1063,1,0,0,0,1112,1067,1,0,0,0,1112,1071,1,
		0,0,0,1112,1075,1,0,0,0,1112,1079,1,0,0,0,1112,1082,1,0,0,0,1112,1086,
		1,0,0,0,1112,1092,1,0,0,0,1112,1101,1,0,0,0,1113,1116,1,0,0,0,1114,1112,
		1,0,0,0,1114,1115,1,0,0,0,1115,189,1,0,0,0,1116,1114,1,0,0,0,1117,1126,
		3,134,67,0,1118,1120,5,24,0,0,1119,1121,3,208,104,0,1120,1119,1,0,0,0,
		1121,1122,1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,
		0,1124,1125,5,25,0,0,1125,1127,1,0,0,0,1126,1118,1,0,0,0,1126,1127,1,0,
		0,0,1127,1130,1,0,0,0,1128,1129,5,59,0,0,1129,1131,3,188,94,0,1130,1128,
		1,0,0,0,1130,1131,1,0,0,0,1131,191,1,0,0,0,1132,1135,3,134,67,0,1133,1134,
		5,59,0,0,1134,1136,3,188,94,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,
		193,1,0,0,0,1137,1142,3,190,95,0,1138,1139,5,38,0,0,1139,1141,3,190,95,
		0,1140,1138,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,0,1142,1143,1,0,
		0,0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1145,1147,5,38,0,0,1146,1145,1,
		0,0,0,1146,1147,1,0,0,0,1147,195,1,0,0,0,1148,1153,3,192,96,0,1149,1150,
		5,38,0,0,1150,1152,3,192,96,0,1151,1149,1,0,0,0,1152,1155,1,0,0,0,1153,
		1151,1,0,0,0,1153,1154,1,0,0,0,1154,1157,1,0,0,0,1155,1153,1,0,0,0,1156,
		1158,5,38,0,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,197,1,0,0,0,1159,
		1160,3,156,78,0,1160,1161,3,194,97,0,1161,1162,5,36,0,0,1162,199,1,0,0,
		0,1163,1164,5,141,0,0,1164,1169,3,188,94,0,1165,1166,5,38,0,0,1166,1168,
		3,188,94,0,1167,1165,1,0,0,0,1168,1171,1,0,0,0,1169,1167,1,0,0,0,1169,
		1170,1,0,0,0,1170,1197,1,0,0,0,1171,1169,1,0,0,0,1172,1176,5,37,0,0,1173,
		1175,3,6,3,0,1174,1173,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,
		1177,1,0,0,0,1177,1181,1,0,0,0,1178,1176,1,0,0,0,1179,1180,5,144,0,0,1180,
		1182,5,36,0,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,1198,1,0,0,0,1183,
		1187,5,24,0,0,1184,1186,3,6,3,0,1185,1184,1,0,0,0,1186,1189,1,0,0,0,1187,
		1185,1,0,0,0,1187,1188,1,0,0,0,1188,1192,1,0,0,0,1189,1187,1,0,0,0,1190,
		1191,5,144,0,0,1191,1193,5,36,0,0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,
		1193,1194,1,0,0,0,1194,1198,5,25,0,0,1195,1196,5,17,0,0,1196,1198,3,6,
		3,0,1197,1172,1,0,0,0,1197,1183,1,0,0,0,1197,1195,1,0,0,0,1198,201,1,0,
		0,0,1199,1217,7,28,0,0,1200,1204,5,37,0,0,1201,1203,3,6,3,0,1202,1201,
		1,0,0,0,1203,1206,1,0,0,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,1218,
		1,0,0,0,1206,1204,1,0,0,0,1207,1211,5,24,0,0,1208,1210,3,6,3,0,1209,1208,
		1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1214,
		1,0,0,0,1213,1211,1,0,0,0,1214,1218,5,25,0,0,1215,1216,5,17,0,0,1216,1218,
		3,6,3,0,1217,1200,1,0,0,0,1217,1207,1,0,0,0,1217,1215,1,0,0,0,1218,203,
		1,0,0,0,1219,1239,5,37,0,0,1220,1221,3,134,67,0,1221,1228,3,170,85,0,1222,
		1223,5,38,0,0,1223,1224,3,134,67,0,1224,1225,3,170,85,0,1225,1227,1,0,
		0,0,1226,1222,1,0,0,0,1227,1230,1,0,0,0,1228,1226,1,0,0,0,1228,1229,1,
		0,0,0,1229,1232,1,0,0,0,1230,1228,1,0,0,0,1231,1233,5,38,0,0,1232,1231,
		1,0,0,0,1232,1233,1,0,0,0,1233,1240,1,0,0,0,1234,1235,5,115,0,0,1235,1237,
		3,170,85,0,1236,1238,5,38,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,
		1240,1,0,0,0,1239,1220,1,0,0,0,1239,1234,1,0,0,0,1240,205,1,0,0,0,1241,
		1242,5,17,0,0,1242,1243,3,188,94,0,1243,1244,5,36,0,0,1244,1247,1,0,0,
		0,1245,1247,3,6,3,0,1246,1241,1,0,0,0,1246,1245,1,0,0,0,1247,207,1,0,0,
		0,1248,1250,3,8,4,0,1249,1248,1,0,0,0,1249,1250,1,0,0,0,1250,1254,1,0,
		0,0,1251,1253,3,150,75,0,1252,1251,1,0,0,0,1253,1256,1,0,0,0,1254,1252,
		1,0,0,0,1254,1255,1,0,0,0,1255,1257,1,0,0,0,1256,1254,1,0,0,0,1257,1258,
		7,29,0,0,1258,1259,3,206,103,0,1259,209,1,0,0,0,1260,1262,3,134,67,0,1261,
		1263,3,182,91,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1265,1,0,0,0,
		1264,1266,3,176,88,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,1269,1,0,
		0,0,1267,1268,5,15,0,0,1268,1270,3,156,78,0,1269,1267,1,0,0,0,1269,1270,
		1,0,0,0,1270,1273,1,0,0,0,1271,1272,5,123,0,0,1272,1274,3,164,82,0,1273,
		1271,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1276,3,206,103,0,
		1276,211,1,0,0,0,1277,1279,5,2,0,0,1278,1280,3,182,91,0,1279,1278,1,0,
		0,0,1279,1280,1,0,0,0,1280,1282,1,0,0,0,1281,1283,3,176,88,0,1282,1281,
		1,0,0,0,1282,1283,1,0,0,0,1283,1286,1,0,0,0,1284,1285,5,15,0,0,1285,1287,
		3,156,78,0,1286,1284,1,0,0,0,1286,1287,1,0,0,0,1287,1290,1,0,0,0,1288,
		1289,5,123,0,0,1289,1291,3,164,82,0,1290,1288,1,0,0,0,1290,1291,1,0,0,
		0,1291,1292,1,0,0,0,1292,1293,3,206,103,0,1293,213,1,0,0,0,1294,1295,5,
		27,0,0,1295,1296,3,188,94,0,1296,1297,5,28,0,0,1297,1298,3,6,3,0,1298,
		215,1,0,0,0,1299,1464,5,36,0,0,1300,1304,5,24,0,0,1301,1303,3,6,3,0,1302,
		1301,1,0,0,0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,1,0,0,0,1305,
		1307,1,0,0,0,1306,1304,1,0,0,0,1307,1464,5,25,0,0,1308,1309,5,110,0,0,
		1309,1310,3,164,82,0,1310,1311,5,36,0,0,1311,1464,1,0,0,0,1312,1313,5,
		111,0,0,1313,1314,3,134,67,0,1314,1315,5,59,0,0,1315,1316,3,156,78,0,1316,
		1317,5,36,0,0,1317,1464,1,0,0,0,1318,1328,7,2,0,0,1319,1323,5,24,0,0,1320,
		1322,3,198,99,0,1321,1320,1,0,0,0,1322,1325,1,0,0,0,1323,1321,1,0,0,0,
		1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,1323,1,0,0,0,1326,1329,5,25,0,
		0,1327,1329,3,198,99,0,1328,1319,1,0,0,0,1328,1327,1,0,0,0,1329,1464,1,
		0,0,0,1330,1332,5,145,0,0,1331,1333,3,188,94,0,1332,1331,1,0,0,0,1332,
		1333,1,0,0,0,1333,1334,1,0,0,0,1334,1464,5,36,0,0,1335,1336,5,134,0,0,
		1336,1338,5,145,0,0,1337,1339,3,188,94,0,1338,1337,1,0,0,0,1338,1339,1,
		0,0,0,1339,1340,1,0,0,0,1340,1341,5,137,0,0,1341,1342,5,27,0,0,1342,1343,
		3,188,94,0,1343,1344,5,28,0,0,1344,1345,5,36,0,0,1345,1464,1,0,0,0,1346,
		1347,5,152,0,0,1347,1348,3,188,94,0,1348,1349,5,36,0,0,1349,1464,1,0,0,
		0,1350,1352,5,143,0,0,1351,1353,5,169,0,0,1352,1351,1,0,0,0,1352,1353,
		1,0,0,0,1353,1354,1,0,0,0,1354,1464,5,36,0,0,1355,1356,5,137,0,0,1356,
		1362,3,214,107,0,1357,1358,5,138,0,0,1358,1359,5,137,0,0,1359,1361,3,214,
		107,0,1360,1357,1,0,0,0,1361,1364,1,0,0,0,1362,1360,1,0,0,0,1362,1363,
		1,0,0,0,1363,1367,1,0,0,0,1364,1362,1,0,0,0,1365,1366,5,138,0,0,1366,1368,
		3,6,3,0,1367,1365,1,0,0,0,1367,1368,1,0,0,0,1368,1464,1,0,0,0,1369,1370,
		5,139,0,0,1370,1371,5,27,0,0,1371,1372,3,188,94,0,1372,1373,5,28,0,0,1373,
		1375,5,24,0,0,1374,1376,3,200,100,0,1375,1374,1,0,0,0,1376,1377,1,0,0,
		0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,1380,1,0,0,0,1379,1381,3,202,
		101,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,1383,
		5,25,0,0,1383,1464,1,0,0,0,1384,1385,5,132,0,0,1385,1464,3,6,3,0,1386,
		1387,5,133,0,0,1387,1388,5,27,0,0,1388,1390,3,6,3,0,1389,1391,3,188,94,
		0,1390,1389,1,0,0,0,1390,1391,1,0,0,0,1391,1392,1,0,0,0,1392,1394,5,36,
		0,0,1393,1395,3,188,94,0,1394,1393,1,0,0,0,1394,1395,1,0,0,0,1395,1396,
		1,0,0,0,1396,1397,5,28,0,0,1397,1400,3,6,3,0,1398,1399,5,138,0,0,1399,
		1401,3,6,3,0,1400,1398,1,0,0,0,1400,1401,1,0,0,0,1401,1464,1,0,0,0,1402,
		1403,5,135,0,0,1403,1404,5,27,0,0,1404,1405,3,188,94,0,1405,1406,5,28,
		0,0,1406,1409,3,6,3,0,1407,1408,5,138,0,0,1408,1410,3,6,3,0,1409,1407,
		1,0,0,0,1409,1410,1,0,0,0,1410,1464,1,0,0,0,1411,1412,5,134,0,0,1412,1413,
		3,6,3,0,1413,1414,5,135,0,0,1414,1415,5,27,0,0,1415,1416,3,188,94,0,1416,
		1417,5,28,0,0,1417,1464,1,0,0,0,1418,1420,5,134,0,0,1419,1418,1,0,0,0,
		1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1422,3,188,94,0,1422,1428,5,136,
		0,0,1423,1426,3,134,67,0,1424,1425,7,30,0,0,1425,1427,5,169,0,0,1426,1424,
		1,0,0,0,1426,1427,1,0,0,0,1427,1429,1,0,0,0,1428,1423,1,0,0,0,1428,1429,
		1,0,0,0,1429,1430,1,0,0,0,1430,1431,3,6,3,0,1431,1464,1,0,0,0,1432,1433,
		5,146,0,0,1433,1439,3,6,3,0,1434,1436,5,147,0,0,1435,1437,3,176,88,0,1436,
		1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,0,0,1438,1440,3,6,3,0,1439,
		1434,1,0,0,0,1440,1441,1,0,0,0,1441,1439,1,0,0,0,1441,1442,1,0,0,0,1442,
		1464,1,0,0,0,1443,1444,5,148,0,0,1444,1464,3,6,3,0,1445,1449,3,188,94,
		0,1446,1447,3,126,63,0,1447,1448,3,188,94,0,1448,1450,1,0,0,0,1449,1446,
		1,0,0,0,1450,1451,1,0,0,0,1451,1449,1,0,0,0,1451,1452,1,0,0,0,1452,1453,
		1,0,0,0,1453,1454,5,36,0,0,1454,1464,1,0,0,0,1455,1456,3,188,94,0,1456,
		1457,3,128,64,0,1457,1458,3,188,94,0,1458,1459,5,36,0,0,1459,1464,1,0,
		0,0,1460,1461,3,188,94,0,1461,1462,5,36,0,0,1462,1464,1,0,0,0,1463,1299,
		1,0,0,0,1463,1300,1,0,0,0,1463,1308,1,0,0,0,1463,1312,1,0,0,0,1463,1318,
		1,0,0,0,1463,1330,1,0,0,0,1463,1335,1,0,0,0,1463,1346,1,0,0,0,1463,1350,
		1,0,0,0,1463,1355,1,0,0,0,1463,1369,1,0,0,0,1463,1384,1,0,0,0,1463,1386,
		1,0,0,0,1463,1402,1,0,0,0,1463,1411,1,0,0,0,1463,1419,1,0,0,0,1463,1432,
		1,0,0,0,1463,1443,1,0,0,0,1463,1445,1,0,0,0,1463,1455,1,0,0,0,1463,1460,
		1,0,0,0,1464,217,1,0,0,0,189,219,224,230,243,247,252,262,266,279,283,287,
		294,309,322,326,336,340,360,364,372,376,387,391,399,403,411,415,434,439,
		441,450,455,457,466,471,473,482,487,489,498,503,505,514,519,521,530,535,
		537,546,551,553,560,569,573,579,586,590,594,600,608,616,620,624,630,639,
		646,648,654,658,662,667,670,673,676,678,684,691,695,698,703,707,715,720,
		723,727,747,777,796,802,805,808,812,817,824,831,839,842,850,853,857,864,
		869,876,880,885,894,898,902,912,920,924,926,932,940,944,954,958,964,971,
		981,987,990,997,1000,1007,1010,1017,1020,1023,1027,1037,1099,1106,1110,
		1112,1114,1122,1126,1130,1135,1142,1146,1153,1157,1169,1176,1181,1187,
		1192,1197,1204,1211,1217,1228,1232,1237,1239,1246,1249,1254,1262,1265,
		1269,1273,1279,1282,1286,1290,1304,1323,1328,1332,1338,1352,1362,1367,
		1377,1380,1390,1394,1400,1409,1419,1426,1428,1436,1441,1451,1463
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Myll
