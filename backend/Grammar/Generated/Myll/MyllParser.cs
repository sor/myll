//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sor/myll/backend/Grammar/MyllParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Myll {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MyllParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, STRING_LIT=2, CHAR_LIT=3, ARROW_STAR=4, POINT_STAR=5, PTR_TO_ARY=6, 
		COMPARE=7, TRP_POINT=8, DBL_POINT=9, DBL_AMP=10, DBL_QM=11, QM_COLON=12, 
		DBL_PLUS=13, DBL_MINUS=14, RARROW=15, PHATRARROW=16, LSHIFT=17, SCOPE=18, 
		AT_LBRACK=19, AUTOINDEX=20, LBRACK=21, RBRACK=22, LCURLY=23, RCURLY=24, 
		QM_LPAREN=25, LPAREN=26, RPAREN=27, AT=28, AMP=29, STAR=30, SLASH=31, 
		MOD=32, PLUS=33, MINUS=34, SEMI=35, COLON=36, COMMA=37, QM_POINT_STAR=38, 
		QM_POINT=39, QM_LBRACK=40, DOT=41, CROSS=42, DIV=43, POINT=44, EM=45, 
		TILDE=46, DBL_PIPE=47, PIPE=48, QM=49, HAT=50, USCORE=51, EQ=52, NEQ=53, 
		LTEQ=54, GTEQ=55, LT=56, GT=57, ASSIGN=58, AS_POW=59, AS_MUL=60, AS_SLASH=61, 
		AS_MOD=62, AS_DOT=63, AS_CROSS=64, AS_DIV=65, AS_ADD=66, AS_SUB=67, AS_LSH=68, 
		AS_RSH=69, AS_AND=70, AS_OR=71, AS_XOR=72, AUTO=73, VOID=74, BOOL=75, 
		INT=76, UINT=77, ISIZE=78, USIZE=79, BYTE=80, CHAR=81, CODEPOINT=82, STRING=83, 
		FLOAT=84, I64=85, I32=86, I16=87, I8=88, U64=89, U32=90, U16=91, U8=92, 
		B64=93, B32=94, B16=95, B8=96, F128=97, F64=98, F32=99, F16=100, NAMESPACE=101, 
		MODULE=102, IMPORT=103, VOLATILE=104, STABLE=105, CONST=106, MUTABLE=107, 
		USING=108, ALIAS=109, UNION=110, STRUCT=111, CLASS=112, CTOR=113, DTOR=114, 
		FUNC=115, PROC=116, METHOD=117, ENUM=118, ASPECT=119, CONCEPT=120, REQUIRES=121, 
		PROP=122, GET=123, REFGET=124, SET=125, FIELD=126, OPERATOR=127, VAR=128, 
		LET=129, LOOP=130, FOR=131, DO=132, WHILE=133, TIMES=134, IF=135, ELSE=136, 
		SWITCH=137, DEFAULT=138, CASE=139, CONTINUE=140, BREAK=141, FALL=142, 
		RETURN=143, TRY=144, CATCH=145, DEFER=146, SIZEOF=147, NEW=148, DELETE=149, 
		THROW=150, NOT=151, NAN=152, INF=153, IS=154, CONVERT=155, FORWARD=156, 
		MOVE=157, COPY=158, ID=159, NUL=160, CLASS_LIT=161, BOOL_LIT=162, FLOAT_LIT=163, 
		HEX_LIT=164, OCT_LIT=165, BIN_LIT=166, INTEGER_LIT=167, NL=168, WS=169;
	public const int
		RULE_prog = 0, RULE_module = 1, RULE_imports = 2, RULE_levDecl = 3, RULE_levStmt = 4, 
		RULE_attribBlk = 5, RULE_attrib = 6, RULE_attribId = 7, RULE_comment = 8, 
		RULE_preOP = 9, RULE_postOP = 10, RULE_powOP = 11, RULE_multOP = 12, RULE_addOP = 13, 
		RULE_shiftOP = 14, RULE_cmpOp = 15, RULE_relOP = 16, RULE_equalOP = 17, 
		RULE_andOP = 18, RULE_orOP = 19, RULE_nulCoalOP = 20, RULE_memAccOP = 21, 
		RULE_memAccPtrOP = 22, RULE_assignOP = 23, RULE_aggrAssignOP = 24, RULE_lit = 25, 
		RULE_wildId = 26, RULE_id = 27, RULE_idOrLit = 28, RULE_specialType = 29, 
		RULE_charType = 30, RULE_floatingType = 31, RULE_binaryType = 32, RULE_signedIntType = 33, 
		RULE_unsignIntType = 34, RULE_qual = 35, RULE_typePtr = 36, RULE_idTplArgs = 37, 
		RULE_typespec = 38, RULE_typespecBasic = 39, RULE_typespecFunc = 40, RULE_typespecNested = 41, 
		RULE_typespecsNested = 42, RULE_arg = 43, RULE_args = 44, RULE_funcCall = 45, 
		RULE_indexCall = 46, RULE_param = 47, RULE_funcTypeDef = 48, RULE_tplArg = 49, 
		RULE_tplArgs = 50, RULE_tplParams = 51, RULE_threeWay = 52, RULE_capture = 53, 
		RULE_expr = 54, RULE_idAccessor = 55, RULE_idExpr = 56, RULE_idAccessors = 57, 
		RULE_idExprs = 58, RULE_typedIdAcors = 59, RULE_caseBlock = 60, RULE_defaultBlock = 61, 
		RULE_initList = 62, RULE_funcBody = 63, RULE_accessorDef = 64, RULE_funcDef = 65, 
		RULE_opDef = 66, RULE_condThen = 67, RULE_inDecl = 68, RULE_inStmt = 69;
	public static readonly string[] ruleNames = {
		"prog", "module", "imports", "levDecl", "levStmt", "attribBlk", "attrib", 
		"attribId", "comment", "preOP", "postOP", "powOP", "multOP", "addOP", 
		"shiftOP", "cmpOp", "relOP", "equalOP", "andOP", "orOP", "nulCoalOP", 
		"memAccOP", "memAccPtrOP", "assignOP", "aggrAssignOP", "lit", "wildId", 
		"id", "idOrLit", "specialType", "charType", "floatingType", "binaryType", 
		"signedIntType", "unsignIntType", "qual", "typePtr", "idTplArgs", "typespec", 
		"typespecBasic", "typespecFunc", "typespecNested", "typespecsNested", 
		"arg", "args", "funcCall", "indexCall", "param", "funcTypeDef", "tplArg", 
		"tplArgs", "tplParams", "threeWay", "capture", "expr", "idAccessor", "idExpr", 
		"idAccessors", "idExprs", "typedIdAcors", "caseBlock", "defaultBlock", 
		"initList", "funcBody", "accessorDef", "funcDef", "opDef", "condThen", 
		"inDecl", "inStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'->*'", "'.*'", "'[*]'", "'<=>'", "'...'", "'..'", 
		"'&&'", "'??'", "'?:'", "'++'", "'--'", "'->'", "'=>'", "'<<'", "'::'", 
		"'@['", null, "'['", "']'", "'{'", "'}'", "'?('", "'('", "')'", "'@'", 
		"'&'", "'*'", "'/'", "'%'", "'+'", "'-'", "';'", "':'", "','", "'?.*'", 
		"'?.'", "'?['", "'\\u00B7'", "'\\u00D7'", "'\\u00F7'", "'.'", "'!'", "'~'", 
		"'||'", "'|'", "'?'", "'^'", "'_'", "'=='", "'!='", "'<='", "'>='", "'<'", 
		"'>'", "'='", "'**='", "'*='", "'/='", "'%='", "'\\u00B7='", "'\\u00D7='", 
		"'\\u00F7='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'|='", "'^='", 
		"'auto'", "'void'", "'bool'", "'int'", "'uint'", "'isize'", "'usize'", 
		"'byte'", "'char'", null, "'string'", "'float'", "'i64'", "'i32'", "'i16'", 
		"'i8'", "'u64'", "'u32'", "'u16'", "'u8'", "'b64'", "'b32'", "'b16'", 
		"'b8'", "'f128'", "'f64'", "'f32'", "'f16'", "'namespace'", "'module'", 
		"'import'", "'volatile'", "'stable'", "'const'", null, "'using'", "'alias'", 
		"'union'", "'struct'", "'class'", "'ctor'", "'dtor'", "'func'", "'proc'", 
		null, "'enum'", "'aspect'", "'concept'", "'requires'", "'prop'", "'get'", 
		"'refget'", "'set'", "'field'", "'operator'", "'var'", "'let'", "'loop'", 
		"'for'", "'do'", "'while'", "'times'", "'if'", "'else'", "'switch'", "'default'", 
		"'case'", "'continue'", "'break'", "'fall'", "'return'", "'try'", "'catch'", 
		"'defer'", "'sizeof'", "'new'", "'delete'", "'throw'", "'not'", "'nan'", 
		"'inf'", "'is'", null, null, "'move'", "'copy'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "STRING_LIT", "CHAR_LIT", "ARROW_STAR", "POINT_STAR", 
		"PTR_TO_ARY", "COMPARE", "TRP_POINT", "DBL_POINT", "DBL_AMP", "DBL_QM", 
		"QM_COLON", "DBL_PLUS", "DBL_MINUS", "RARROW", "PHATRARROW", "LSHIFT", 
		"SCOPE", "AT_LBRACK", "AUTOINDEX", "LBRACK", "RBRACK", "LCURLY", "RCURLY", 
		"QM_LPAREN", "LPAREN", "RPAREN", "AT", "AMP", "STAR", "SLASH", "MOD", 
		"PLUS", "MINUS", "SEMI", "COLON", "COMMA", "QM_POINT_STAR", "QM_POINT", 
		"QM_LBRACK", "DOT", "CROSS", "DIV", "POINT", "EM", "TILDE", "DBL_PIPE", 
		"PIPE", "QM", "HAT", "USCORE", "EQ", "NEQ", "LTEQ", "GTEQ", "LT", "GT", 
		"ASSIGN", "AS_POW", "AS_MUL", "AS_SLASH", "AS_MOD", "AS_DOT", "AS_CROSS", 
		"AS_DIV", "AS_ADD", "AS_SUB", "AS_LSH", "AS_RSH", "AS_AND", "AS_OR", "AS_XOR", 
		"AUTO", "VOID", "BOOL", "INT", "UINT", "ISIZE", "USIZE", "BYTE", "CHAR", 
		"CODEPOINT", "STRING", "FLOAT", "I64", "I32", "I16", "I8", "U64", "U32", 
		"U16", "U8", "B64", "B32", "B16", "B8", "F128", "F64", "F32", "F16", "NAMESPACE", 
		"MODULE", "IMPORT", "VOLATILE", "STABLE", "CONST", "MUTABLE", "USING", 
		"ALIAS", "UNION", "STRUCT", "CLASS", "CTOR", "DTOR", "FUNC", "PROC", "METHOD", 
		"ENUM", "ASPECT", "CONCEPT", "REQUIRES", "PROP", "GET", "REFGET", "SET", 
		"FIELD", "OPERATOR", "VAR", "LET", "LOOP", "FOR", "DO", "WHILE", "TIMES", 
		"IF", "ELSE", "SWITCH", "DEFAULT", "CASE", "CONTINUE", "BREAK", "FALL", 
		"RETURN", "TRY", "CATCH", "DEFER", "SIZEOF", "NEW", "DELETE", "THROW", 
		"NOT", "NAN", "INF", "IS", "CONVERT", "FORWARD", "MOVE", "COPY", "ID", 
		"NUL", "CLASS_LIT", "BOOL_LIT", "FLOAT_LIT", "HEX_LIT", "OCT_LIT", "BIN_LIT", 
		"INTEGER_LIT", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyllParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MyllParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyllParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyllParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext[] imports() {
			return GetRuleContexts<ImportsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext imports(int i) {
			return GetRuleContext<ImportsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext[] levDecl() {
			return GetRuleContexts<LevDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext levDecl(int i) {
			return GetRuleContext<LevDeclContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODULE) {
				{
				State = 140;
				module();
				}
			}

			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 143;
				imports();
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NAMESPACE - 101)) | (1L << (CONST - 101)) | (1L << (USING - 101)) | (1L << (ALIAS - 101)) | (1L << (UNION - 101)) | (1L << (STRUCT - 101)) | (1L << (CLASS - 101)) | (1L << (CTOR - 101)) | (1L << (DTOR - 101)) | (1L << (FUNC - 101)) | (1L << (PROC - 101)) | (1L << (METHOD - 101)) | (1L << (ENUM - 101)) | (1L << (ASPECT - 101)) | (1L << (CONCEPT - 101)) | (1L << (FIELD - 101)) | (1L << (OPERATOR - 101)) | (1L << (VAR - 101)) | (1L << (LET - 101)) | (1L << (DEFAULT - 101)) | (1L << (CONVERT - 101)) | (1L << (FORWARD - 101)) | (1L << (MOVE - 101)) | (1L << (COPY - 101)))) != 0)) {
				{
				{
				State = 149;
				levDecl();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MyllParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(MODULE);
			State = 156;
			id();
			State = 157;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MyllParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 4, RULE_imports);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(IMPORT);
			State = 160;
			id();
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 161;
					Match(COMMA);
					State = 162;
					id();
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 168;
				Match(COMMA);
				}
			}

			State = 171;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevDeclContext : ParserRuleContext {
		public LevDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levDecl; } }
	 
		public LevDeclContext() { }
		public virtual void CopyFrom(LevDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttribStateContext : LevDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public AttribStateContext(LevDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AttribDeclContext : LevDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public InDeclContext inDecl() {
			return GetRuleContext<InDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		public AttribDeclContext(LevDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AttribDeclBlockContext : LevDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext[] levDecl() {
			return GetRuleContexts<LevDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext levDecl(int i) {
			return GetRuleContext<LevDeclContext>(i);
		}
		public AttribDeclBlockContext(LevDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribDeclBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevDeclContext levDecl() {
		LevDeclContext _localctx = new LevDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_levDecl);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new AttribDeclBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				attribBlk();
				State = 174;
				Match(LCURLY);
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NAMESPACE - 101)) | (1L << (CONST - 101)) | (1L << (USING - 101)) | (1L << (ALIAS - 101)) | (1L << (UNION - 101)) | (1L << (STRUCT - 101)) | (1L << (CLASS - 101)) | (1L << (CTOR - 101)) | (1L << (DTOR - 101)) | (1L << (FUNC - 101)) | (1L << (PROC - 101)) | (1L << (METHOD - 101)) | (1L << (ENUM - 101)) | (1L << (ASPECT - 101)) | (1L << (CONCEPT - 101)) | (1L << (FIELD - 101)) | (1L << (OPERATOR - 101)) | (1L << (VAR - 101)) | (1L << (LET - 101)) | (1L << (DEFAULT - 101)) | (1L << (CONVERT - 101)) | (1L << (FORWARD - 101)) | (1L << (MOVE - 101)) | (1L << (COPY - 101)))) != 0)) {
					{
					{
					State = 175;
					levDecl();
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 181;
				Match(RCURLY);
				}
				break;
			case 2:
				_localctx = new AttribStateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				attribBlk();
				State = 184;
				Match(COLON);
				}
				break;
			case 3:
				_localctx = new AttribDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 186;
					attribBlk();
					}
				}

				State = 189;
				inDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevStmtContext : ParserRuleContext {
		public LevStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levStmt; } }
	 
		public LevStmtContext() { }
		public virtual void CopyFrom(LevStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttribStmtContext : LevStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public InStmtContext inStmt() {
			return GetRuleContext<InStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		public AttribStmtContext(LevStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevStmtContext levStmt() {
		LevStmtContext _localctx = new LevStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_levStmt);
		int _la;
		try {
			_localctx = new AttribStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 192;
				attribBlk();
				}
			}

			State = 195;
			inStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribBlkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public AttribBlkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribBlk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribBlk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribBlkContext attribBlk() {
		AttribBlkContext _localctx = new AttribBlkContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribBlk);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(LBRACK);
			State = 198;
			attrib();
			State = 203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 199;
					Match(COMMA);
					State = 200;
					attrib();
					}
					} 
				}
				State = 205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 206;
				Match(COMMA);
				}
			}

			State = 209;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttribIdContext attribId() {
			return GetRuleContext<AttribIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdOrLitContext[] idOrLit() {
			return GetRuleContexts<IdOrLitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdOrLitContext idOrLit(int i) {
			return GetRuleContext<IdOrLitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 12, RULE_attrib);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			attribId();
			State = 228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 212;
				Match(ASSIGN);
				State = 213;
				idOrLit();
				}
				break;
			case LPAREN:
				{
				State = 214;
				Match(LPAREN);
				State = 215;
				idOrLit();
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 216;
						Match(COMMA);
						State = 217;
						idOrLit();
						}
						} 
					}
					State = 222;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 223;
					Match(COMMA);
					}
				}

				State = 226;
				Match(RPAREN);
				}
				break;
			case RBRACK:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALL() { return GetToken(MyllParser.FALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MyllParser.DEFAULT, 0); }
		public AttribIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribIdContext attribId() {
		AttribIdContext _localctx = new AttribIdContext(Context, State);
		EnterRule(_localctx, 14, RULE_attribId);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				id();
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				Match(CONST);
				}
				break;
			case FALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 232;
				Match(FALL);
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 233;
				Match(THROW);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 234;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MyllParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 16, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PLUS() { return GetToken(MyllParser.DBL_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_MINUS() { return GetToken(MyllParser.DBL_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM() { return GetToken(MyllParser.EM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(MyllParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		public PreOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreOPContext preOP() {
		PreOPContext _localctx = new PreOPContext(Context, State);
		EnterRule(_localctx, 18, RULE_preOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PLUS() { return GetToken(MyllParser.DBL_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_MINUS() { return GetToken(MyllParser.DBL_MINUS, 0); }
		public PostOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostOPContext postOP() {
		PostOPContext _localctx = new PostOPContext(Context, State);
		EnterRule(_localctx, 20, RULE_postOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DBL_PLUS || _la==DBL_MINUS) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MyllParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MyllParser.STAR, i);
		}
		public PowOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowOPContext powOP() {
		PowOPContext _localctx = new PowOPContext(Context, State);
		EnterRule(_localctx, 22, RULE_powOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(STAR);
			State = 244;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(MyllParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MyllParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MyllParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(MyllParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MyllParser.DIV, 0); }
		public MultOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOPContext multOP() {
		MultOPContext _localctx = new MultOPContext(Context, State);
		EnterRule(_localctx, 24, RULE_multOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AMP) | (1L << STAR) | (1L << SLASH) | (1L << MOD) | (1L << DOT) | (1L << CROSS) | (1L << DIV))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAT() { return GetToken(MyllParser.HAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(MyllParser.PIPE, 0); }
		public AddOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOPContext addOP() {
		AddOPContext _localctx = new AddOPContext(Context, State);
		EnterRule(_localctx, 26, RULE_addOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << PIPE) | (1L << HAT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(MyllParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(MyllParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(MyllParser.GT, i);
		}
		public ShiftOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOPContext shiftOP() {
		ShiftOPContext _localctx = new ShiftOPContext(Context, State);
		EnterRule(_localctx, 28, RULE_shiftOP);
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LSHIFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				Match(LSHIFT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(GT);
				State = 252;
				Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARE() { return GetToken(MyllParser.COMPARE, 0); }
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 30, RULE_cmpOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(COMPARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(MyllParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(MyllParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		public RelOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelOPContext relOP() {
		RelOPContext _localctx = new RelOPContext(Context, State);
		EnterRule(_localctx, 32, RULE_relOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTEQ) | (1L << GTEQ) | (1L << LT) | (1L << GT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MyllParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(MyllParser.NEQ, 0); }
		public EqualOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualOPContext equalOP() {
		EqualOPContext _localctx = new EqualOPContext(Context, State);
		EnterRule(_localctx, 34, RULE_equalOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==EQ || _la==NEQ) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_AMP() { return GetToken(MyllParser.DBL_AMP, 0); }
		public AndOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOPContext andOP() {
		AndOPContext _localctx = new AndOPContext(Context, State);
		EnterRule(_localctx, 36, RULE_andOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(DBL_AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PIPE() { return GetToken(MyllParser.DBL_PIPE, 0); }
		public OrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrOPContext orOP() {
		OrOPContext _localctx = new OrOPContext(Context, State);
		EnterRule(_localctx, 38, RULE_orOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(DBL_PIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulCoalOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_COLON() { return GetToken(MyllParser.QM_COLON, 0); }
		public NulCoalOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulCoalOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulCoalOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulCoalOPContext nulCoalOP() {
		NulCoalOPContext _localctx = new NulCoalOPContext(Context, State);
		EnterRule(_localctx, 40, RULE_nulCoalOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(QM_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemAccOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MyllParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_POINT() { return GetToken(MyllParser.QM_POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		public MemAccOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memAccOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemAccOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemAccOPContext memAccOP() {
		MemAccOPContext _localctx = new MemAccOPContext(Context, State);
		EnterRule(_localctx, 42, RULE_memAccOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RARROW) | (1L << QM_POINT) | (1L << POINT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemAccPtrOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_STAR() { return GetToken(MyllParser.POINT_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_POINT_STAR() { return GetToken(MyllParser.QM_POINT_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW_STAR() { return GetToken(MyllParser.ARROW_STAR, 0); }
		public MemAccPtrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memAccPtrOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemAccPtrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemAccPtrOPContext memAccPtrOP() {
		MemAccPtrOPContext _localctx = new MemAccPtrOPContext(Context, State);
		EnterRule(_localctx, 44, RULE_memAccPtrOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARROW_STAR) | (1L << POINT_STAR) | (1L << QM_POINT_STAR))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		public AssignOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOPContext assignOP() {
		AssignOPContext _localctx = new AssignOPContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggrAssignOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_POW() { return GetToken(MyllParser.AS_POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_MUL() { return GetToken(MyllParser.AS_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SLASH() { return GetToken(MyllParser.AS_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_MOD() { return GetToken(MyllParser.AS_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_AND() { return GetToken(MyllParser.AS_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_DOT() { return GetToken(MyllParser.AS_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_CROSS() { return GetToken(MyllParser.AS_CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_DIV() { return GetToken(MyllParser.AS_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_ADD() { return GetToken(MyllParser.AS_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SUB() { return GetToken(MyllParser.AS_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_OR() { return GetToken(MyllParser.AS_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_XOR() { return GetToken(MyllParser.AS_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_LSH() { return GetToken(MyllParser.AS_LSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_RSH() { return GetToken(MyllParser.AS_RSH, 0); }
		public AggrAssignOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggrAssignOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrAssignOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggrAssignOPContext aggrAssignOP() {
		AggrAssignOPContext _localctx = new AggrAssignOPContext(Context, State);
		EnterRule(_localctx, 48, RULE_aggrAssignOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (AS_POW - 59)) | (1L << (AS_MUL - 59)) | (1L << (AS_SLASH - 59)) | (1L << (AS_MOD - 59)) | (1L << (AS_DOT - 59)) | (1L << (AS_CROSS - 59)) | (1L << (AS_DIV - 59)) | (1L << (AS_ADD - 59)) | (1L << (AS_SUB - 59)) | (1L << (AS_LSH - 59)) | (1L << (AS_RSH - 59)) | (1L << (AS_AND - 59)) | (1L << (AS_OR - 59)) | (1L << (AS_XOR - 59)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_LIT() { return GetToken(MyllParser.CLASS_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(MyllParser.HEX_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LIT() { return GetToken(MyllParser.OCT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LIT() { return GetToken(MyllParser.BIN_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(MyllParser.FLOAT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(MyllParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LIT() { return GetToken(MyllParser.CHAR_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LIT() { return GetToken(MyllParser.BOOL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUL() { return GetToken(MyllParser.NUL, 0); }
		public LitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LitContext lit() {
		LitContext _localctx = new LitContext(Context, State);
		EnterRule(_localctx, 50, RULE_lit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LIT || _la==CHAR_LIT || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (NUL - 160)) | (1L << (CLASS_LIT - 160)) | (1L << (BOOL_LIT - 160)) | (1L << (FLOAT_LIT - 160)) | (1L << (HEX_LIT - 160)) | (1L << (OCT_LIT - 160)) | (1L << (BIN_LIT - 160)) | (1L << (INTEGER_LIT - 160)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINDEX() { return GetToken(MyllParser.AUTOINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USCORE() { return GetToken(MyllParser.USCORE, 0); }
		public WildIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildIdContext wildId() {
		WildIdContext _localctx = new WildIdContext(Context, State);
		EnterRule(_localctx, 52, RULE_wildId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTOINDEX || _la==USCORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyllParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 54, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdOrLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		public IdOrLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idOrLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdOrLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdOrLitContext idOrLit() {
		IdOrLitContext _localctx = new IdOrLitContext(Context, State);
		EnterRule(_localctx, 56, RULE_idOrLit);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				id();
				}
				break;
			case STRING_LIT:
			case CHAR_LIT:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				lit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(MyllParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MyllParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MyllParser.BOOL, 0); }
		public SpecialTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialTypeContext specialType() {
		SpecialTypeContext _localctx = new SpecialTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_specialType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (AUTO - 73)) | (1L << (VOID - 73)) | (1L << (BOOL - 73)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MyllParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEPOINT() { return GetToken(MyllParser.CODEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MyllParser.STRING, 0); }
		public CharTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharTypeContext charType() {
		CharTypeContext _localctx = new CharTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_charType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (CHAR - 81)) | (1L << (CODEPOINT - 81)) | (1L << (STRING - 81)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MyllParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F128() { return GetToken(MyllParser.F128, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F64() { return GetToken(MyllParser.F64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F32() { return GetToken(MyllParser.F32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F16() { return GetToken(MyllParser.F16, 0); }
		public FloatingTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingTypeContext floatingType() {
		FloatingTypeContext _localctx = new FloatingTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_floatingType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (FLOAT - 84)) | (1L << (F128 - 84)) | (1L << (F64 - 84)) | (1L << (F32 - 84)) | (1L << (F16 - 84)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(MyllParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B64() { return GetToken(MyllParser.B64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B32() { return GetToken(MyllParser.B32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B16() { return GetToken(MyllParser.B16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B8() { return GetToken(MyllParser.B8, 0); }
		public BinaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryTypeContext binaryType() {
		BinaryTypeContext _localctx = new BinaryTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_binaryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (BYTE - 80)) | (1L << (B64 - 80)) | (1L << (B32 - 80)) | (1L << (B16 - 80)) | (1L << (B8 - 80)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MyllParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISIZE() { return GetToken(MyllParser.ISIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(MyllParser.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(MyllParser.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(MyllParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(MyllParser.I8, 0); }
		public SignedIntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedIntType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntTypeContext signedIntType() {
		SignedIntTypeContext _localctx = new SignedIntTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_signedIntType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INT - 76)) | (1L << (ISIZE - 76)) | (1L << (I64 - 76)) | (1L << (I32 - 76)) | (1L << (I16 - 76)) | (1L << (I8 - 76)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignIntTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(MyllParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USIZE() { return GetToken(MyllParser.USIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U64() { return GetToken(MyllParser.U64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U32() { return GetToken(MyllParser.U32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U16() { return GetToken(MyllParser.U16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U8() { return GetToken(MyllParser.U8, 0); }
		public UnsignIntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignIntType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignIntTypeContext unsignIntType() {
		UnsignIntTypeContext _localctx = new UnsignIntTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_unsignIntType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (UINT - 77)) | (1L << (USIZE - 77)) | (1L << (U64 - 77)) | (1L << (U32 - 77)) | (1L << (U16 - 77)) | (1L << (U8 - 77)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTABLE() { return GetToken(MyllParser.MUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(MyllParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(MyllParser.STABLE, 0); }
		public QualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualContext qual() {
		QualContext _localctx = new QualContext(Context, State);
		EnterRule(_localctx, 70, RULE_qual);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (VOLATILE - 104)) | (1L << (STABLE - 104)) | (1L << (CONST - 104)) | (1L << (MUTABLE - 104)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePtrContext : ParserRuleContext {
		public IToken ptr;
		public IToken ary;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_AMP() { return GetToken(MyllParser.DBL_AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PTR_TO_ARY() { return GetToken(MyllParser.PTR_TO_ARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_LBRACK() { return GetToken(MyllParser.AT_LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM() { return GetToken(MyllParser.EM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		public TypePtrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePtr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePtr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePtrContext typePtr() {
		TypePtrContext _localctx = new TypePtrContext(Context, State);
		EnterRule(_localctx, 72, RULE_typePtr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (VOLATILE - 104)) | (1L << (STABLE - 104)) | (1L << (CONST - 104)) | (1L << (MUTABLE - 104)))) != 0)) {
				{
				{
				State = 299;
				qual();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 311;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PTR_TO_ARY:
			case DBL_AMP:
			case AMP:
			case STAR:
				{
				State = 305;
				_localctx.ptr = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PTR_TO_ARY) | (1L << DBL_AMP) | (1L << AMP) | (1L << STAR))) != 0)) ) {
					_localctx.ptr = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AT_LBRACK:
			case LBRACK:
				{
				State = 306;
				_localctx.ary = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AT_LBRACK || _la==LBRACK) ) {
					_localctx.ary = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (SIZEOF - 115)) | (1L << (NEW - 115)) | (1L << (DELETE - 115)) | (1L << (THROW - 115)) | (1L << (ID - 115)) | (1L << (NUL - 115)) | (1L << (CLASS_LIT - 115)) | (1L << (BOOL_LIT - 115)) | (1L << (FLOAT_LIT - 115)) | (1L << (HEX_LIT - 115)) | (1L << (OCT_LIT - 115)) | (1L << (BIN_LIT - 115)) | (1L << (INTEGER_LIT - 115)))) != 0)) {
					{
					State = 307;
					expr(0);
					}
				}

				State = 310;
				Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 313;
				_localctx.suffix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << EM) | (1L << QM))) != 0)) ) {
					_localctx.suffix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdTplArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplArgsContext tplArgs() {
			return GetRuleContext<TplArgsContext>(0);
		}
		public IdTplArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idTplArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdTplArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdTplArgsContext idTplArgs() {
		IdTplArgsContext _localctx = new IdTplArgsContext(Context, State);
		EnterRule(_localctx, 74, RULE_idTplArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			id();
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 317;
				tplArgs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecBasicContext typespecBasic() {
			return GetRuleContext<TypespecBasicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecFuncContext typespecFunc() {
			return GetRuleContext<TypespecFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext typespecNested() {
			return GetRuleContext<TypespecNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePtrContext[] typePtr() {
			return GetRuleContexts<TypePtrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePtrContext typePtr(int i) {
			return GetRuleContext<TypePtrContext>(i);
		}
		public TypespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecContext typespec() {
		TypespecContext _localctx = new TypespecContext(Context, State);
		EnterRule(_localctx, 76, RULE_typespec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (VOLATILE - 104)) | (1L << (STABLE - 104)) | (1L << (CONST - 104)) | (1L << (MUTABLE - 104)))) != 0)) {
				{
				{
				State = 320;
				qual();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
				{
				State = 326;
				typespecBasic();
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 327;
						typePtr();
						}
						} 
					}
					State = 332;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				}
				break;
			case FUNC:
				{
				State = 333;
				Match(FUNC);
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PTR_TO_ARY) | (1L << DBL_AMP) | (1L << AT_LBRACK) | (1L << LBRACK) | (1L << AMP) | (1L << STAR))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (VOLATILE - 104)) | (1L << (STABLE - 104)) | (1L << (CONST - 104)) | (1L << (MUTABLE - 104)))) != 0)) {
					{
					{
					State = 334;
					typePtr();
					}
					}
					State = 339;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 340;
				typespecFunc();
				}
				break;
			case ID:
				{
				State = 341;
				typespecNested();
				State = 345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 342;
						typePtr();
						}
						} 
					}
					State = 347;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecBasicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialTypeContext specialType() {
			return GetRuleContext<SpecialTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharTypeContext charType() {
			return GetRuleContext<CharTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatingTypeContext floatingType() {
			return GetRuleContext<FloatingTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryTypeContext binaryType() {
			return GetRuleContext<BinaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedIntTypeContext signedIntType() {
			return GetRuleContext<SignedIntTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignIntTypeContext unsignIntType() {
			return GetRuleContext<UnsignIntTypeContext>(0);
		}
		public TypespecBasicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecBasic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecBasic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecBasicContext typespecBasic() {
		TypespecBasicContext _localctx = new TypespecBasicContext(Context, State);
		EnterRule(_localctx, 78, RULE_typespecBasic);
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350;
				specialType();
				}
				break;
			case CHAR:
			case CODEPOINT:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351;
				charType();
				}
				break;
			case FLOAT:
			case F128:
			case F64:
			case F32:
			case F16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 352;
				floatingType();
				}
				break;
			case BYTE:
			case B64:
			case B32:
			case B16:
			case B8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 353;
				binaryType();
				}
				break;
			case INT:
			case ISIZE:
			case I64:
			case I32:
			case I16:
			case I8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 354;
				signedIntType();
				}
				break;
			case UINT:
			case USIZE:
			case U64:
			case U32:
			case U16:
			case U8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 355;
				unsignIntType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public TypespecFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecFuncContext typespecFunc() {
		TypespecFuncContext _localctx = new TypespecFuncContext(Context, State);
		EnterRule(_localctx, 80, RULE_typespecFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			funcTypeDef();
			State = 361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 359;
				Match(RARROW);
				State = 360;
				typespec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecNestedContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext[] idTplArgs() {
			return GetRuleContexts<IdTplArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs(int i) {
			return GetRuleContext<IdTplArgsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CTOR() { return GetToken(MyllParser.CTOR, 0); }
		public TypespecNestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecNested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecNestedContext typespecNested() {
		TypespecNestedContext _localctx = new TypespecNestedContext(Context, State);
		EnterRule(_localctx, 82, RULE_typespecNested);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			idTplArgs();
			State = 368;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 364;
					Match(SCOPE);
					State = 365;
					idTplArgs();
					}
					} 
				}
				State = 370;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 371;
				Match(SCOPE);
				State = 372;
				_localctx.v = Match(CTOR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecsNestedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext[] typespecNested() {
			return GetRuleContexts<TypespecNestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext typespecNested(int i) {
			return GetRuleContext<TypespecNestedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TypespecsNestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecsNested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecsNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecsNestedContext typespecsNested() {
		TypespecsNestedContext _localctx = new TypespecsNestedContext(Context, State);
		EnterRule(_localctx, 84, RULE_typespecsNested);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			typespecNested();
			State = 380;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 376;
					Match(COMMA);
					State = 377;
					typespecNested();
					}
					} 
				}
				State = 382;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 383;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 86, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 386;
				id();
				State = 387;
				Match(COLON);
				}
				break;
			}
			State = 391;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 88, RULE_args);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			arg();
			State = 398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 394;
					Match(COMMA);
					State = 395;
					arg();
					}
					} 
				}
				State = 400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 401;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_LPAREN() { return GetToken(MyllParser.QM_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 90, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_localctx.ary = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==QM_LPAREN || _la==LPAREN) ) {
				_localctx.ary = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (SIZEOF - 115)) | (1L << (NEW - 115)) | (1L << (DELETE - 115)) | (1L << (THROW - 115)) | (1L << (ID - 115)) | (1L << (NUL - 115)) | (1L << (CLASS_LIT - 115)) | (1L << (BOOL_LIT - 115)) | (1L << (FLOAT_LIT - 115)) | (1L << (HEX_LIT - 115)) | (1L << (OCT_LIT - 115)) | (1L << (BIN_LIT - 115)) | (1L << (INTEGER_LIT - 115)))) != 0)) {
				{
				State = 405;
				args();
				}
			}

			State = 408;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexCallContext : ParserRuleContext {
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_LBRACK() { return GetToken(MyllParser.QM_LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		public IndexCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexCallContext indexCall() {
		IndexCallContext _localctx = new IndexCallContext(Context, State);
		EnterRule(_localctx, 92, RULE_indexCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_localctx.ary = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LBRACK || _la==QM_LBRACK) ) {
				_localctx.ary = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 411;
			args();
			State = 412;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 94, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			typespec();
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 415;
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public FuncTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeDefContext funcTypeDef() {
		FuncTypeDefContext _localctx = new FuncTypeDefContext(Context, State);
		EnterRule(_localctx, 96, RULE_funcTypeDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(LPAREN);
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (AUTO - 73)) | (1L << (VOID - 73)) | (1L << (BOOL - 73)) | (1L << (INT - 73)) | (1L << (UINT - 73)) | (1L << (ISIZE - 73)) | (1L << (USIZE - 73)) | (1L << (BYTE - 73)) | (1L << (CHAR - 73)) | (1L << (CODEPOINT - 73)) | (1L << (STRING - 73)) | (1L << (FLOAT - 73)) | (1L << (I64 - 73)) | (1L << (I32 - 73)) | (1L << (I16 - 73)) | (1L << (I8 - 73)) | (1L << (U64 - 73)) | (1L << (U32 - 73)) | (1L << (U16 - 73)) | (1L << (U8 - 73)) | (1L << (B64 - 73)) | (1L << (B32 - 73)) | (1L << (B16 - 73)) | (1L << (B8 - 73)) | (1L << (F128 - 73)) | (1L << (F64 - 73)) | (1L << (F32 - 73)) | (1L << (F16 - 73)) | (1L << (VOLATILE - 73)) | (1L << (STABLE - 73)) | (1L << (CONST - 73)) | (1L << (MUTABLE - 73)) | (1L << (FUNC - 73)))) != 0) || _la==ID) {
				{
				State = 419;
				param();
				State = 424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 420;
						Match(COMMA);
						State = 421;
						param();
						}
						} 
					}
					State = 426;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 427;
					Match(COMMA);
					}
				}

				}
			}

			State = 432;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public TplArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplArgContext tplArg() {
		TplArgContext _localctx = new TplArgContext(Context, State);
		EnterRule(_localctx, 98, RULE_tplArg);
		try {
			State = 436;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LIT:
			case CHAR_LIT:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				lit();
				}
				break;
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				typespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplArgContext[] tplArg() {
			return GetRuleContexts<TplArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplArgContext tplArg(int i) {
			return GetRuleContext<TplArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TplArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplArgsContext tplArgs() {
		TplArgsContext _localctx = new TplArgsContext(Context, State);
		EnterRule(_localctx, 100, RULE_tplArgs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(LT);
			State = 439;
			tplArg();
			State = 444;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 440;
					Match(COMMA);
					State = 441;
					tplArg();
					}
					} 
				}
				State = 446;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 447;
				Match(COMMA);
				}
			}

			State = 450;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TplParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplParamsContext tplParams() {
		TplParamsContext _localctx = new TplParamsContext(Context, State);
		EnterRule(_localctx, 102, RULE_tplParams);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			Match(LT);
			State = 453;
			id();
			State = 458;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 454;
					Match(COMMA);
					State = 455;
					id();
					}
					} 
				}
				State = 460;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 461;
				Match(COMMA);
				}
			}

			State = 464;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreeWayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOPContext relOP() {
			return GetRuleContext<RelOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualOPContext equalOP() {
			return GetRuleContext<EqualOPContext>(0);
		}
		public ThreeWayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threeWay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreeWay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreeWayContext threeWay() {
		ThreeWayContext _localctx = new ThreeWayContext(Context, State);
		EnterRule(_localctx, 104, RULE_threeWay);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LTEQ:
			case GTEQ:
			case LT:
			case GT:
				{
				State = 466;
				relOP();
				}
				break;
			case EQ:
			case NEQ:
				{
				State = 467;
				equalOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 470;
			Match(COLON);
			State = 471;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 106, RULE_capture);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(LBRACK);
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (SIZEOF - 115)) | (1L << (NEW - 115)) | (1L << (DELETE - 115)) | (1L << (THROW - 115)) | (1L << (ID - 115)) | (1L << (NUL - 115)) | (1L << (CLASS_LIT - 115)) | (1L << (BOOL_LIT - 115)) | (1L << (FLOAT_LIT - 115)) | (1L << (HEX_LIT - 115)) | (1L << (OCT_LIT - 115)) | (1L << (BIN_LIT - 115)) | (1L << (INTEGER_LIT - 115)))) != 0)) {
				{
				State = 474;
				args();
				}
			}

			State = 477;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndOPContext andOP() {
			return GetRuleContext<AndOPContext>(0);
		}
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public ComparisonExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public LambdaExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowOPContext powOP() {
			return GetRuleContext<PowOPContext>(0);
		}
		public PowExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOPContext multOP() {
			return GetRuleContext<MultOPContext>(0);
		}
		public MultExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostOPContext postOP() {
			return GetRuleContext<PostOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexCallContext indexCall() {
			return GetRuleContext<IndexCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemAccOPContext memAccOP() {
			return GetRuleContext<MemAccOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs() {
			return GetRuleContext<IdTplArgsContext>(0);
		}
		public PostExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOPContext addOP() {
			return GetRuleContext<AddOPContext>(0);
		}
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOPContext relOP() {
			return GetRuleContext<RelOPContext>(0);
		}
		public RelationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRP_POINT() { return GetToken(MyllParser.TRP_POINT, 0); }
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ConditionalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemPtrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemAccPtrOPContext memAccPtrOP() {
			return GetRuleContext<MemAccPtrOPContext>(0);
		}
		public MemPtrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemPtrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalesceExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NulCoalOPContext nulCoalOP() {
			return GetRuleContext<NulCoalOPContext>(0);
		}
		public NullCoalesceExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalesceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrOPContext orOP() {
			return GetRuleContext<OrOPContext>(0);
		}
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThreeWayConditionalExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_QM() { return GetToken(MyllParser.DBL_QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreeWayContext[] threeWay() {
			return GetRuleContexts<ThreeWayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreeWayContext threeWay(int i) {
			return GetRuleContext<ThreeWayContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ThreeWayConditionalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreeWayConditionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreExprContext : ExprContext {
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(MyllParser.SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MyllParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreOPContext preOP() {
			return GetRuleContext<PreOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MyllParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(MyllParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(MyllParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM() { return GetToken(MyllParser.EM, 0); }
		public PreExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildIdExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public WildIdContext wildId() {
			return GetRuleContext<WildIdContext>(0);
		}
		public WildIdExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualOPContext equalOP() {
			return GetRuleContext<EqualOPContext>(0);
		}
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThrowExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MyllParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public NewExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopedExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext[] idTplArgs() {
			return GetRuleContexts<IdTplArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs(int i) {
			return GetRuleContext<IdTplArgsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		public ScopedExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdTplExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs() {
			return GetRuleContext<IdTplArgsContext>(0);
		}
		public IdTplExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdTplExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOPContext shiftOP() {
			return GetRuleContext<ShiftOPContext>(0);
		}
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 108;
		EnterRecursionRule(_localctx, 108, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				_localctx = new ScopedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 483;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 480;
						idTplArgs();
						State = 481;
						Match(SCOPE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 485;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 487;
				idTplArgs();
				}
				break;
			case 2:
				{
				_localctx = new NewExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 489;
				Match(NEW);
				State = 491;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 490;
					typespec();
					}
					break;
				}
				State = 494;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 493;
					funcCall();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new PreExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 514;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 496;
					Match(LPAREN);
					State = 504;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COPY:
						{
						State = 497;
						Match(COPY);
						}
						break;
					case MOVE:
						{
						State = 498;
						Match(MOVE);
						}
						break;
					case FORWARD:
						{
						State = 499;
						Match(FORWARD);
						}
						break;
					case EM:
					case QM:
					case AUTO:
					case VOID:
					case BOOL:
					case INT:
					case UINT:
					case ISIZE:
					case USIZE:
					case BYTE:
					case CHAR:
					case CODEPOINT:
					case STRING:
					case FLOAT:
					case I64:
					case I32:
					case I16:
					case I8:
					case U64:
					case U32:
					case U16:
					case U8:
					case B64:
					case B32:
					case B16:
					case B8:
					case F128:
					case F64:
					case F32:
					case F16:
					case VOLATILE:
					case STABLE:
					case CONST:
					case MUTABLE:
					case FUNC:
					case ID:
						{
						State = 501;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EM || _la==QM) {
							{
							State = 500;
							_la = TokenStream.LA(1);
							if ( !(_la==EM || _la==QM) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 503;
						typespec();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 506;
					Match(RPAREN);
					}
					break;
				case SIZEOF:
					{
					State = 507;
					Match(SIZEOF);
					}
					break;
				case DELETE:
					{
					State = 508;
					Match(DELETE);
					State = 511;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LBRACK) {
						{
						State = 509;
						((PreExprContext)_localctx).ary = Match(LBRACK);
						State = 510;
						Match(RBRACK);
						}
					}

					}
					break;
				case DBL_PLUS:
				case DBL_MINUS:
				case AMP:
				case STAR:
				case PLUS:
				case MINUS:
				case EM:
				case TILDE:
					{
					State = 513;
					preOP();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 516;
				expr(21);
				}
				break;
			case 4:
				{
				_localctx = new ThrowExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 517;
				Match(THROW);
				State = 518;
				expr(6);
				}
				break;
			case 5:
				{
				_localctx = new LambdaExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 519;
				Match(FUNC);
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 520;
					capture();
					}
				}

				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 523;
					tplParams();
					}
				}

				State = 526;
				funcTypeDef();
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 527;
					Match(RARROW);
					State = 528;
					typespec();
					}
				}

				State = 531;
				funcBody();
				}
				break;
			case 6:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 533;
				Match(LPAREN);
				State = 534;
				expr(0);
				State = 535;
				Match(RPAREN);
				}
				break;
			case 7:
				{
				_localctx = new WildIdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 537;
				wildId();
				}
				break;
			case 8:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 538;
				lit();
				}
				break;
			case 9:
				{
				_localctx = new IdTplExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 539;
				idTplArgs();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 617;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 615;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						_localctx = new MemPtrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 542;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 543;
						memAccPtrOP();
						State = 544;
						expr(21);
						}
						break;
					case 2:
						{
						_localctx = new PowExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 546;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 547;
						powOP();
						State = 548;
						expr(19);
						}
						break;
					case 3:
						{
						_localctx = new MultExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 550;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 551;
						multOP();
						State = 552;
						expr(19);
						}
						break;
					case 4:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 554;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 555;
						addOP();
						State = 556;
						expr(18);
						}
						break;
					case 5:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 558;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 559;
						shiftOP();
						State = 560;
						expr(17);
						}
						break;
					case 6:
						{
						_localctx = new ComparisonExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 562;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 563;
						cmpOp();
						State = 564;
						expr(16);
						}
						break;
					case 7:
						{
						_localctx = new RelationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 566;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 567;
						relOP();
						State = 568;
						expr(15);
						}
						break;
					case 8:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 570;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 571;
						equalOP();
						State = 572;
						expr(14);
						}
						break;
					case 9:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 574;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 575;
						andOP();
						State = 576;
						expr(13);
						}
						break;
					case 10:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 578;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 579;
						orOP();
						State = 580;
						expr(12);
						}
						break;
					case 11:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 582;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 583;
						Match(TRP_POINT);
						State = 584;
						expr(11);
						}
						break;
					case 12:
						{
						_localctx = new NullCoalesceExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 585;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 586;
						nulCoalOP();
						State = 587;
						expr(10);
						}
						break;
					case 13:
						{
						_localctx = new ConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 589;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 590;
						Match(QM);
						State = 591;
						expr(0);
						State = 592;
						Match(COLON);
						State = 593;
						expr(8);
						}
						break;
					case 14:
						{
						_localctx = new PostExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 595;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 602;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case DBL_PLUS:
						case DBL_MINUS:
							{
							State = 596;
							postOP();
							}
							break;
						case QM_LPAREN:
						case LPAREN:
							{
							State = 597;
							funcCall();
							}
							break;
						case LBRACK:
						case QM_LBRACK:
							{
							State = 598;
							indexCall();
							}
							break;
						case RARROW:
						case QM_POINT:
						case POINT:
							{
							State = 599;
							memAccOP();
							State = 600;
							idTplArgs();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 15:
						{
						_localctx = new ThreeWayConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 604;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 605;
						Match(DBL_QM);
						State = 607;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 606;
								threeWay();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 609;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 613;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
						case 1:
							{
							State = 611;
							Match(COLON);
							State = 612;
							expr(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDefContext[] accessorDef() {
			return GetRuleContexts<AccessorDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDefContext accessorDef(int i) {
			return GetRuleContext<AccessorDefContext>(i);
		}
		public IdAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdAccessorContext idAccessor() {
		IdAccessorContext _localctx = new IdAccessorContext(Context, State);
		EnterRule(_localctx, 110, RULE_idAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			id();
			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 621;
				Match(LCURLY);
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 622;
					accessorDef();
					}
					}
					State = 625;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LBRACK || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (VOLATILE - 104)) | (1L << (STABLE - 104)) | (1L << (CONST - 104)) | (1L << (MUTABLE - 104)) | (1L << (GET - 104)) | (1L << (REFGET - 104)) | (1L << (SET - 104)))) != 0) );
				State = 627;
				Match(RCURLY);
				}
			}

			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 631;
				Match(ASSIGN);
				State = 632;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IdExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprContext idExpr() {
		IdExprContext _localctx = new IdExprContext(Context, State);
		EnterRule(_localctx, 112, RULE_idExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			id();
			State = 638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 636;
				Match(ASSIGN);
				State = 637;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdAccessorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorContext[] idAccessor() {
			return GetRuleContexts<IdAccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorContext idAccessor(int i) {
			return GetRuleContext<IdAccessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public IdAccessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idAccessors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAccessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdAccessorsContext idAccessors() {
		IdAccessorsContext _localctx = new IdAccessorsContext(Context, State);
		EnterRule(_localctx, 114, RULE_idAccessors);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			idAccessor();
			State = 645;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 641;
					Match(COMMA);
					State = 642;
					idAccessor();
					}
					} 
				}
				State = 647;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 648;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExprContext[] idExpr() {
			return GetRuleContexts<IdExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdExprContext idExpr(int i) {
			return GetRuleContext<IdExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public IdExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprsContext idExprs() {
		IdExprsContext _localctx = new IdExprsContext(Context, State);
		EnterRule(_localctx, 116, RULE_idExprs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			idExpr();
			State = 656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 652;
					Match(COMMA);
					State = 653;
					idExpr();
					}
					} 
				}
				State = 658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 659;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdAcorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorsContext idAccessors() {
			return GetRuleContext<IdAccessorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public TypedIdAcorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdAcors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdAcors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdAcorsContext typedIdAcors() {
		TypedIdAcorsContext _localctx = new TypedIdAcorsContext(Context, State);
		EnterRule(_localctx, 118, RULE_typedIdAcors);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			typespec();
			State = 663;
			idAccessors();
			State = 664;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MyllParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALL() { return GetToken(MyllParser.FALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 120, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(CASE);
			State = 667;
			expr(0);
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 668;
				Match(COMMA);
				State = 669;
				expr(0);
				}
				}
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 675;
				Match(COLON);
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CONST - 106)) | (1L << (USING - 106)) | (1L << (ALIAS - 106)) | (1L << (FUNC - 106)) | (1L << (FIELD - 106)) | (1L << (VAR - 106)) | (1L << (LET - 106)) | (1L << (LOOP - 106)) | (1L << (FOR - 106)) | (1L << (DO - 106)) | (1L << (WHILE - 106)) | (1L << (IF - 106)) | (1L << (SWITCH - 106)) | (1L << (BREAK - 106)) | (1L << (RETURN - 106)) | (1L << (TRY - 106)) | (1L << (DEFER - 106)) | (1L << (SIZEOF - 106)) | (1L << (NEW - 106)) | (1L << (DELETE - 106)) | (1L << (THROW - 106)) | (1L << (ID - 106)) | (1L << (NUL - 106)) | (1L << (CLASS_LIT - 106)) | (1L << (BOOL_LIT - 106)) | (1L << (FLOAT_LIT - 106)) | (1L << (HEX_LIT - 106)) | (1L << (OCT_LIT - 106)) | (1L << (BIN_LIT - 106)) | (1L << (INTEGER_LIT - 106)))) != 0)) {
					{
					{
					State = 676;
					levStmt();
					}
					}
					State = 681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FALL) {
					{
					State = 682;
					Match(FALL);
					State = 683;
					Match(SEMI);
					}
				}

				}
				break;
			case LCURLY:
				{
				State = 686;
				Match(LCURLY);
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CONST - 106)) | (1L << (USING - 106)) | (1L << (ALIAS - 106)) | (1L << (FUNC - 106)) | (1L << (FIELD - 106)) | (1L << (VAR - 106)) | (1L << (LET - 106)) | (1L << (LOOP - 106)) | (1L << (FOR - 106)) | (1L << (DO - 106)) | (1L << (WHILE - 106)) | (1L << (IF - 106)) | (1L << (SWITCH - 106)) | (1L << (BREAK - 106)) | (1L << (RETURN - 106)) | (1L << (TRY - 106)) | (1L << (DEFER - 106)) | (1L << (SIZEOF - 106)) | (1L << (NEW - 106)) | (1L << (DELETE - 106)) | (1L << (THROW - 106)) | (1L << (ID - 106)) | (1L << (NUL - 106)) | (1L << (CLASS_LIT - 106)) | (1L << (BOOL_LIT - 106)) | (1L << (FLOAT_LIT - 106)) | (1L << (HEX_LIT - 106)) | (1L << (OCT_LIT - 106)) | (1L << (BIN_LIT - 106)) | (1L << (INTEGER_LIT - 106)))) != 0)) {
					{
					{
					State = 687;
					levStmt();
					}
					}
					State = 692;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FALL) {
					{
					State = 693;
					Match(FALL);
					State = 694;
					Match(SEMI);
					}
				}

				State = 697;
				Match(RCURLY);
				}
				break;
			case PHATRARROW:
				{
				State = 698;
				Match(PHATRARROW);
				State = 699;
				levStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MyllParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 122, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			_la = TokenStream.LA(1);
			if ( !(_la==ELSE || _la==DEFAULT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 720;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 703;
				Match(COLON);
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CONST - 106)) | (1L << (USING - 106)) | (1L << (ALIAS - 106)) | (1L << (FUNC - 106)) | (1L << (FIELD - 106)) | (1L << (VAR - 106)) | (1L << (LET - 106)) | (1L << (LOOP - 106)) | (1L << (FOR - 106)) | (1L << (DO - 106)) | (1L << (WHILE - 106)) | (1L << (IF - 106)) | (1L << (SWITCH - 106)) | (1L << (BREAK - 106)) | (1L << (RETURN - 106)) | (1L << (TRY - 106)) | (1L << (DEFER - 106)) | (1L << (SIZEOF - 106)) | (1L << (NEW - 106)) | (1L << (DELETE - 106)) | (1L << (THROW - 106)) | (1L << (ID - 106)) | (1L << (NUL - 106)) | (1L << (CLASS_LIT - 106)) | (1L << (BOOL_LIT - 106)) | (1L << (FLOAT_LIT - 106)) | (1L << (HEX_LIT - 106)) | (1L << (OCT_LIT - 106)) | (1L << (BIN_LIT - 106)) | (1L << (INTEGER_LIT - 106)))) != 0)) {
					{
					{
					State = 704;
					levStmt();
					}
					}
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LCURLY:
				{
				State = 710;
				Match(LCURLY);
				State = 714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CONST - 106)) | (1L << (USING - 106)) | (1L << (ALIAS - 106)) | (1L << (FUNC - 106)) | (1L << (FIELD - 106)) | (1L << (VAR - 106)) | (1L << (LET - 106)) | (1L << (LOOP - 106)) | (1L << (FOR - 106)) | (1L << (DO - 106)) | (1L << (WHILE - 106)) | (1L << (IF - 106)) | (1L << (SWITCH - 106)) | (1L << (BREAK - 106)) | (1L << (RETURN - 106)) | (1L << (TRY - 106)) | (1L << (DEFER - 106)) | (1L << (SIZEOF - 106)) | (1L << (NEW - 106)) | (1L << (DELETE - 106)) | (1L << (THROW - 106)) | (1L << (ID - 106)) | (1L << (NUL - 106)) | (1L << (CLASS_LIT - 106)) | (1L << (BOOL_LIT - 106)) | (1L << (FLOAT_LIT - 106)) | (1L << (HEX_LIT - 106)) | (1L << (OCT_LIT - 106)) | (1L << (BIN_LIT - 106)) | (1L << (INTEGER_LIT - 106)))) != 0)) {
					{
					{
					State = 711;
					levStmt();
					}
					}
					State = 716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 717;
				Match(RCURLY);
				}
				break;
			case PHATRARROW:
				{
				State = 718;
				Match(PHATRARROW);
				State = 719;
				levStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public InitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitListContext initList() {
		InitListContext _localctx = new InitListContext(Context, State);
		EnterRule(_localctx, 124, RULE_initList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(COLON);
			State = 723;
			id();
			State = 724;
			funcCall();
			State = 731;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 725;
					Match(COMMA);
					State = 726;
					id();
					State = 727;
					funcCall();
					}
					} 
				}
				State = 733;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			State = 735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 734;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public FuncBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncBodyContext funcBody() {
		FuncBodyContext _localctx = new FuncBodyContext(Context, State);
		EnterRule(_localctx, 126, RULE_funcBody);
		try {
			State = 742;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PHATRARROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 737;
				Match(PHATRARROW);
				State = 738;
				expr(0);
				State = 739;
				Match(SEMI);
				}
				break;
			case STRING_LIT:
			case CHAR_LIT:
			case DBL_PLUS:
			case DBL_MINUS:
			case AUTOINDEX:
			case LBRACK:
			case LCURLY:
			case LPAREN:
			case AMP:
			case STAR:
			case PLUS:
			case MINUS:
			case SEMI:
			case EM:
			case TILDE:
			case USCORE:
			case CONST:
			case USING:
			case ALIAS:
			case FUNC:
			case FIELD:
			case VAR:
			case LET:
			case LOOP:
			case FOR:
			case DO:
			case WHILE:
			case IF:
			case SWITCH:
			case BREAK:
			case RETURN:
			case TRY:
			case DEFER:
			case SIZEOF:
			case NEW:
			case DELETE:
			case THROW:
			case ID:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 741;
				levStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDefContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(MyllParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFGET() { return GetToken(MyllParser.REFGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MyllParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		public AccessorDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDefContext accessorDef() {
		AccessorDefContext _localctx = new AccessorDefContext(Context, State);
		EnterRule(_localctx, 128, RULE_accessorDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 744;
				attribBlk();
				}
			}

			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (VOLATILE - 104)) | (1L << (STABLE - 104)) | (1L << (CONST - 104)) | (1L << (MUTABLE - 104)))) != 0)) {
				{
				{
				State = 747;
				qual();
				}
				}
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 753;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (GET - 123)) | (1L << (REFGET - 123)) | (1L << (SET - 123)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 754;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(Context, State);
		EnterRule(_localctx, 130, RULE_funcDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			id();
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 757;
				tplParams();
				}
			}

			State = 761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 760;
				funcTypeDef();
				}
				break;
			}
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RARROW) {
				{
				State = 763;
				Match(RARROW);
				State = 764;
				typespec();
				}
			}

			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 767;
				Match(REQUIRES);
				State = 768;
				typespecsNested();
				}
			}

			State = 771;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(MyllParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		public OpDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpDefContext opDef() {
		OpDefContext _localctx = new OpDefContext(Context, State);
		EnterRule(_localctx, 132, RULE_opDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(STRING_LIT);
			State = 775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 774;
				tplParams();
				}
			}

			State = 778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 777;
				funcTypeDef();
				}
				break;
			}
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RARROW) {
				{
				State = 780;
				Match(RARROW);
				State = 781;
				typespec();
				}
			}

			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 784;
				Match(REQUIRES);
				State = 785;
				typespecsNested();
				}
			}

			State = 788;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondThenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public CondThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condThen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondThenContext condThen() {
		CondThenContext _localctx = new CondThenContext(Context, State);
		EnterRule(_localctx, 134, RULE_condThen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(LPAREN);
			State = 791;
			expr(0);
			State = 792;
			Match(RPAREN);
			State = 793;
			levStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InDeclContext : ParserRuleContext {
		public InDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inDecl; } }
	 
		public InDeclContext() { }
		public virtual void CopyFrom(InDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingDeclContext : InDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MyllParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public UsingDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpDeclContext : InDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(MyllParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MyllParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MyllParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(MyllParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(MyllParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(MyllParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(MyllParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpDefContext[] opDef() {
			return GetRuleContexts<OpDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpDefContext opDef(int i) {
			return GetRuleContext<OpDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		public OpDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasDeclContext : InDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(MyllParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public AliasDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConceptDeclContext : InDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCEPT() { return GetToken(MyllParser.CONCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext[] levDecl() {
			return GetRuleContexts<LevDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext levDecl(int i) {
			return GetRuleContext<LevDeclContext>(i);
		}
		public ConceptDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructDeclContext : InDeclContext {
		public IToken v;
		public TypespecsNestedContext bases;
		public TypespecsNestedContext reqs;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(MyllParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MyllParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MyllParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext[] levDecl() {
			return GetRuleContexts<LevDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext levDecl(int i) {
			return GetRuleContext<LevDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext[] typespecsNested() {
			return GetRuleContexts<TypespecsNestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested(int i) {
			return GetRuleContext<TypespecsNestedContext>(i);
		}
		public StructDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclContext : InDeclContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(MyllParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MyllParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(MyllParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdAcorsContext[] typedIdAcors() {
			return GetRuleContexts<TypedIdAcorsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdAcorsContext typedIdAcors(int i) {
			return GetRuleContext<TypedIdAcorsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		public VariableDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtorDeclContext : InDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MyllParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CTOR() { return GetToken(MyllParser.CTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MyllParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MyllParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(MyllParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(MyllParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitListContext initList() {
			return GetRuleContext<InitListContext>(0);
		}
		public CtorDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtorDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AspectDeclContext : InDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASPECT() { return GetToken(MyllParser.ASPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AspectDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAspectDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnumDeclContext : InDeclContext {
		public TypespecBasicContext bases;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MyllParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdExprsContext idExprs() {
			return GetRuleContext<IdExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecBasicContext typespecBasic() {
			return GetRuleContext<TypespecBasicContext>(0);
		}
		public EnumDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceContext : InDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(MyllParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext[] levDecl() {
			return GetRuleContexts<LevDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevDeclContext levDecl(int i) {
			return GetRuleContext<LevDeclContext>(i);
		}
		public NamespaceContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DtorDeclContext : InDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTOR() { return GetToken(MyllParser.DTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		public DtorDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDtorDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclContext : InDeclContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(MyllParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(MyllParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncDefContext[] funcDef() {
			return GetRuleContexts<FuncDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDefContext funcDef(int i) {
			return GetRuleContext<FuncDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		public FunctionDeclContext(InDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InDeclContext inDecl() {
		InDeclContext _localctx = new InDeclContext(Context, State);
		EnterRule(_localctx, 136, RULE_inDecl);
		int _la;
		try {
			State = 983;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				_localctx = new NamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 795;
				Match(NAMESPACE);
				State = 796;
				id();
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SCOPE) {
					{
					{
					State = 797;
					Match(SCOPE);
					State = 798;
					id();
					}
					}
					State = 803;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 814;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMI:
					{
					State = 804;
					Match(SEMI);
					}
					break;
				case COLON:
					{
					State = 805;
					Match(COLON);
					}
					break;
				case LCURLY:
					{
					State = 806;
					Match(LCURLY);
					State = 810;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NAMESPACE - 101)) | (1L << (CONST - 101)) | (1L << (USING - 101)) | (1L << (ALIAS - 101)) | (1L << (UNION - 101)) | (1L << (STRUCT - 101)) | (1L << (CLASS - 101)) | (1L << (CTOR - 101)) | (1L << (DTOR - 101)) | (1L << (FUNC - 101)) | (1L << (PROC - 101)) | (1L << (METHOD - 101)) | (1L << (ENUM - 101)) | (1L << (ASPECT - 101)) | (1L << (CONCEPT - 101)) | (1L << (FIELD - 101)) | (1L << (OPERATOR - 101)) | (1L << (VAR - 101)) | (1L << (LET - 101)) | (1L << (DEFAULT - 101)) | (1L << (CONVERT - 101)) | (1L << (FORWARD - 101)) | (1L << (MOVE - 101)) | (1L << (COPY - 101)))) != 0)) {
						{
						{
						State = 807;
						levDecl();
						}
						}
						State = 812;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 813;
					Match(RCURLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new StructDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 816;
				((StructDeclContext)_localctx).v = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (UNION - 110)) | (1L << (STRUCT - 110)) | (1L << (CLASS - 110)))) != 0)) ) {
					((StructDeclContext)_localctx).v = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 817;
				id();
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 818;
					tplParams();
					}
				}

				State = 823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 821;
					Match(COLON);
					State = 822;
					((StructDeclContext)_localctx).bases = typespecsNested();
					}
				}

				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRES) {
					{
					State = 825;
					Match(REQUIRES);
					State = 826;
					((StructDeclContext)_localctx).reqs = typespecsNested();
					}
				}

				State = 829;
				Match(LCURLY);
				State = 833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NAMESPACE - 101)) | (1L << (CONST - 101)) | (1L << (USING - 101)) | (1L << (ALIAS - 101)) | (1L << (UNION - 101)) | (1L << (STRUCT - 101)) | (1L << (CLASS - 101)) | (1L << (CTOR - 101)) | (1L << (DTOR - 101)) | (1L << (FUNC - 101)) | (1L << (PROC - 101)) | (1L << (METHOD - 101)) | (1L << (ENUM - 101)) | (1L << (ASPECT - 101)) | (1L << (CONCEPT - 101)) | (1L << (FIELD - 101)) | (1L << (OPERATOR - 101)) | (1L << (VAR - 101)) | (1L << (LET - 101)) | (1L << (DEFAULT - 101)) | (1L << (CONVERT - 101)) | (1L << (FORWARD - 101)) | (1L << (MOVE - 101)) | (1L << (COPY - 101)))) != 0)) {
					{
					{
					State = 830;
					levDecl();
					}
					}
					State = 835;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 836;
				Match(RCURLY);
				}
				break;
			case 3:
				_localctx = new ConceptDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 838;
				Match(CONCEPT);
				State = 839;
				id();
				State = 841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 840;
					tplParams();
					}
				}

				State = 845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 843;
					Match(COLON);
					State = 844;
					typespecsNested();
					}
				}

				State = 847;
				Match(LCURLY);
				State = 851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NAMESPACE - 101)) | (1L << (CONST - 101)) | (1L << (USING - 101)) | (1L << (ALIAS - 101)) | (1L << (UNION - 101)) | (1L << (STRUCT - 101)) | (1L << (CLASS - 101)) | (1L << (CTOR - 101)) | (1L << (DTOR - 101)) | (1L << (FUNC - 101)) | (1L << (PROC - 101)) | (1L << (METHOD - 101)) | (1L << (ENUM - 101)) | (1L << (ASPECT - 101)) | (1L << (CONCEPT - 101)) | (1L << (FIELD - 101)) | (1L << (OPERATOR - 101)) | (1L << (VAR - 101)) | (1L << (LET - 101)) | (1L << (DEFAULT - 101)) | (1L << (CONVERT - 101)) | (1L << (FORWARD - 101)) | (1L << (MOVE - 101)) | (1L << (COPY - 101)))) != 0)) {
					{
					{
					State = 848;
					levDecl();
					}
					}
					State = 853;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 854;
				Match(RCURLY);
				}
				break;
			case 4:
				_localctx = new AspectDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 856;
				Match(ASPECT);
				State = 857;
				id();
				}
				break;
			case 5:
				_localctx = new EnumDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 858;
				Match(ENUM);
				State = 859;
				id();
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 860;
					Match(COLON);
					State = 861;
					((EnumDeclContext)_localctx).bases = typespecBasic();
					}
				}

				State = 864;
				Match(LCURLY);
				State = 865;
				idExprs();
				State = 866;
				Match(RCURLY);
				}
				break;
			case 6:
				_localctx = new FunctionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 868;
				((FunctionDeclContext)_localctx).v = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (PROC - 115)) | (1L << (METHOD - 115)))) != 0)) ) {
					((FunctionDeclContext)_localctx).v = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 878;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 869;
					funcDef();
					}
					break;
				case LCURLY:
					{
					State = 870;
					Match(LCURLY);
					State = 874;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ID) {
						{
						{
						State = 871;
						funcDef();
						}
						}
						State = 876;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 877;
					Match(RCURLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				_localctx = new OpDeclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 904;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
				case 1:
					{
					State = 880;
					_la = TokenStream.LA(1);
					if ( !(_la==MOVE || _la==COPY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 881;
					Match(OPERATOR);
					State = 883;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
					case 1:
						{
						State = 882;
						Match(STRING_LIT);
						}
						break;
					}
					State = 886;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
					case 1:
						{
						State = 885;
						id();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 888;
					Match(CONVERT);
					State = 889;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (PROC - 115)) | (1L << (METHOD - 115)) | (1L << (OPERATOR - 115)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 890;
					Match(RARROW);
					State = 891;
					typespec();
					}
					break;
				case 3:
					{
					State = 892;
					Match(OPERATOR);
					State = 893;
					_la = TokenStream.LA(1);
					if ( !(_la==MOVE || _la==COPY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 895;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
					case 1:
						{
						State = 894;
						Match(STRING_LIT);
						}
						break;
					}
					State = 898;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
					case 1:
						{
						State = 897;
						id();
						}
						break;
					}
					}
					break;
				case 4:
					{
					State = 900;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (PROC - 115)) | (1L << (METHOD - 115)) | (1L << (OPERATOR - 115)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 901;
					Match(CONVERT);
					State = 902;
					Match(RARROW);
					State = 903;
					typespec();
					}
					break;
				}
				State = 906;
				funcBody();
				}
				break;
			case 8:
				_localctx = new OpDeclContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 907;
				Match(OPERATOR);
				State = 917;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LIT:
					{
					State = 908;
					opDef();
					}
					break;
				case LCURLY:
					{
					State = 909;
					Match(LCURLY);
					State = 913;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==STRING_LIT) {
						{
						{
						State = 910;
						opDef();
						}
						}
						State = 915;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 916;
					Match(RCURLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				_localctx = new UsingDeclContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 919;
				Match(USING);
				State = 920;
				typespecsNested();
				State = 921;
				Match(SEMI);
				}
				break;
			case 10:
				_localctx = new AliasDeclContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 923;
				Match(ALIAS);
				State = 924;
				id();
				State = 925;
				Match(ASSIGN);
				State = 926;
				typespec();
				State = 927;
				Match(SEMI);
				}
				break;
			case 11:
				_localctx = new VariableDeclContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 929;
				((VariableDeclContext)_localctx).v = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CONST - 106)) | (1L << (FIELD - 106)) | (1L << (VAR - 106)) | (1L << (LET - 106)))) != 0)) ) {
					((VariableDeclContext)_localctx).v = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 939;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO:
				case VOID:
				case BOOL:
				case INT:
				case UINT:
				case ISIZE:
				case USIZE:
				case BYTE:
				case CHAR:
				case CODEPOINT:
				case STRING:
				case FLOAT:
				case I64:
				case I32:
				case I16:
				case I8:
				case U64:
				case U32:
				case U16:
				case U8:
				case B64:
				case B32:
				case B16:
				case B8:
				case F128:
				case F64:
				case F32:
				case F16:
				case VOLATILE:
				case STABLE:
				case CONST:
				case MUTABLE:
				case FUNC:
				case ID:
					{
					State = 930;
					typedIdAcors();
					}
					break;
				case LCURLY:
					{
					State = 931;
					Match(LCURLY);
					State = 935;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (AUTO - 73)) | (1L << (VOID - 73)) | (1L << (BOOL - 73)) | (1L << (INT - 73)) | (1L << (UINT - 73)) | (1L << (ISIZE - 73)) | (1L << (USIZE - 73)) | (1L << (BYTE - 73)) | (1L << (CHAR - 73)) | (1L << (CODEPOINT - 73)) | (1L << (STRING - 73)) | (1L << (FLOAT - 73)) | (1L << (I64 - 73)) | (1L << (I32 - 73)) | (1L << (I16 - 73)) | (1L << (I8 - 73)) | (1L << (U64 - 73)) | (1L << (U32 - 73)) | (1L << (U16 - 73)) | (1L << (U8 - 73)) | (1L << (B64 - 73)) | (1L << (B32 - 73)) | (1L << (B16 - 73)) | (1L << (B8 - 73)) | (1L << (F128 - 73)) | (1L << (F64 - 73)) | (1L << (F32 - 73)) | (1L << (F16 - 73)) | (1L << (VOLATILE - 73)) | (1L << (STABLE - 73)) | (1L << (CONST - 73)) | (1L << (MUTABLE - 73)) | (1L << (FUNC - 73)))) != 0) || _la==ID) {
						{
						{
						State = 932;
						typedIdAcors();
						}
						}
						State = 937;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 938;
					Match(RCURLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new CtorDeclContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 974;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
				case 1:
					{
					State = 941;
					Match(DEFAULT);
					State = 942;
					Match(CTOR);
					}
					break;
				case 2:
					{
					State = 943;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (FORWARD - 156)) | (1L << (MOVE - 156)) | (1L << (COPY - 156)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 944;
					Match(CTOR);
					State = 946;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
					case 1:
						{
						State = 945;
						id();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 948;
					Match(CONVERT);
					State = 949;
					Match(CTOR);
					State = 950;
					typespec();
					State = 952;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
					case 1:
						{
						State = 951;
						id();
						}
						break;
					}
					}
					break;
				case 4:
					{
					State = 954;
					Match(CTOR);
					State = 955;
					Match(DEFAULT);
					}
					break;
				case 5:
					{
					State = 956;
					Match(CTOR);
					State = 957;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (FORWARD - 156)) | (1L << (MOVE - 156)) | (1L << (COPY - 156)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 959;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
					case 1:
						{
						State = 958;
						id();
						}
						break;
					}
					}
					break;
				case 6:
					{
					State = 961;
					Match(CTOR);
					State = 962;
					Match(CONVERT);
					State = 963;
					typespec();
					State = 965;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
					case 1:
						{
						State = 964;
						id();
						}
						break;
					}
					}
					break;
				case 7:
					{
					State = 967;
					Match(CTOR);
					State = 969;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
					case 1:
						{
						State = 968;
						funcTypeDef();
						}
						break;
					}
					State = 972;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLON) {
						{
						State = 971;
						initList();
						}
					}

					}
					break;
				}
				State = 976;
				funcBody();
				}
				break;
			case 13:
				_localctx = new DtorDeclContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 977;
				Match(DTOR);
				State = 980;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
				case 1:
					{
					State = 978;
					Match(LPAREN);
					State = 979;
					Match(RPAREN);
					}
					break;
				}
				State = 982;
				funcBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InStmtContext : ParserRuleContext {
		public InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inStmt; } }
	 
		public InStmtContext() { }
		public virtual void CopyFrom(InStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchStmtContext : InStmtContext {
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(MyllParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimesStmtContext : InStmtContext {
		public ExprContext count;
		public IdContext name;
		public LevStmtContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(MyllParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		public TimesStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggrAssignStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggrAssignOPContext aggrAssignOP() {
			return GetRuleContext<AggrAssignOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public AggrAssignStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStmtContext : InStmtContext {
		public LevStmtContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(MyllParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public LoopStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		public BlockStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnIfStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MyllParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MyllParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ReturnIfStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileStmtContext : InStmtContext {
		public LevStmtContext body;
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyllParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DoWhileStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ExpressionStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiAssignStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignOPContext[] assignOP() {
			return GetRuleContexts<AssignOPContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignOPContext assignOP(int i) {
			return GetRuleContext<AssignOPContext>(i);
		}
		public MultiAssignStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(MyllParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(MyllParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondThenContext[] condThen() {
			return GetRuleContexts<CondThenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondThenContext condThen(int i) {
			return GetRuleContext<CondThenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(MyllParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(MyllParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public IfStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : InStmtContext {
		public ExprContext cond;
		public LevStmtContext body;
		public LevStmtContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyllParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		public WhileStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableStmtContext : InStmtContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(MyllParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MyllParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(MyllParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdAcorsContext[] typedIdAcors() {
			return GetRuleContexts<TypedIdAcorsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdAcorsContext typedIdAcors(int i) {
			return GetRuleContext<TypedIdAcorsContext>(i);
		}
		public VariableStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MyllParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		public BreakStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(MyllParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public AliasStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MyllParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public UsingStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public EmptyStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MyllParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ThrowStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : InStmtContext {
		public LevStmtContext init;
		public ExprContext cond;
		public ExprContext iter;
		public LevStmtContext body;
		public LevStmtContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MyllParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeferStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFER() { return GetToken(MyllParser.DEFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt() {
			return GetRuleContext<LevStmtContext>(0);
		}
		public DeferStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeferStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryCatchStmtContext : InStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(MyllParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext[] levStmt() {
			return GetRuleContexts<LevStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevStmtContext levStmt(int i) {
			return GetRuleContext<LevStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(MyllParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(MyllParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext[] funcTypeDef() {
			return GetRuleContexts<FuncTypeDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef(int i) {
			return GetRuleContext<FuncTypeDefContext>(i);
		}
		public TryCatchStmtContext(InStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InStmtContext inStmt() {
		InStmtContext _localctx = new InStmtContext(Context, State);
		EnterRule(_localctx, 138, RULE_inStmt);
		int _la;
		try {
			int _alt;
			State = 1148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				_localctx = new EmptyStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 985;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 986;
				Match(LCURLY);
				State = 990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CONST - 106)) | (1L << (USING - 106)) | (1L << (ALIAS - 106)) | (1L << (FUNC - 106)) | (1L << (FIELD - 106)) | (1L << (VAR - 106)) | (1L << (LET - 106)) | (1L << (LOOP - 106)) | (1L << (FOR - 106)) | (1L << (DO - 106)) | (1L << (WHILE - 106)) | (1L << (IF - 106)) | (1L << (SWITCH - 106)) | (1L << (BREAK - 106)) | (1L << (RETURN - 106)) | (1L << (TRY - 106)) | (1L << (DEFER - 106)) | (1L << (SIZEOF - 106)) | (1L << (NEW - 106)) | (1L << (DELETE - 106)) | (1L << (THROW - 106)) | (1L << (ID - 106)) | (1L << (NUL - 106)) | (1L << (CLASS_LIT - 106)) | (1L << (BOOL_LIT - 106)) | (1L << (FLOAT_LIT - 106)) | (1L << (HEX_LIT - 106)) | (1L << (OCT_LIT - 106)) | (1L << (BIN_LIT - 106)) | (1L << (INTEGER_LIT - 106)))) != 0)) {
					{
					{
					State = 987;
					levStmt();
					}
					}
					State = 992;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 993;
				Match(RCURLY);
				}
				break;
			case 3:
				_localctx = new UsingStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 994;
				Match(USING);
				State = 995;
				typespecsNested();
				State = 996;
				Match(SEMI);
				}
				break;
			case 4:
				_localctx = new AliasStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 998;
				Match(ALIAS);
				State = 999;
				id();
				State = 1000;
				Match(ASSIGN);
				State = 1001;
				typespec();
				State = 1002;
				Match(SEMI);
				}
				break;
			case 5:
				_localctx = new VariableStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1004;
				((VariableStmtContext)_localctx).v = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CONST - 106)) | (1L << (FIELD - 106)) | (1L << (VAR - 106)) | (1L << (LET - 106)))) != 0)) ) {
					((VariableStmtContext)_localctx).v = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1014;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LCURLY:
					{
					State = 1005;
					Match(LCURLY);
					State = 1009;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (AUTO - 73)) | (1L << (VOID - 73)) | (1L << (BOOL - 73)) | (1L << (INT - 73)) | (1L << (UINT - 73)) | (1L << (ISIZE - 73)) | (1L << (USIZE - 73)) | (1L << (BYTE - 73)) | (1L << (CHAR - 73)) | (1L << (CODEPOINT - 73)) | (1L << (STRING - 73)) | (1L << (FLOAT - 73)) | (1L << (I64 - 73)) | (1L << (I32 - 73)) | (1L << (I16 - 73)) | (1L << (I8 - 73)) | (1L << (U64 - 73)) | (1L << (U32 - 73)) | (1L << (U16 - 73)) | (1L << (U8 - 73)) | (1L << (B64 - 73)) | (1L << (B32 - 73)) | (1L << (B16 - 73)) | (1L << (B8 - 73)) | (1L << (F128 - 73)) | (1L << (F64 - 73)) | (1L << (F32 - 73)) | (1L << (F16 - 73)) | (1L << (VOLATILE - 73)) | (1L << (STABLE - 73)) | (1L << (CONST - 73)) | (1L << (MUTABLE - 73)) | (1L << (FUNC - 73)))) != 0) || _la==ID) {
						{
						{
						State = 1006;
						typedIdAcors();
						}
						}
						State = 1011;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1012;
					Match(RCURLY);
					}
					break;
				case AUTO:
				case VOID:
				case BOOL:
				case INT:
				case UINT:
				case ISIZE:
				case USIZE:
				case BYTE:
				case CHAR:
				case CODEPOINT:
				case STRING:
				case FLOAT:
				case I64:
				case I32:
				case I16:
				case I8:
				case U64:
				case U32:
				case U16:
				case U8:
				case B64:
				case B32:
				case B16:
				case B8:
				case F128:
				case F64:
				case F32:
				case F16:
				case VOLATILE:
				case STABLE:
				case CONST:
				case MUTABLE:
				case FUNC:
				case ID:
					{
					State = 1013;
					typedIdAcors();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1016;
				Match(RETURN);
				State = 1018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (SIZEOF - 115)) | (1L << (NEW - 115)) | (1L << (DELETE - 115)) | (1L << (THROW - 115)) | (1L << (ID - 115)) | (1L << (NUL - 115)) | (1L << (CLASS_LIT - 115)) | (1L << (BOOL_LIT - 115)) | (1L << (FLOAT_LIT - 115)) | (1L << (HEX_LIT - 115)) | (1L << (OCT_LIT - 115)) | (1L << (BIN_LIT - 115)) | (1L << (INTEGER_LIT - 115)))) != 0)) {
					{
					State = 1017;
					expr(0);
					}
				}

				State = 1020;
				Match(SEMI);
				}
				break;
			case 7:
				_localctx = new ReturnIfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1021;
				Match(DO);
				State = 1022;
				Match(RETURN);
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (SIZEOF - 115)) | (1L << (NEW - 115)) | (1L << (DELETE - 115)) | (1L << (THROW - 115)) | (1L << (ID - 115)) | (1L << (NUL - 115)) | (1L << (CLASS_LIT - 115)) | (1L << (BOOL_LIT - 115)) | (1L << (FLOAT_LIT - 115)) | (1L << (HEX_LIT - 115)) | (1L << (OCT_LIT - 115)) | (1L << (BIN_LIT - 115)) | (1L << (INTEGER_LIT - 115)))) != 0)) {
					{
					State = 1023;
					expr(0);
					}
				}

				State = 1026;
				Match(IF);
				State = 1027;
				Match(LPAREN);
				State = 1028;
				expr(0);
				State = 1029;
				Match(RPAREN);
				State = 1030;
				Match(SEMI);
				}
				break;
			case 8:
				_localctx = new ThrowStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1032;
				Match(THROW);
				State = 1033;
				expr(0);
				State = 1034;
				Match(SEMI);
				}
				break;
			case 9:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1036;
				Match(BREAK);
				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER_LIT) {
					{
					State = 1037;
					Match(INTEGER_LIT);
					}
				}

				State = 1040;
				Match(SEMI);
				}
				break;
			case 10:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1041;
				Match(IF);
				State = 1042;
				condThen();
				State = 1048;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1043;
						Match(ELSE);
						State = 1044;
						Match(IF);
						State = 1045;
						condThen();
						}
						} 
					}
					State = 1050;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
				}
				State = 1053;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
				case 1:
					{
					State = 1051;
					Match(ELSE);
					State = 1052;
					levStmt();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1055;
				Match(SWITCH);
				State = 1056;
				Match(LPAREN);
				State = 1057;
				((SwitchStmtContext)_localctx).cond = expr(0);
				State = 1058;
				Match(RPAREN);
				State = 1059;
				Match(LCURLY);
				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1060;
					caseBlock();
					}
					}
					State = 1063;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CASE );
				State = 1066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE || _la==DEFAULT) {
					{
					State = 1065;
					defaultBlock();
					}
				}

				State = 1068;
				Match(RCURLY);
				}
				break;
			case 12:
				_localctx = new LoopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1070;
				Match(LOOP);
				State = 1071;
				((LoopStmtContext)_localctx).body = levStmt();
				}
				break;
			case 13:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1072;
				Match(FOR);
				State = 1073;
				Match(LPAREN);
				State = 1074;
				((ForStmtContext)_localctx).init = levStmt();
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (SIZEOF - 115)) | (1L << (NEW - 115)) | (1L << (DELETE - 115)) | (1L << (THROW - 115)) | (1L << (ID - 115)) | (1L << (NUL - 115)) | (1L << (CLASS_LIT - 115)) | (1L << (BOOL_LIT - 115)) | (1L << (FLOAT_LIT - 115)) | (1L << (HEX_LIT - 115)) | (1L << (OCT_LIT - 115)) | (1L << (BIN_LIT - 115)) | (1L << (INTEGER_LIT - 115)))) != 0)) {
					{
					State = 1075;
					((ForStmtContext)_localctx).cond = expr(0);
					}
				}

				State = 1078;
				Match(SEMI);
				State = 1080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (FUNC - 115)) | (1L << (SIZEOF - 115)) | (1L << (NEW - 115)) | (1L << (DELETE - 115)) | (1L << (THROW - 115)) | (1L << (ID - 115)) | (1L << (NUL - 115)) | (1L << (CLASS_LIT - 115)) | (1L << (BOOL_LIT - 115)) | (1L << (FLOAT_LIT - 115)) | (1L << (HEX_LIT - 115)) | (1L << (OCT_LIT - 115)) | (1L << (BIN_LIT - 115)) | (1L << (INTEGER_LIT - 115)))) != 0)) {
					{
					State = 1079;
					((ForStmtContext)_localctx).iter = expr(0);
					}
				}

				State = 1082;
				Match(RPAREN);
				State = 1083;
				((ForStmtContext)_localctx).body = levStmt();
				State = 1086;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
				case 1:
					{
					State = 1084;
					Match(ELSE);
					State = 1085;
					((ForStmtContext)_localctx).els = levStmt();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1088;
				Match(WHILE);
				State = 1089;
				Match(LPAREN);
				State = 1090;
				((WhileStmtContext)_localctx).cond = expr(0);
				State = 1091;
				Match(RPAREN);
				State = 1092;
				((WhileStmtContext)_localctx).body = levStmt();
				State = 1095;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
				case 1:
					{
					State = 1093;
					Match(ELSE);
					State = 1094;
					((WhileStmtContext)_localctx).els = levStmt();
					}
					break;
				}
				}
				break;
			case 15:
				_localctx = new DoWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1097;
				Match(DO);
				State = 1098;
				((DoWhileStmtContext)_localctx).body = levStmt();
				State = 1099;
				Match(WHILE);
				State = 1100;
				Match(LPAREN);
				State = 1101;
				((DoWhileStmtContext)_localctx).cond = expr(0);
				State = 1102;
				Match(RPAREN);
				}
				break;
			case 16:
				_localctx = new TimesStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DO) {
					{
					State = 1104;
					Match(DO);
					}
				}

				State = 1107;
				((TimesStmtContext)_localctx).count = expr(0);
				State = 1108;
				Match(TIMES);
				State = 1114;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
				case 1:
					{
					State = 1109;
					((TimesStmtContext)_localctx).name = id();
					State = 1112;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
					case 1:
						{
						State = 1110;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1111;
						Match(INTEGER_LIT);
						}
						break;
					}
					}
					break;
				}
				State = 1116;
				((TimesStmtContext)_localctx).body = levStmt();
				}
				break;
			case 17:
				_localctx = new TryCatchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1118;
				Match(TRY);
				State = 1119;
				levStmt();
				State = 1124;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1120;
						Match(CATCH);
						State = 1121;
						funcTypeDef();
						State = 1122;
						levStmt();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1126;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 18:
				_localctx = new DeferStmtContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1128;
				Match(DEFER);
				State = 1129;
				levStmt();
				}
				break;
			case 19:
				_localctx = new MultiAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1130;
				expr(0);
				State = 1134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1131;
					assignOP();
					State = 1132;
					expr(0);
					}
					}
					State = 1136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ASSIGN );
				State = 1138;
				Match(SEMI);
				}
				break;
			case 20:
				_localctx = new AggrAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1140;
				expr(0);
				State = 1141;
				aggrAssignOP();
				State = 1142;
				expr(0);
				State = 1143;
				Match(SEMI);
				}
				break;
			case 21:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1145;
				expr(0);
				State = 1146;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 54: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 23);
		case 14: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,169,1151,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,3,0,142,
		8,0,1,0,5,0,145,8,0,10,0,12,0,148,9,0,1,0,5,0,151,8,0,10,0,12,0,154,9,
		0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,164,8,2,10,2,12,2,167,9,2,1,2,3,
		2,170,8,2,1,2,1,2,1,3,1,3,1,3,5,3,177,8,3,10,3,12,3,180,9,3,1,3,1,3,1,
		3,1,3,1,3,1,3,3,3,188,8,3,1,3,3,3,191,8,3,1,4,3,4,194,8,4,1,4,1,4,1,5,
		1,5,1,5,1,5,5,5,202,8,5,10,5,12,5,205,9,5,1,5,3,5,208,8,5,1,5,1,5,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,5,6,219,8,6,10,6,12,6,222,9,6,1,6,3,6,225,8,6,
		1,6,1,6,3,6,229,8,6,1,7,1,7,1,7,1,7,1,7,3,7,236,8,7,1,8,1,8,1,9,1,9,1,
		10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,3,14,254,8,14,
		1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
		1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
		3,28,284,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
		34,1,35,1,35,1,36,5,36,301,8,36,10,36,12,36,304,9,36,1,36,1,36,1,36,3,
		36,309,8,36,1,36,3,36,312,8,36,1,36,3,36,315,8,36,1,37,1,37,3,37,319,8,
		37,1,38,5,38,322,8,38,10,38,12,38,325,9,38,1,38,1,38,5,38,329,8,38,10,
		38,12,38,332,9,38,1,38,1,38,5,38,336,8,38,10,38,12,38,339,9,38,1,38,1,
		38,1,38,5,38,344,8,38,10,38,12,38,347,9,38,3,38,349,8,38,1,39,1,39,1,39,
		1,39,1,39,1,39,3,39,357,8,39,1,40,1,40,1,40,3,40,362,8,40,1,41,1,41,1,
		41,5,41,367,8,41,10,41,12,41,370,9,41,1,41,1,41,3,41,374,8,41,1,42,1,42,
		1,42,5,42,379,8,42,10,42,12,42,382,9,42,1,42,3,42,385,8,42,1,43,1,43,1,
		43,3,43,390,8,43,1,43,1,43,1,44,1,44,1,44,5,44,397,8,44,10,44,12,44,400,
		9,44,1,44,3,44,403,8,44,1,45,1,45,3,45,407,8,45,1,45,1,45,1,46,1,46,1,
		46,1,46,1,47,1,47,3,47,417,8,47,1,48,1,48,1,48,1,48,5,48,423,8,48,10,48,
		12,48,426,9,48,1,48,3,48,429,8,48,3,48,431,8,48,1,48,1,48,1,49,1,49,3,
		49,437,8,49,1,50,1,50,1,50,1,50,5,50,443,8,50,10,50,12,50,446,9,50,1,50,
		3,50,449,8,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,457,8,51,10,51,12,51,
		460,9,51,1,51,3,51,463,8,51,1,51,1,51,1,52,1,52,3,52,469,8,52,1,52,1,52,
		1,52,1,53,1,53,3,53,476,8,53,1,53,1,53,1,54,1,54,1,54,1,54,4,54,484,8,
		54,11,54,12,54,485,1,54,1,54,1,54,1,54,3,54,492,8,54,1,54,3,54,495,8,54,
		1,54,1,54,1,54,1,54,1,54,3,54,502,8,54,1,54,3,54,505,8,54,1,54,1,54,1,
		54,1,54,1,54,3,54,512,8,54,1,54,3,54,515,8,54,1,54,1,54,1,54,1,54,1,54,
		3,54,522,8,54,1,54,3,54,525,8,54,1,54,1,54,1,54,3,54,530,8,54,1,54,1,54,
		1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,541,8,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,
		54,603,8,54,1,54,1,54,1,54,4,54,608,8,54,11,54,12,54,609,1,54,1,54,3,54,
		614,8,54,5,54,616,8,54,10,54,12,54,619,9,54,1,55,1,55,1,55,4,55,624,8,
		55,11,55,12,55,625,1,55,1,55,3,55,630,8,55,1,55,1,55,3,55,634,8,55,1,56,
		1,56,1,56,3,56,639,8,56,1,57,1,57,1,57,5,57,644,8,57,10,57,12,57,647,9,
		57,1,57,3,57,650,8,57,1,58,1,58,1,58,5,58,655,8,58,10,58,12,58,658,9,58,
		1,58,3,58,661,8,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,5,60,671,8,
		60,10,60,12,60,674,9,60,1,60,1,60,5,60,678,8,60,10,60,12,60,681,9,60,1,
		60,1,60,3,60,685,8,60,1,60,1,60,5,60,689,8,60,10,60,12,60,692,9,60,1,60,
		1,60,3,60,696,8,60,1,60,1,60,1,60,3,60,701,8,60,1,61,1,61,1,61,5,61,706,
		8,61,10,61,12,61,709,9,61,1,61,1,61,5,61,713,8,61,10,61,12,61,716,9,61,
		1,61,1,61,1,61,3,61,721,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,730,
		8,62,10,62,12,62,733,9,62,1,62,3,62,736,8,62,1,63,1,63,1,63,1,63,1,63,
		3,63,743,8,63,1,64,3,64,746,8,64,1,64,5,64,749,8,64,10,64,12,64,752,9,
		64,1,64,1,64,1,64,1,65,1,65,3,65,759,8,65,1,65,3,65,762,8,65,1,65,1,65,
		3,65,766,8,65,1,65,1,65,3,65,770,8,65,1,65,1,65,1,66,1,66,3,66,776,8,66,
		1,66,3,66,779,8,66,1,66,1,66,3,66,783,8,66,1,66,1,66,3,66,787,8,66,1,66,
		1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,5,68,800,8,68,10,68,
		12,68,803,9,68,1,68,1,68,1,68,1,68,5,68,809,8,68,10,68,12,68,812,9,68,
		1,68,3,68,815,8,68,1,68,1,68,1,68,3,68,820,8,68,1,68,1,68,3,68,824,8,68,
		1,68,1,68,3,68,828,8,68,1,68,1,68,5,68,832,8,68,10,68,12,68,835,9,68,1,
		68,1,68,1,68,1,68,1,68,3,68,842,8,68,1,68,1,68,3,68,846,8,68,1,68,1,68,
		5,68,850,8,68,10,68,12,68,853,9,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
		1,68,3,68,863,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,873,8,
		68,10,68,12,68,876,9,68,1,68,3,68,879,8,68,1,68,1,68,1,68,3,68,884,8,68,
		1,68,3,68,887,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,896,8,68,1,
		68,3,68,899,8,68,1,68,1,68,1,68,1,68,3,68,905,8,68,1,68,1,68,1,68,1,68,
		1,68,5,68,912,8,68,10,68,12,68,915,9,68,1,68,3,68,918,8,68,1,68,1,68,1,
		68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,934,8,68,
		10,68,12,68,937,9,68,1,68,3,68,940,8,68,1,68,1,68,1,68,1,68,1,68,3,68,
		947,8,68,1,68,1,68,1,68,1,68,3,68,953,8,68,1,68,1,68,1,68,1,68,1,68,3,
		68,960,8,68,1,68,1,68,1,68,1,68,3,68,966,8,68,1,68,1,68,3,68,970,8,68,
		1,68,3,68,973,8,68,3,68,975,8,68,1,68,1,68,1,68,1,68,3,68,981,8,68,1,68,
		3,68,984,8,68,1,69,1,69,1,69,5,69,989,8,69,10,69,12,69,992,9,69,1,69,1,
		69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,1008,
		8,69,10,69,12,69,1011,9,69,1,69,1,69,3,69,1015,8,69,1,69,1,69,3,69,1019,
		8,69,1,69,1,69,1,69,1,69,3,69,1025,8,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,3,69,1039,8,69,1,69,1,69,1,69,1,69,1,69,
		1,69,5,69,1047,8,69,10,69,12,69,1050,9,69,1,69,1,69,3,69,1054,8,69,1,69,
		1,69,1,69,1,69,1,69,1,69,4,69,1062,8,69,11,69,12,69,1063,1,69,3,69,1067,
		8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1077,8,69,1,69,1,69,
		3,69,1081,8,69,1,69,1,69,1,69,1,69,3,69,1087,8,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,3,69,1096,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		3,69,1106,8,69,1,69,1,69,1,69,1,69,1,69,3,69,1113,8,69,3,69,1115,8,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,4,69,1125,8,69,11,69,12,69,1126,
		1,69,1,69,1,69,1,69,1,69,1,69,4,69,1135,8,69,11,69,12,69,1136,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1149,8,69,1,69,0,1,108,70,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
		134,136,138,0,33,4,0,13,14,29,30,33,34,45,46,1,0,13,14,2,0,29,32,41,43,
		3,0,33,34,48,48,50,50,1,0,54,57,1,0,52,53,3,0,15,15,39,39,44,44,2,0,4,
		5,38,38,1,0,59,72,2,0,2,3,160,167,2,0,20,20,51,51,1,0,73,75,1,0,81,83,
		2,0,84,84,97,100,2,0,80,80,93,96,3,0,76,76,78,78,85,88,3,0,77,77,79,79,
		89,92,1,0,104,107,3,0,6,6,10,10,29,30,2,0,19,19,21,21,3,0,33,33,45,45,
		49,49,1,0,25,26,2,0,21,21,40,40,2,0,45,45,49,49,2,0,136,136,138,138,1,
		0,123,125,1,0,110,112,1,0,115,117,1,0,157,158,2,0,115,117,127,127,3,0,
		106,106,126,126,128,129,1,0,156,158,1,0,33,34,1301,0,141,1,0,0,0,2,155,
		1,0,0,0,4,159,1,0,0,0,6,190,1,0,0,0,8,193,1,0,0,0,10,197,1,0,0,0,12,211,
		1,0,0,0,14,235,1,0,0,0,16,237,1,0,0,0,18,239,1,0,0,0,20,241,1,0,0,0,22,
		243,1,0,0,0,24,246,1,0,0,0,26,248,1,0,0,0,28,253,1,0,0,0,30,255,1,0,0,
		0,32,257,1,0,0,0,34,259,1,0,0,0,36,261,1,0,0,0,38,263,1,0,0,0,40,265,1,
		0,0,0,42,267,1,0,0,0,44,269,1,0,0,0,46,271,1,0,0,0,48,273,1,0,0,0,50,275,
		1,0,0,0,52,277,1,0,0,0,54,279,1,0,0,0,56,283,1,0,0,0,58,285,1,0,0,0,60,
		287,1,0,0,0,62,289,1,0,0,0,64,291,1,0,0,0,66,293,1,0,0,0,68,295,1,0,0,
		0,70,297,1,0,0,0,72,302,1,0,0,0,74,316,1,0,0,0,76,323,1,0,0,0,78,356,1,
		0,0,0,80,358,1,0,0,0,82,363,1,0,0,0,84,375,1,0,0,0,86,389,1,0,0,0,88,393,
		1,0,0,0,90,404,1,0,0,0,92,410,1,0,0,0,94,414,1,0,0,0,96,418,1,0,0,0,98,
		436,1,0,0,0,100,438,1,0,0,0,102,452,1,0,0,0,104,468,1,0,0,0,106,473,1,
		0,0,0,108,540,1,0,0,0,110,620,1,0,0,0,112,635,1,0,0,0,114,640,1,0,0,0,
		116,651,1,0,0,0,118,662,1,0,0,0,120,666,1,0,0,0,122,702,1,0,0,0,124,722,
		1,0,0,0,126,742,1,0,0,0,128,745,1,0,0,0,130,756,1,0,0,0,132,773,1,0,0,
		0,134,790,1,0,0,0,136,983,1,0,0,0,138,1148,1,0,0,0,140,142,3,2,1,0,141,
		140,1,0,0,0,141,142,1,0,0,0,142,146,1,0,0,0,143,145,3,4,2,0,144,143,1,
		0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,152,1,0,0,0,
		148,146,1,0,0,0,149,151,3,6,3,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,
		1,0,0,0,152,153,1,0,0,0,153,1,1,0,0,0,154,152,1,0,0,0,155,156,5,102,0,
		0,156,157,3,54,27,0,157,158,5,35,0,0,158,3,1,0,0,0,159,160,5,103,0,0,160,
		165,3,54,27,0,161,162,5,37,0,0,162,164,3,54,27,0,163,161,1,0,0,0,164,167,
		1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,
		0,168,170,5,37,0,0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,
		172,5,35,0,0,172,5,1,0,0,0,173,174,3,10,5,0,174,178,5,23,0,0,175,177,3,
		6,3,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,
		179,181,1,0,0,0,180,178,1,0,0,0,181,182,5,24,0,0,182,191,1,0,0,0,183,184,
		3,10,5,0,184,185,5,36,0,0,185,191,1,0,0,0,186,188,3,10,5,0,187,186,1,0,
		0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,191,3,136,68,0,190,173,1,0,0,0,
		190,183,1,0,0,0,190,187,1,0,0,0,191,7,1,0,0,0,192,194,3,10,5,0,193,192,
		1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,196,3,138,69,0,196,9,1,0,0,
		0,197,198,5,21,0,0,198,203,3,12,6,0,199,200,5,37,0,0,200,202,3,12,6,0,
		201,199,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,207,
		1,0,0,0,205,203,1,0,0,0,206,208,5,37,0,0,207,206,1,0,0,0,207,208,1,0,0,
		0,208,209,1,0,0,0,209,210,5,22,0,0,210,11,1,0,0,0,211,228,3,14,7,0,212,
		213,5,58,0,0,213,229,3,56,28,0,214,215,5,26,0,0,215,220,3,56,28,0,216,
		217,5,37,0,0,217,219,3,56,28,0,218,216,1,0,0,0,219,222,1,0,0,0,220,218,
		1,0,0,0,220,221,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,223,225,5,37,0,
		0,224,223,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,27,0,0,227,
		229,1,0,0,0,228,212,1,0,0,0,228,214,1,0,0,0,228,229,1,0,0,0,229,13,1,0,
		0,0,230,236,3,54,27,0,231,236,5,106,0,0,232,236,5,142,0,0,233,236,5,150,
		0,0,234,236,5,138,0,0,235,230,1,0,0,0,235,231,1,0,0,0,235,232,1,0,0,0,
		235,233,1,0,0,0,235,234,1,0,0,0,236,15,1,0,0,0,237,238,5,1,0,0,238,17,
		1,0,0,0,239,240,7,0,0,0,240,19,1,0,0,0,241,242,7,1,0,0,242,21,1,0,0,0,
		243,244,5,30,0,0,244,245,5,30,0,0,245,23,1,0,0,0,246,247,7,2,0,0,247,25,
		1,0,0,0,248,249,7,3,0,0,249,27,1,0,0,0,250,254,5,17,0,0,251,252,5,57,0,
		0,252,254,5,57,0,0,253,250,1,0,0,0,253,251,1,0,0,0,254,29,1,0,0,0,255,
		256,5,7,0,0,256,31,1,0,0,0,257,258,7,4,0,0,258,33,1,0,0,0,259,260,7,5,
		0,0,260,35,1,0,0,0,261,262,5,10,0,0,262,37,1,0,0,0,263,264,5,47,0,0,264,
		39,1,0,0,0,265,266,5,12,0,0,266,41,1,0,0,0,267,268,7,6,0,0,268,43,1,0,
		0,0,269,270,7,7,0,0,270,45,1,0,0,0,271,272,5,58,0,0,272,47,1,0,0,0,273,
		274,7,8,0,0,274,49,1,0,0,0,275,276,7,9,0,0,276,51,1,0,0,0,277,278,7,10,
		0,0,278,53,1,0,0,0,279,280,5,159,0,0,280,55,1,0,0,0,281,284,3,54,27,0,
		282,284,3,50,25,0,283,281,1,0,0,0,283,282,1,0,0,0,284,57,1,0,0,0,285,286,
		7,11,0,0,286,59,1,0,0,0,287,288,7,12,0,0,288,61,1,0,0,0,289,290,7,13,0,
		0,290,63,1,0,0,0,291,292,7,14,0,0,292,65,1,0,0,0,293,294,7,15,0,0,294,
		67,1,0,0,0,295,296,7,16,0,0,296,69,1,0,0,0,297,298,7,17,0,0,298,71,1,0,
		0,0,299,301,3,70,35,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,
		302,303,1,0,0,0,303,311,1,0,0,0,304,302,1,0,0,0,305,312,7,18,0,0,306,308,
		7,19,0,0,307,309,3,108,54,0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,
		0,0,0,310,312,5,22,0,0,311,305,1,0,0,0,311,306,1,0,0,0,312,314,1,0,0,0,
		313,315,7,20,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,73,1,0,0,0,316,318,
		3,54,27,0,317,319,3,100,50,0,318,317,1,0,0,0,318,319,1,0,0,0,319,75,1,
		0,0,0,320,322,3,70,35,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,
		0,323,324,1,0,0,0,324,348,1,0,0,0,325,323,1,0,0,0,326,330,3,78,39,0,327,
		329,3,72,36,0,328,327,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,
		1,0,0,0,331,349,1,0,0,0,332,330,1,0,0,0,333,337,5,115,0,0,334,336,3,72,
		36,0,335,334,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,
		340,1,0,0,0,339,337,1,0,0,0,340,349,3,80,40,0,341,345,3,82,41,0,342,344,
		3,72,36,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,
		0,0,346,349,1,0,0,0,347,345,1,0,0,0,348,326,1,0,0,0,348,333,1,0,0,0,348,
		341,1,0,0,0,349,77,1,0,0,0,350,357,3,58,29,0,351,357,3,60,30,0,352,357,
		3,62,31,0,353,357,3,64,32,0,354,357,3,66,33,0,355,357,3,68,34,0,356,350,
		1,0,0,0,356,351,1,0,0,0,356,352,1,0,0,0,356,353,1,0,0,0,356,354,1,0,0,
		0,356,355,1,0,0,0,357,79,1,0,0,0,358,361,3,96,48,0,359,360,5,15,0,0,360,
		362,3,76,38,0,361,359,1,0,0,0,361,362,1,0,0,0,362,81,1,0,0,0,363,368,3,
		74,37,0,364,365,5,18,0,0,365,367,3,74,37,0,366,364,1,0,0,0,367,370,1,0,
		0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,373,1,0,0,0,370,368,1,0,0,0,371,
		372,5,18,0,0,372,374,5,113,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,83,
		1,0,0,0,375,380,3,82,41,0,376,377,5,37,0,0,377,379,3,82,41,0,378,376,1,
		0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,384,1,0,0,0,
		382,380,1,0,0,0,383,385,5,37,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,85,
		1,0,0,0,386,387,3,54,27,0,387,388,5,36,0,0,388,390,1,0,0,0,389,386,1,0,
		0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,392,3,108,54,0,392,87,1,0,0,0,
		393,398,3,86,43,0,394,395,5,37,0,0,395,397,3,86,43,0,396,394,1,0,0,0,397,
		400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,402,1,0,0,0,400,398,1,
		0,0,0,401,403,5,37,0,0,402,401,1,0,0,0,402,403,1,0,0,0,403,89,1,0,0,0,
		404,406,7,21,0,0,405,407,3,88,44,0,406,405,1,0,0,0,406,407,1,0,0,0,407,
		408,1,0,0,0,408,409,5,27,0,0,409,91,1,0,0,0,410,411,7,22,0,0,411,412,3,
		88,44,0,412,413,5,22,0,0,413,93,1,0,0,0,414,416,3,76,38,0,415,417,3,54,
		27,0,416,415,1,0,0,0,416,417,1,0,0,0,417,95,1,0,0,0,418,430,5,26,0,0,419,
		424,3,94,47,0,420,421,5,37,0,0,421,423,3,94,47,0,422,420,1,0,0,0,423,426,
		1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,
		0,427,429,5,37,0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,
		419,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,5,27,0,0,433,97,1,
		0,0,0,434,437,3,50,25,0,435,437,3,76,38,0,436,434,1,0,0,0,436,435,1,0,
		0,0,437,99,1,0,0,0,438,439,5,56,0,0,439,444,3,98,49,0,440,441,5,37,0,0,
		441,443,3,98,49,0,442,440,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,
		445,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,447,449,5,37,0,0,448,447,1,
		0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,451,5,57,0,0,451,101,1,0,0,0,
		452,453,5,56,0,0,453,458,3,54,27,0,454,455,5,37,0,0,455,457,3,54,27,0,
		456,454,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,462,
		1,0,0,0,460,458,1,0,0,0,461,463,5,37,0,0,462,461,1,0,0,0,462,463,1,0,0,
		0,463,464,1,0,0,0,464,465,5,57,0,0,465,103,1,0,0,0,466,469,3,32,16,0,467,
		469,3,34,17,0,468,466,1,0,0,0,468,467,1,0,0,0,469,470,1,0,0,0,470,471,
		5,36,0,0,471,472,3,108,54,0,472,105,1,0,0,0,473,475,5,21,0,0,474,476,3,
		88,44,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,478,5,22,0,
		0,478,107,1,0,0,0,479,483,6,54,-1,0,480,481,3,74,37,0,481,482,5,18,0,0,
		482,484,1,0,0,0,483,480,1,0,0,0,484,485,1,0,0,0,485,483,1,0,0,0,485,486,
		1,0,0,0,486,487,1,0,0,0,487,488,3,74,37,0,488,541,1,0,0,0,489,491,5,148,
		0,0,490,492,3,76,38,0,491,490,1,0,0,0,491,492,1,0,0,0,492,494,1,0,0,0,
		493,495,3,90,45,0,494,493,1,0,0,0,494,495,1,0,0,0,495,541,1,0,0,0,496,
		504,5,26,0,0,497,505,5,158,0,0,498,505,5,157,0,0,499,505,5,156,0,0,500,
		502,7,23,0,0,501,500,1,0,0,0,501,502,1,0,0,0,502,503,1,0,0,0,503,505,3,
		76,38,0,504,497,1,0,0,0,504,498,1,0,0,0,504,499,1,0,0,0,504,501,1,0,0,
		0,505,506,1,0,0,0,506,515,5,27,0,0,507,515,5,147,0,0,508,511,5,149,0,0,
		509,510,5,21,0,0,510,512,5,22,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,
		515,1,0,0,0,513,515,3,18,9,0,514,496,1,0,0,0,514,507,1,0,0,0,514,508,1,
		0,0,0,514,513,1,0,0,0,515,516,1,0,0,0,516,541,3,108,54,21,517,518,5,150,
		0,0,518,541,3,108,54,6,519,521,5,115,0,0,520,522,3,106,53,0,521,520,1,
		0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,525,3,102,51,0,524,523,1,0,0,
		0,524,525,1,0,0,0,525,526,1,0,0,0,526,529,3,96,48,0,527,528,5,15,0,0,528,
		530,3,76,38,0,529,527,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,
		3,126,63,0,532,541,1,0,0,0,533,534,5,26,0,0,534,535,3,108,54,0,535,536,
		5,27,0,0,536,541,1,0,0,0,537,541,3,52,26,0,538,541,3,50,25,0,539,541,3,
		74,37,0,540,479,1,0,0,0,540,489,1,0,0,0,540,514,1,0,0,0,540,517,1,0,0,
		0,540,519,1,0,0,0,540,533,1,0,0,0,540,537,1,0,0,0,540,538,1,0,0,0,540,
		539,1,0,0,0,541,617,1,0,0,0,542,543,10,20,0,0,543,544,3,44,22,0,544,545,
		3,108,54,21,545,616,1,0,0,0,546,547,10,19,0,0,547,548,3,22,11,0,548,549,
		3,108,54,19,549,616,1,0,0,0,550,551,10,18,0,0,551,552,3,24,12,0,552,553,
		3,108,54,19,553,616,1,0,0,0,554,555,10,17,0,0,555,556,3,26,13,0,556,557,
		3,108,54,18,557,616,1,0,0,0,558,559,10,16,0,0,559,560,3,28,14,0,560,561,
		3,108,54,17,561,616,1,0,0,0,562,563,10,15,0,0,563,564,3,30,15,0,564,565,
		3,108,54,16,565,616,1,0,0,0,566,567,10,14,0,0,567,568,3,32,16,0,568,569,
		3,108,54,15,569,616,1,0,0,0,570,571,10,13,0,0,571,572,3,34,17,0,572,573,
		3,108,54,14,573,616,1,0,0,0,574,575,10,12,0,0,575,576,3,36,18,0,576,577,
		3,108,54,13,577,616,1,0,0,0,578,579,10,11,0,0,579,580,3,38,19,0,580,581,
		3,108,54,12,581,616,1,0,0,0,582,583,10,10,0,0,583,584,5,8,0,0,584,616,
		3,108,54,11,585,586,10,9,0,0,586,587,3,40,20,0,587,588,3,108,54,10,588,
		616,1,0,0,0,589,590,10,8,0,0,590,591,5,49,0,0,591,592,3,108,54,0,592,593,
		5,36,0,0,593,594,3,108,54,8,594,616,1,0,0,0,595,602,10,23,0,0,596,603,
		3,20,10,0,597,603,3,90,45,0,598,603,3,92,46,0,599,600,3,42,21,0,600,601,
		3,74,37,0,601,603,1,0,0,0,602,596,1,0,0,0,602,597,1,0,0,0,602,598,1,0,
		0,0,602,599,1,0,0,0,603,616,1,0,0,0,604,605,10,7,0,0,605,607,5,11,0,0,
		606,608,3,104,52,0,607,606,1,0,0,0,608,609,1,0,0,0,609,607,1,0,0,0,609,
		610,1,0,0,0,610,613,1,0,0,0,611,612,5,36,0,0,612,614,3,108,54,0,613,611,
		1,0,0,0,613,614,1,0,0,0,614,616,1,0,0,0,615,542,1,0,0,0,615,546,1,0,0,
		0,615,550,1,0,0,0,615,554,1,0,0,0,615,558,1,0,0,0,615,562,1,0,0,0,615,
		566,1,0,0,0,615,570,1,0,0,0,615,574,1,0,0,0,615,578,1,0,0,0,615,582,1,
		0,0,0,615,585,1,0,0,0,615,589,1,0,0,0,615,595,1,0,0,0,615,604,1,0,0,0,
		616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,109,1,0,0,0,619,617,
		1,0,0,0,620,629,3,54,27,0,621,623,5,23,0,0,622,624,3,128,64,0,623,622,
		1,0,0,0,624,625,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,
		0,627,628,5,24,0,0,628,630,1,0,0,0,629,621,1,0,0,0,629,630,1,0,0,0,630,
		633,1,0,0,0,631,632,5,58,0,0,632,634,3,108,54,0,633,631,1,0,0,0,633,634,
		1,0,0,0,634,111,1,0,0,0,635,638,3,54,27,0,636,637,5,58,0,0,637,639,3,108,
		54,0,638,636,1,0,0,0,638,639,1,0,0,0,639,113,1,0,0,0,640,645,3,110,55,
		0,641,642,5,37,0,0,642,644,3,110,55,0,643,641,1,0,0,0,644,647,1,0,0,0,
		645,643,1,0,0,0,645,646,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,648,650,
		5,37,0,0,649,648,1,0,0,0,649,650,1,0,0,0,650,115,1,0,0,0,651,656,3,112,
		56,0,652,653,5,37,0,0,653,655,3,112,56,0,654,652,1,0,0,0,655,658,1,0,0,
		0,656,654,1,0,0,0,656,657,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,659,
		661,5,37,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,117,1,0,0,0,662,663,3,
		76,38,0,663,664,3,114,57,0,664,665,5,35,0,0,665,119,1,0,0,0,666,667,5,
		139,0,0,667,672,3,108,54,0,668,669,5,37,0,0,669,671,3,108,54,0,670,668,
		1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,700,1,0,0,
		0,674,672,1,0,0,0,675,679,5,36,0,0,676,678,3,8,4,0,677,676,1,0,0,0,678,
		681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,684,1,0,0,0,681,679,1,
		0,0,0,682,683,5,142,0,0,683,685,5,35,0,0,684,682,1,0,0,0,684,685,1,0,0,
		0,685,701,1,0,0,0,686,690,5,23,0,0,687,689,3,8,4,0,688,687,1,0,0,0,689,
		692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,695,1,0,0,0,692,690,1,
		0,0,0,693,694,5,142,0,0,694,696,5,35,0,0,695,693,1,0,0,0,695,696,1,0,0,
		0,696,697,1,0,0,0,697,701,5,24,0,0,698,699,5,16,0,0,699,701,3,8,4,0,700,
		675,1,0,0,0,700,686,1,0,0,0,700,698,1,0,0,0,701,121,1,0,0,0,702,720,7,
		24,0,0,703,707,5,36,0,0,704,706,3,8,4,0,705,704,1,0,0,0,706,709,1,0,0,
		0,707,705,1,0,0,0,707,708,1,0,0,0,708,721,1,0,0,0,709,707,1,0,0,0,710,
		714,5,23,0,0,711,713,3,8,4,0,712,711,1,0,0,0,713,716,1,0,0,0,714,712,1,
		0,0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,714,1,0,0,0,717,721,5,24,0,0,
		718,719,5,16,0,0,719,721,3,8,4,0,720,703,1,0,0,0,720,710,1,0,0,0,720,718,
		1,0,0,0,721,123,1,0,0,0,722,723,5,36,0,0,723,724,3,54,27,0,724,731,3,90,
		45,0,725,726,5,37,0,0,726,727,3,54,27,0,727,728,3,90,45,0,728,730,1,0,
		0,0,729,725,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,
		735,1,0,0,0,733,731,1,0,0,0,734,736,5,37,0,0,735,734,1,0,0,0,735,736,1,
		0,0,0,736,125,1,0,0,0,737,738,5,16,0,0,738,739,3,108,54,0,739,740,5,35,
		0,0,740,743,1,0,0,0,741,743,3,8,4,0,742,737,1,0,0,0,742,741,1,0,0,0,743,
		127,1,0,0,0,744,746,3,10,5,0,745,744,1,0,0,0,745,746,1,0,0,0,746,750,1,
		0,0,0,747,749,3,70,35,0,748,747,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,
		0,750,751,1,0,0,0,751,753,1,0,0,0,752,750,1,0,0,0,753,754,7,25,0,0,754,
		755,3,126,63,0,755,129,1,0,0,0,756,758,3,54,27,0,757,759,3,102,51,0,758,
		757,1,0,0,0,758,759,1,0,0,0,759,761,1,0,0,0,760,762,3,96,48,0,761,760,
		1,0,0,0,761,762,1,0,0,0,762,765,1,0,0,0,763,764,5,15,0,0,764,766,3,76,
		38,0,765,763,1,0,0,0,765,766,1,0,0,0,766,769,1,0,0,0,767,768,5,121,0,0,
		768,770,3,84,42,0,769,767,1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,
		772,3,126,63,0,772,131,1,0,0,0,773,775,5,2,0,0,774,776,3,102,51,0,775,
		774,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,779,3,96,48,0,778,777,
		1,0,0,0,778,779,1,0,0,0,779,782,1,0,0,0,780,781,5,15,0,0,781,783,3,76,
		38,0,782,780,1,0,0,0,782,783,1,0,0,0,783,786,1,0,0,0,784,785,5,121,0,0,
		785,787,3,84,42,0,786,784,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,
		789,3,126,63,0,789,133,1,0,0,0,790,791,5,26,0,0,791,792,3,108,54,0,792,
		793,5,27,0,0,793,794,3,8,4,0,794,135,1,0,0,0,795,796,5,101,0,0,796,801,
		3,54,27,0,797,798,5,18,0,0,798,800,3,54,27,0,799,797,1,0,0,0,800,803,1,
		0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,802,814,1,0,0,0,803,801,1,0,0,0,
		804,815,5,35,0,0,805,815,5,36,0,0,806,810,5,23,0,0,807,809,3,6,3,0,808,
		807,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,813,1,
		0,0,0,812,810,1,0,0,0,813,815,5,24,0,0,814,804,1,0,0,0,814,805,1,0,0,0,
		814,806,1,0,0,0,815,984,1,0,0,0,816,817,7,26,0,0,817,819,3,54,27,0,818,
		820,3,102,51,0,819,818,1,0,0,0,819,820,1,0,0,0,820,823,1,0,0,0,821,822,
		5,36,0,0,822,824,3,84,42,0,823,821,1,0,0,0,823,824,1,0,0,0,824,827,1,0,
		0,0,825,826,5,121,0,0,826,828,3,84,42,0,827,825,1,0,0,0,827,828,1,0,0,
		0,828,829,1,0,0,0,829,833,5,23,0,0,830,832,3,6,3,0,831,830,1,0,0,0,832,
		835,1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,835,833,1,
		0,0,0,836,837,5,24,0,0,837,984,1,0,0,0,838,839,5,120,0,0,839,841,3,54,
		27,0,840,842,3,102,51,0,841,840,1,0,0,0,841,842,1,0,0,0,842,845,1,0,0,
		0,843,844,5,36,0,0,844,846,3,84,42,0,845,843,1,0,0,0,845,846,1,0,0,0,846,
		847,1,0,0,0,847,851,5,23,0,0,848,850,3,6,3,0,849,848,1,0,0,0,850,853,1,
		0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,851,1,0,0,0,
		854,855,5,24,0,0,855,984,1,0,0,0,856,857,5,119,0,0,857,984,3,54,27,0,858,
		859,5,118,0,0,859,862,3,54,27,0,860,861,5,36,0,0,861,863,3,78,39,0,862,
		860,1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,5,23,0,0,865,866,3,
		116,58,0,866,867,5,24,0,0,867,984,1,0,0,0,868,878,7,27,0,0,869,879,3,130,
		65,0,870,874,5,23,0,0,871,873,3,130,65,0,872,871,1,0,0,0,873,876,1,0,0,
		0,874,872,1,0,0,0,874,875,1,0,0,0,875,877,1,0,0,0,876,874,1,0,0,0,877,
		879,5,24,0,0,878,869,1,0,0,0,878,870,1,0,0,0,879,984,1,0,0,0,880,881,7,
		28,0,0,881,883,5,127,0,0,882,884,5,2,0,0,883,882,1,0,0,0,883,884,1,0,0,
		0,884,886,1,0,0,0,885,887,3,54,27,0,886,885,1,0,0,0,886,887,1,0,0,0,887,
		905,1,0,0,0,888,889,5,155,0,0,889,890,7,29,0,0,890,891,5,15,0,0,891,905,
		3,76,38,0,892,893,5,127,0,0,893,895,7,28,0,0,894,896,5,2,0,0,895,894,1,
		0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,897,899,3,54,27,0,898,897,1,0,0,
		0,898,899,1,0,0,0,899,905,1,0,0,0,900,901,7,29,0,0,901,902,5,155,0,0,902,
		903,5,15,0,0,903,905,3,76,38,0,904,880,1,0,0,0,904,888,1,0,0,0,904,892,
		1,0,0,0,904,900,1,0,0,0,905,906,1,0,0,0,906,984,3,126,63,0,907,917,5,127,
		0,0,908,918,3,132,66,0,909,913,5,23,0,0,910,912,3,132,66,0,911,910,1,0,
		0,0,912,915,1,0,0,0,913,911,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,
		913,1,0,0,0,916,918,5,24,0,0,917,908,1,0,0,0,917,909,1,0,0,0,918,984,1,
		0,0,0,919,920,5,108,0,0,920,921,3,84,42,0,921,922,5,35,0,0,922,984,1,0,
		0,0,923,924,5,109,0,0,924,925,3,54,27,0,925,926,5,58,0,0,926,927,3,76,
		38,0,927,928,5,35,0,0,928,984,1,0,0,0,929,939,7,30,0,0,930,940,3,118,59,
		0,931,935,5,23,0,0,932,934,3,118,59,0,933,932,1,0,0,0,934,937,1,0,0,0,
		935,933,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,935,1,0,0,0,938,940,
		5,24,0,0,939,930,1,0,0,0,939,931,1,0,0,0,940,984,1,0,0,0,941,942,5,138,
		0,0,942,975,5,113,0,0,943,944,7,31,0,0,944,946,5,113,0,0,945,947,3,54,
		27,0,946,945,1,0,0,0,946,947,1,0,0,0,947,975,1,0,0,0,948,949,5,155,0,0,
		949,950,5,113,0,0,950,952,3,76,38,0,951,953,3,54,27,0,952,951,1,0,0,0,
		952,953,1,0,0,0,953,975,1,0,0,0,954,955,5,113,0,0,955,975,5,138,0,0,956,
		957,5,113,0,0,957,959,7,31,0,0,958,960,3,54,27,0,959,958,1,0,0,0,959,960,
		1,0,0,0,960,975,1,0,0,0,961,962,5,113,0,0,962,963,5,155,0,0,963,965,3,
		76,38,0,964,966,3,54,27,0,965,964,1,0,0,0,965,966,1,0,0,0,966,975,1,0,
		0,0,967,969,5,113,0,0,968,970,3,96,48,0,969,968,1,0,0,0,969,970,1,0,0,
		0,970,972,1,0,0,0,971,973,3,124,62,0,972,971,1,0,0,0,972,973,1,0,0,0,973,
		975,1,0,0,0,974,941,1,0,0,0,974,943,1,0,0,0,974,948,1,0,0,0,974,954,1,
		0,0,0,974,956,1,0,0,0,974,961,1,0,0,0,974,967,1,0,0,0,975,976,1,0,0,0,
		976,984,3,126,63,0,977,980,5,114,0,0,978,979,5,26,0,0,979,981,5,27,0,0,
		980,978,1,0,0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,984,3,126,63,0,983,
		795,1,0,0,0,983,816,1,0,0,0,983,838,1,0,0,0,983,856,1,0,0,0,983,858,1,
		0,0,0,983,868,1,0,0,0,983,904,1,0,0,0,983,907,1,0,0,0,983,919,1,0,0,0,
		983,923,1,0,0,0,983,929,1,0,0,0,983,974,1,0,0,0,983,977,1,0,0,0,984,137,
		1,0,0,0,985,1149,5,35,0,0,986,990,5,23,0,0,987,989,3,8,4,0,988,987,1,0,
		0,0,989,992,1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,993,1,0,0,0,992,
		990,1,0,0,0,993,1149,5,24,0,0,994,995,5,108,0,0,995,996,3,84,42,0,996,
		997,5,35,0,0,997,1149,1,0,0,0,998,999,5,109,0,0,999,1000,3,54,27,0,1000,
		1001,5,58,0,0,1001,1002,3,76,38,0,1002,1003,5,35,0,0,1003,1149,1,0,0,0,
		1004,1014,7,30,0,0,1005,1009,5,23,0,0,1006,1008,3,118,59,0,1007,1006,1,
		0,0,0,1008,1011,1,0,0,0,1009,1007,1,0,0,0,1009,1010,1,0,0,0,1010,1012,
		1,0,0,0,1011,1009,1,0,0,0,1012,1015,5,24,0,0,1013,1015,3,118,59,0,1014,
		1005,1,0,0,0,1014,1013,1,0,0,0,1015,1149,1,0,0,0,1016,1018,5,143,0,0,1017,
		1019,3,108,54,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,
		1020,1149,5,35,0,0,1021,1022,5,132,0,0,1022,1024,5,143,0,0,1023,1025,3,
		108,54,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1027,
		5,135,0,0,1027,1028,5,26,0,0,1028,1029,3,108,54,0,1029,1030,5,27,0,0,1030,
		1031,5,35,0,0,1031,1149,1,0,0,0,1032,1033,5,150,0,0,1033,1034,3,108,54,
		0,1034,1035,5,35,0,0,1035,1149,1,0,0,0,1036,1038,5,141,0,0,1037,1039,5,
		167,0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1149,
		5,35,0,0,1041,1042,5,135,0,0,1042,1048,3,134,67,0,1043,1044,5,136,0,0,
		1044,1045,5,135,0,0,1045,1047,3,134,67,0,1046,1043,1,0,0,0,1047,1050,1,
		0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,1053,1,0,0,0,1050,1048,
		1,0,0,0,1051,1052,5,136,0,0,1052,1054,3,8,4,0,1053,1051,1,0,0,0,1053,1054,
		1,0,0,0,1054,1149,1,0,0,0,1055,1056,5,137,0,0,1056,1057,5,26,0,0,1057,
		1058,3,108,54,0,1058,1059,5,27,0,0,1059,1061,5,23,0,0,1060,1062,3,120,
		60,0,1061,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,
		0,0,0,1064,1066,1,0,0,0,1065,1067,3,122,61,0,1066,1065,1,0,0,0,1066,1067,
		1,0,0,0,1067,1068,1,0,0,0,1068,1069,5,24,0,0,1069,1149,1,0,0,0,1070,1071,
		5,130,0,0,1071,1149,3,8,4,0,1072,1073,5,131,0,0,1073,1074,5,26,0,0,1074,
		1076,3,8,4,0,1075,1077,3,108,54,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,
		1077,1078,1,0,0,0,1078,1080,5,35,0,0,1079,1081,3,108,54,0,1080,1079,1,
		0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,1083,5,27,0,0,1083,1086,
		3,8,4,0,1084,1085,5,136,0,0,1085,1087,3,8,4,0,1086,1084,1,0,0,0,1086,1087,
		1,0,0,0,1087,1149,1,0,0,0,1088,1089,5,133,0,0,1089,1090,5,26,0,0,1090,
		1091,3,108,54,0,1091,1092,5,27,0,0,1092,1095,3,8,4,0,1093,1094,5,136,0,
		0,1094,1096,3,8,4,0,1095,1093,1,0,0,0,1095,1096,1,0,0,0,1096,1149,1,0,
		0,0,1097,1098,5,132,0,0,1098,1099,3,8,4,0,1099,1100,5,133,0,0,1100,1101,
		5,26,0,0,1101,1102,3,108,54,0,1102,1103,5,27,0,0,1103,1149,1,0,0,0,1104,
		1106,5,132,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,
		1108,3,108,54,0,1108,1114,5,134,0,0,1109,1112,3,54,27,0,1110,1111,7,32,
		0,0,1111,1113,5,167,0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1115,
		1,0,0,0,1114,1109,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1117,
		3,8,4,0,1117,1149,1,0,0,0,1118,1119,5,144,0,0,1119,1124,3,8,4,0,1120,1121,
		5,145,0,0,1121,1122,3,96,48,0,1122,1123,3,8,4,0,1123,1125,1,0,0,0,1124,
		1120,1,0,0,0,1125,1126,1,0,0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,0,1127,
		1149,1,0,0,0,1128,1129,5,146,0,0,1129,1149,3,8,4,0,1130,1134,3,108,54,
		0,1131,1132,3,46,23,0,1132,1133,3,108,54,0,1133,1135,1,0,0,0,1134,1131,
		1,0,0,0,1135,1136,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1138,
		1,0,0,0,1138,1139,5,35,0,0,1139,1149,1,0,0,0,1140,1141,3,108,54,0,1141,
		1142,3,48,24,0,1142,1143,3,108,54,0,1143,1144,5,35,0,0,1144,1149,1,0,0,
		0,1145,1146,3,108,54,0,1146,1147,5,35,0,0,1147,1149,1,0,0,0,1148,985,1,
		0,0,0,1148,986,1,0,0,0,1148,994,1,0,0,0,1148,998,1,0,0,0,1148,1004,1,0,
		0,0,1148,1016,1,0,0,0,1148,1021,1,0,0,0,1148,1032,1,0,0,0,1148,1036,1,
		0,0,0,1148,1041,1,0,0,0,1148,1055,1,0,0,0,1148,1070,1,0,0,0,1148,1072,
		1,0,0,0,1148,1088,1,0,0,0,1148,1097,1,0,0,0,1148,1105,1,0,0,0,1148,1118,
		1,0,0,0,1148,1128,1,0,0,0,1148,1130,1,0,0,0,1148,1140,1,0,0,0,1148,1145,
		1,0,0,0,1149,139,1,0,0,0,145,141,146,152,165,169,178,187,190,193,203,207,
		220,224,228,235,253,283,302,308,311,314,318,323,330,337,345,348,356,361,
		368,373,380,384,389,398,402,406,416,424,428,430,436,444,448,458,462,468,
		475,485,491,494,501,504,511,514,521,524,529,540,602,609,613,615,617,625,
		629,633,638,645,649,656,660,672,679,684,690,695,700,707,714,720,731,735,
		742,745,750,758,761,765,769,775,778,782,786,801,810,814,819,823,827,833,
		841,845,851,862,874,878,883,886,895,898,904,913,917,935,939,946,952,959,
		965,969,972,974,980,983,990,1009,1014,1018,1024,1038,1048,1053,1063,1066,
		1076,1080,1086,1095,1105,1112,1114,1126,1136,1148
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Myll
