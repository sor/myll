//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sor/myll/backend/Grammar/MyllParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Myll {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MyllParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, STRING_LIT=2, CHAR_LIT=3, ARROW_STAR=4, POINT_STAR=5, PTR_TO_ARY=6, 
		COMPARE=7, TRP_POINT=8, DBL_POINT=9, DBL_AMP=10, DBL_QM=11, QM_COLON=12, 
		DBL_PLUS=13, DBL_MINUS=14, RARROW=15, LARROW=16, PHATRARROW=17, LSHIFT=18, 
		SCOPE=19, AT_LBRACK=20, AUTOINDEX=21, LBRACK=22, RBRACK=23, LCURLY=24, 
		RCURLY=25, QM_LPAREN=26, LPAREN=27, RPAREN=28, AT=29, AMP=30, STAR=31, 
		SLASH=32, MOD=33, PLUS=34, MINUS=35, SEMI=36, COLON=37, COMMA=38, QM_POINT_STAR=39, 
		QM_POINT=40, QM_LBRACK=41, DOT=42, CROSS=43, DIV=44, POINT=45, EM=46, 
		TILDE=47, DBL_PIPE=48, PIPE=49, QM=50, HAT=51, USCORE=52, EQ=53, NEQ=54, 
		LTEQ=55, GTEQ=56, LT=57, GT=58, ASSIGN=59, AS_POW=60, AS_MUL=61, AS_SLASH=62, 
		AS_MOD=63, AS_DOT=64, AS_CROSS=65, AS_DIV=66, AS_ADD=67, AS_SUB=68, AS_LSH=69, 
		AS_RSH=70, AS_AND=71, AS_OR=72, AS_XOR=73, AS_QM=74, AUTO=75, VOID=76, 
		BOOL=77, INT=78, UINT=79, ISIZE=80, USIZE=81, BYTE=82, CHAR=83, CODEPOINT=84, 
		STRING=85, FLOAT=86, I64=87, I32=88, I16=89, I8=90, U64=91, U32=92, U16=93, 
		U8=94, B64=95, B32=96, B16=97, B8=98, F128=99, F64=100, F32=101, F16=102, 
		NAMESPACE=103, MODULE=104, IMPORT=105, VOLATILE=106, STABLE=107, CONST=108, 
		MUTABLE=109, USING=110, ALIAS=111, UNION=112, STRUCT=113, CLASS=114, CTOR=115, 
		DTOR=116, FUNC=117, PROC=118, METHOD=119, ENUM=120, ASPECT=121, CONCEPT=122, 
		REQUIRES=123, GET=124, REFGET=125, SET=126, FIELD=127, OPERATOR=128, VAR=129, 
		LET=130, LOOP=131, FOR=132, DO=133, WHILE=134, TIMES=135, IF=136, ELSE=137, 
		SWITCH=138, DEFAULT=139, CASE=140, CONTINUE=141, BREAK=142, FALL=143, 
		RETURN=144, TRY=145, CATCH=146, DEFER=147, SIZEOF=148, NEW=149, DELETE=150, 
		THROW=151, NOT=152, NAN=153, INF=154, IS=155, CONVERT=156, FORWARD=157, 
		MOVE=158, COPY=159, ID=160, NUL=161, CLASS_LIT=162, BOOL_LIT=163, FLOAT_LIT=164, 
		HEX_LIT=165, OCT_LIT=166, BIN_LIT=167, INTEGER_LIT=168, NL=169, WS=170, 
		ANY=171;
	public const int
		RULE_comment = 0, RULE_prog = 1, RULE_module = 2, RULE_imports = 3, RULE_attribBlk = 4, 
		RULE_attrib = 5, RULE_attribId = 6, RULE_decl = 7, RULE_attrUsing = 8, 
		RULE_attrAlias = 9, RULE_attrConvert = 10, RULE_attrCtor = 11, RULE_attrOp = 12, 
		RULE_attrFunc = 13, RULE_attrVar = 14, RULE_defDecl = 15, RULE_declNamespace = 16, 
		RULE_declUsing = 17, RULE_declAlias = 18, RULE_declAspect = 19, RULE_declConcept = 20, 
		RULE_declEnum = 21, RULE_declStruct = 22, RULE_declConvert = 23, RULE_declCtor = 24, 
		RULE_declDtor = 25, RULE_declOp = 26, RULE_declFunc = 27, RULE_declVar = 28, 
		RULE_defNamespace = 29, RULE_defUsing = 30, RULE_defAlias = 31, RULE_defAspect = 32, 
		RULE_defConcept = 33, RULE_defEnum = 34, RULE_defStruct = 35, RULE_defConvert = 36, 
		RULE_defCtor = 37, RULE_defDtor = 38, RULE_defOp = 39, RULE_defFunc = 40, 
		RULE_defCoreFunc = 41, RULE_defVar = 42, RULE_stmt = 43, RULE_defStmt = 44, 
		RULE_stmtIf = 45, RULE_stmtSwitch = 46, RULE_stmtLoop = 47, RULE_stmtFor = 48, 
		RULE_stmtWhile = 49, RULE_stmtDoWhile = 50, RULE_stmtTimes = 51, RULE_stmtTryCatch = 52, 
		RULE_stmtReturn = 53, RULE_stmtReturnIf = 54, RULE_stmtThrow = 55, RULE_stmtBreak = 56, 
		RULE_stmtContinue = 57, RULE_stmtContinue2 = 58, RULE_stmtAssign = 59, 
		RULE_stmtAggregate = 60, RULE_stmtDefer = 61, RULE_stmtExpr = 62, RULE_stmtEmpty = 63, 
		RULE_kindOfStruct = 64, RULE_kindOfFunc = 65, RULE_kindOfVar = 66, RULE_kindOfPassing = 67, 
		RULE_preOP = 68, RULE_postOP = 69, RULE_powOP = 70, RULE_multOP = 71, 
		RULE_addOP = 72, RULE_shiftOP = 73, RULE_cmpOp = 74, RULE_relOP = 75, 
		RULE_equalOP = 76, RULE_andOP = 77, RULE_orOP = 78, RULE_nulCoalOP = 79, 
		RULE_memAccOP = 80, RULE_memAccPtrOP = 81, RULE_assignOP = 82, RULE_aggrAssignOP = 83, 
		RULE_lit = 84, RULE_wildId = 85, RULE_id = 86, RULE_idOrLit = 87, RULE_specialType = 88, 
		RULE_charType = 89, RULE_floatingType = 90, RULE_binaryType = 91, RULE_signedIntType = 92, 
		RULE_unsignIntType = 93, RULE_qual = 94, RULE_typePtr = 95, RULE_idTplArgs = 96, 
		RULE_typespec = 97, RULE_typespecBasic = 98, RULE_typespecFunc = 99, RULE_typespecNested = 100, 
		RULE_typespecsNested = 101, RULE_arg = 102, RULE_args = 103, RULE_funcCall = 104, 
		RULE_indexCall = 105, RULE_param = 106, RULE_funcTypeDef = 107, RULE_tplArg = 108, 
		RULE_tplArgs = 109, RULE_tplParams = 110, RULE_threeWay = 111, RULE_capture = 112, 
		RULE_expr = 113, RULE_idAccessor = 114, RULE_idExpr = 115, RULE_idAccessors = 116, 
		RULE_idExprs = 117, RULE_typedIdAcors = 118, RULE_caseBlock = 119, RULE_defaultBlock = 120, 
		RULE_initList = 121, RULE_funcBody = 122, RULE_accessorDef = 123, RULE_condThen = 124;
	public static readonly string[] ruleNames = {
		"comment", "prog", "module", "imports", "attribBlk", "attrib", "attribId", 
		"decl", "attrUsing", "attrAlias", "attrConvert", "attrCtor", "attrOp", 
		"attrFunc", "attrVar", "defDecl", "declNamespace", "declUsing", "declAlias", 
		"declAspect", "declConcept", "declEnum", "declStruct", "declConvert", 
		"declCtor", "declDtor", "declOp", "declFunc", "declVar", "defNamespace", 
		"defUsing", "defAlias", "defAspect", "defConcept", "defEnum", "defStruct", 
		"defConvert", "defCtor", "defDtor", "defOp", "defFunc", "defCoreFunc", 
		"defVar", "stmt", "defStmt", "stmtIf", "stmtSwitch", "stmtLoop", "stmtFor", 
		"stmtWhile", "stmtDoWhile", "stmtTimes", "stmtTryCatch", "stmtReturn", 
		"stmtReturnIf", "stmtThrow", "stmtBreak", "stmtContinue", "stmtContinue2", 
		"stmtAssign", "stmtAggregate", "stmtDefer", "stmtExpr", "stmtEmpty", "kindOfStruct", 
		"kindOfFunc", "kindOfVar", "kindOfPassing", "preOP", "postOP", "powOP", 
		"multOP", "addOP", "shiftOP", "cmpOp", "relOP", "equalOP", "andOP", "orOP", 
		"nulCoalOP", "memAccOP", "memAccPtrOP", "assignOP", "aggrAssignOP", "lit", 
		"wildId", "id", "idOrLit", "specialType", "charType", "floatingType", 
		"binaryType", "signedIntType", "unsignIntType", "qual", "typePtr", "idTplArgs", 
		"typespec", "typespecBasic", "typespecFunc", "typespecNested", "typespecsNested", 
		"arg", "args", "funcCall", "indexCall", "param", "funcTypeDef", "tplArg", 
		"tplArgs", "tplParams", "threeWay", "capture", "expr", "idAccessor", "idExpr", 
		"idAccessors", "idExprs", "typedIdAcors", "caseBlock", "defaultBlock", 
		"initList", "funcBody", "accessorDef", "condThen"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'->*'", "'.*'", "'[*]'", "'<=>'", "'...'", "'..'", 
		"'&&'", "'??'", "'?:'", "'++'", "'--'", "'->'", "'<-'", "'=>'", "'<<'", 
		"'::'", "'@['", null, "'['", "']'", "'{'", "'}'", "'?('", "'('", "')'", 
		"'@'", "'&'", "'*'", "'/'", "'%'", "'+'", "'-'", "';'", "':'", "','", 
		"'?.*'", "'?.'", "'?['", "'\\u00B7'", "'\\u00D7'", "'\\u00F7'", "'.'", 
		"'!'", "'~'", "'||'", "'|'", "'?'", "'^'", "'_'", "'=='", "'!='", "'<='", 
		"'>='", "'<'", "'>'", "'='", "'**='", "'*='", "'/='", "'%='", "'\\u00B7='", 
		"'\\u00D7='", "'\\u00F7='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
		"'|='", "'^='", "'?='", "'auto'", "'void'", "'bool'", "'int'", "'uint'", 
		"'isize'", "'usize'", "'byte'", "'char'", null, "'string'", "'float'", 
		"'i64'", "'i32'", "'i16'", "'i8'", "'u64'", "'u32'", "'u16'", "'u8'", 
		"'b64'", "'b32'", "'b16'", "'b8'", "'f128'", "'f64'", "'f32'", "'f16'", 
		"'namespace'", "'module'", "'import'", "'volatile'", "'stable'", "'const'", 
		null, "'using'", "'alias'", "'union'", "'struct'", "'class'", "'ctor'", 
		"'dtor'", "'func'", "'proc'", null, "'enum'", "'aspect'", "'concept'", 
		"'requires'", "'get'", "'refget'", "'set'", "'field'", "'operator'", "'var'", 
		"'let'", "'loop'", "'for'", "'do'", "'while'", "'times'", "'if'", "'else'", 
		"'switch'", "'default'", "'case'", "'continue'", "'break'", "'fall'", 
		"'return'", "'try'", "'catch'", "'defer'", "'sizeof'", "'new'", "'delete'", 
		"'throw'", "'not'", "'nan'", "'inf'", "'is'", null, null, "'move'", "'copy'", 
		null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "STRING_LIT", "CHAR_LIT", "ARROW_STAR", "POINT_STAR", 
		"PTR_TO_ARY", "COMPARE", "TRP_POINT", "DBL_POINT", "DBL_AMP", "DBL_QM", 
		"QM_COLON", "DBL_PLUS", "DBL_MINUS", "RARROW", "LARROW", "PHATRARROW", 
		"LSHIFT", "SCOPE", "AT_LBRACK", "AUTOINDEX", "LBRACK", "RBRACK", "LCURLY", 
		"RCURLY", "QM_LPAREN", "LPAREN", "RPAREN", "AT", "AMP", "STAR", "SLASH", 
		"MOD", "PLUS", "MINUS", "SEMI", "COLON", "COMMA", "QM_POINT_STAR", "QM_POINT", 
		"QM_LBRACK", "DOT", "CROSS", "DIV", "POINT", "EM", "TILDE", "DBL_PIPE", 
		"PIPE", "QM", "HAT", "USCORE", "EQ", "NEQ", "LTEQ", "GTEQ", "LT", "GT", 
		"ASSIGN", "AS_POW", "AS_MUL", "AS_SLASH", "AS_MOD", "AS_DOT", "AS_CROSS", 
		"AS_DIV", "AS_ADD", "AS_SUB", "AS_LSH", "AS_RSH", "AS_AND", "AS_OR", "AS_XOR", 
		"AS_QM", "AUTO", "VOID", "BOOL", "INT", "UINT", "ISIZE", "USIZE", "BYTE", 
		"CHAR", "CODEPOINT", "STRING", "FLOAT", "I64", "I32", "I16", "I8", "U64", 
		"U32", "U16", "U8", "B64", "B32", "B16", "B8", "F128", "F64", "F32", "F16", 
		"NAMESPACE", "MODULE", "IMPORT", "VOLATILE", "STABLE", "CONST", "MUTABLE", 
		"USING", "ALIAS", "UNION", "STRUCT", "CLASS", "CTOR", "DTOR", "FUNC", 
		"PROC", "METHOD", "ENUM", "ASPECT", "CONCEPT", "REQUIRES", "GET", "REFGET", 
		"SET", "FIELD", "OPERATOR", "VAR", "LET", "LOOP", "FOR", "DO", "WHILE", 
		"TIMES", "IF", "ELSE", "SWITCH", "DEFAULT", "CASE", "CONTINUE", "BREAK", 
		"FALL", "RETURN", "TRY", "CATCH", "DEFER", "SIZEOF", "NEW", "DELETE", 
		"THROW", "NOT", "NAN", "INF", "IS", "CONVERT", "FORWARD", "MOVE", "COPY", 
		"ID", "NUL", "CLASS_LIT", "BOOL_LIT", "FLOAT_LIT", "HEX_LIT", "OCT_LIT", 
		"BIN_LIT", "INTEGER_LIT", "NL", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyllParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MyllParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyllParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyllParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MyllParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 0, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MyllParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext[] imports() {
			return GetRuleContexts<ImportsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext imports(int i) {
			return GetRuleContext<ImportsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODULE) {
				{
				State = 252;
				module();
				}
			}

			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 255;
				imports();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
				{
				{
				State = 261;
				decl();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 267;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MyllParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(MODULE);
			State = 270;
			id();
			State = 271;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MyllParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 6, RULE_imports);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(IMPORT);
			State = 274;
			id();
			State = 279;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 275;
					Match(COMMA);
					State = 276;
					id();
					}
					} 
				}
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 282;
				Match(COMMA);
				}
			}

			State = 285;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribBlkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public AttribBlkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribBlk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribBlk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribBlkContext attribBlk() {
		AttribBlkContext _localctx = new AttribBlkContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribBlk);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(LBRACK);
			State = 288;
			attrib();
			State = 293;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 289;
					Match(COMMA);
					State = 290;
					attrib();
					}
					} 
				}
				State = 295;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 296;
				Match(COMMA);
				}
			}

			State = 299;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttribIdContext attribId() {
			return GetRuleContext<AttribIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdOrLitContext[] idOrLit() {
			return GetRuleContexts<IdOrLitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdOrLitContext idOrLit(int i) {
			return GetRuleContext<IdOrLitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 10, RULE_attrib);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			attribId();
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 302;
				Match(ASSIGN);
				State = 303;
				idOrLit();
				}
				break;
			case LPAREN:
				{
				State = 304;
				Match(LPAREN);
				State = 305;
				idOrLit();
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 306;
						Match(COMMA);
						State = 307;
						idOrLit();
						}
						} 
					}
					State = 312;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 313;
					Match(COMMA);
					}
				}

				State = 316;
				Match(RPAREN);
				}
				break;
			case RBRACK:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALL() { return GetToken(MyllParser.FALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MyllParser.DEFAULT, 0); }
		public AttribIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribIdContext attribId() {
		AttribIdContext _localctx = new AttribIdContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribId);
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				id();
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				Match(CONST);
				}
				break;
			case FALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322;
				Match(FALL);
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 323;
				Match(THROW);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 324;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefDeclContext defDecl() {
			return GetRuleContext<DefDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_decl);
		int _la;
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
			case CONST:
			case USING:
			case ALIAS:
			case UNION:
			case STRUCT:
			case CLASS:
			case CTOR:
			case DTOR:
			case FUNC:
			case PROC:
			case METHOD:
			case ENUM:
			case ASPECT:
			case CONCEPT:
			case FIELD:
			case OPERATOR:
			case VAR:
			case LET:
			case CONVERT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				defDecl();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328;
				attribBlk();
				State = 339;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAMESPACE:
				case CONST:
				case USING:
				case ALIAS:
				case UNION:
				case STRUCT:
				case CLASS:
				case CTOR:
				case DTOR:
				case FUNC:
				case PROC:
				case METHOD:
				case ENUM:
				case ASPECT:
				case CONCEPT:
				case FIELD:
				case OPERATOR:
				case VAR:
				case LET:
				case CONVERT:
					{
					State = 329;
					defDecl();
					}
					break;
				case LCURLY:
					{
					State = 330;
					Match(LCURLY);
					State = 334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
						{
						{
						State = 331;
						decl();
						}
						}
						State = 336;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 337;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 338;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrUsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefUsingContext defUsing() {
			return GetRuleContext<DefUsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrUsingContext[] attrUsing() {
			return GetRuleContexts<AttrUsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrUsingContext attrUsing(int i) {
			return GetRuleContext<AttrUsingContext>(i);
		}
		public AttrUsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrUsing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrUsingContext attrUsing() {
		AttrUsingContext _localctx = new AttrUsingContext(Context, State);
		EnterRule(_localctx, 16, RULE_attrUsing);
		int _la;
		try {
			State = 357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				defUsing();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344;
				attribBlk();
				State = 355;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 345;
					defUsing();
					}
					break;
				case LCURLY:
					{
					State = 346;
					Match(LCURLY);
					State = 350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || _la==ID) {
						{
						{
						State = 347;
						attrUsing();
						}
						}
						State = 352;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 353;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 354;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefAliasContext defAlias() {
			return GetRuleContext<DefAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrAliasContext[] attrAlias() {
			return GetRuleContexts<AttrAliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrAliasContext attrAlias(int i) {
			return GetRuleContext<AttrAliasContext>(i);
		}
		public AttrAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrAliasContext attrAlias() {
		AttrAliasContext _localctx = new AttrAliasContext(Context, State);
		EnterRule(_localctx, 18, RULE_attrAlias);
		int _la;
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				defAlias();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				attribBlk();
				State = 371;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 361;
					defAlias();
					}
					break;
				case LCURLY:
					{
					State = 362;
					Match(LCURLY);
					State = 366;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || _la==ID) {
						{
						{
						State = 363;
						attrAlias();
						}
						}
						State = 368;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 369;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 370;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrConvertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefConvertContext defConvert() {
			return GetRuleContext<DefConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrConvertContext[] attrConvert() {
			return GetRuleContexts<AttrConvertContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrConvertContext attrConvert(int i) {
			return GetRuleContext<AttrConvertContext>(i);
		}
		public AttrConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrConvert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrConvertContext attrConvert() {
		AttrConvertContext _localctx = new AttrConvertContext(Context, State);
		EnterRule(_localctx, 20, RULE_attrConvert);
		int _la;
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RARROW:
			case LARROW:
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375;
				defConvert();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 376;
				attribBlk();
				State = 387;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RARROW:
				case LARROW:
				case AUTO:
				case VOID:
				case BOOL:
				case INT:
				case UINT:
				case ISIZE:
				case USIZE:
				case BYTE:
				case CHAR:
				case CODEPOINT:
				case STRING:
				case FLOAT:
				case I64:
				case I32:
				case I16:
				case I8:
				case U64:
				case U32:
				case U16:
				case U8:
				case B64:
				case B32:
				case B16:
				case B8:
				case F128:
				case F64:
				case F32:
				case F16:
				case VOLATILE:
				case STABLE:
				case CONST:
				case MUTABLE:
				case FUNC:
				case ID:
					{
					State = 377;
					defConvert();
					}
					break;
				case LCURLY:
					{
					State = 378;
					Match(LCURLY);
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RARROW) | (1L << LARROW) | (1L << LBRACK))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
						{
						{
						State = 379;
						attrConvert();
						}
						}
						State = 384;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 385;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 386;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrCtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefCtorContext defCtor() {
			return GetRuleContext<DefCtorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrCtorContext[] attrCtor() {
			return GetRuleContexts<AttrCtorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrCtorContext attrCtor(int i) {
			return GetRuleContext<AttrCtorContext>(i);
		}
		public AttrCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrCtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrCtorContext attrCtor() {
		AttrCtorContext _localctx = new AttrCtorContext(Context, State);
		EnterRule(_localctx, 22, RULE_attrCtor);
		int _la;
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				defCtor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				attribBlk();
				State = 403;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 393;
					defCtor();
					}
					break;
				case 2:
					{
					State = 394;
					Match(LCURLY);
					State = 398;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << PHATRARROW) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << COLON) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (CONVERT - 108)) | (1L << (FORWARD - 108)) | (1L << (MOVE - 108)) | (1L << (COPY - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
						{
						{
						State = 395;
						attrCtor();
						}
						}
						State = 400;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 401;
					Match(RCURLY);
					}
					break;
				case 3:
					{
					State = 402;
					Match(COLON);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefOpContext defOp() {
			return GetRuleContext<DefOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrOpContext[] attrOp() {
			return GetRuleContexts<AttrOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrOpContext attrOp(int i) {
			return GetRuleContext<AttrOpContext>(i);
		}
		public AttrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrOpContext attrOp() {
		AttrOpContext _localctx = new AttrOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_attrOp);
		int _la;
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LIT:
			case CONVERT:
			case FORWARD:
			case MOVE:
			case COPY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407;
				defOp();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				attribBlk();
				State = 419;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LIT:
				case CONVERT:
				case FORWARD:
				case MOVE:
				case COPY:
					{
					State = 409;
					defOp();
					}
					break;
				case LCURLY:
					{
					State = 410;
					Match(LCURLY);
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==STRING_LIT || _la==LBRACK || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (CONVERT - 156)) | (1L << (FORWARD - 156)) | (1L << (MOVE - 156)) | (1L << (COPY - 156)))) != 0)) {
						{
						{
						State = 411;
						attrOp();
						}
						}
						State = 416;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 417;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 418;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefFuncContext defFunc() {
			return GetRuleContext<DefFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrFuncContext[] attrFunc() {
			return GetRuleContexts<AttrFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrFuncContext attrFunc(int i) {
			return GetRuleContext<AttrFuncContext>(i);
		}
		public AttrFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrFuncContext attrFunc() {
		AttrFuncContext _localctx = new AttrFuncContext(Context, State);
		EnterRule(_localctx, 26, RULE_attrFunc);
		int _la;
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				defFunc();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424;
				attribBlk();
				State = 435;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 425;
					defFunc();
					}
					break;
				case LCURLY:
					{
					State = 426;
					Match(LCURLY);
					State = 430;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || _la==ID) {
						{
						{
						State = 427;
						attrFunc();
						}
						}
						State = 432;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 433;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 434;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefVarContext defVar() {
			return GetRuleContext<DefVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrVarContext[] attrVar() {
			return GetRuleContexts<AttrVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrVarContext attrVar(int i) {
			return GetRuleContext<AttrVarContext>(i);
		}
		public AttrVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrVarContext attrVar() {
		AttrVarContext _localctx = new AttrVarContext(Context, State);
		EnterRule(_localctx, 28, RULE_attrVar);
		int _la;
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 439;
				defVar();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 440;
				attribBlk();
				State = 451;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO:
				case VOID:
				case BOOL:
				case INT:
				case UINT:
				case ISIZE:
				case USIZE:
				case BYTE:
				case CHAR:
				case CODEPOINT:
				case STRING:
				case FLOAT:
				case I64:
				case I32:
				case I16:
				case I8:
				case U64:
				case U32:
				case U16:
				case U8:
				case B64:
				case B32:
				case B16:
				case B8:
				case F128:
				case F64:
				case F32:
				case F16:
				case VOLATILE:
				case STABLE:
				case CONST:
				case MUTABLE:
				case FUNC:
				case ID:
					{
					State = 441;
					defVar();
					}
					break;
				case LCURLY:
					{
					State = 442;
					Match(LCURLY);
					State = 446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LBRACK || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
						{
						{
						State = 443;
						attrVar();
						}
						}
						State = 448;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 449;
					Match(RCURLY);
					}
					break;
				case COLON:
					{
					State = 450;
					Match(COLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclNamespaceContext declNamespace() {
			return GetRuleContext<DeclNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclUsingContext declUsing() {
			return GetRuleContext<DeclUsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclAliasContext declAlias() {
			return GetRuleContext<DeclAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclAspectContext declAspect() {
			return GetRuleContext<DeclAspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclConceptContext declConcept() {
			return GetRuleContext<DeclConceptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclEnumContext declEnum() {
			return GetRuleContext<DeclEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclStructContext declStruct() {
			return GetRuleContext<DeclStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclConvertContext declConvert() {
			return GetRuleContext<DeclConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclCtorContext declCtor() {
			return GetRuleContext<DeclCtorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclDtorContext declDtor() {
			return GetRuleContext<DeclDtorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclOpContext declOp() {
			return GetRuleContext<DeclOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclFuncContext declFunc() {
			return GetRuleContext<DeclFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclVarContext declVar() {
			return GetRuleContext<DeclVarContext>(0);
		}
		public DefDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDeclContext defDecl() {
		DefDeclContext _localctx = new DefDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_defDecl);
		try {
			State = 468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				declNamespace();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456;
				declUsing();
				}
				break;
			case ALIAS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 457;
				declAlias();
				}
				break;
			case ASPECT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 458;
				declAspect();
				}
				break;
			case CONCEPT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 459;
				declConcept();
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 460;
				declEnum();
				}
				break;
			case UNION:
			case STRUCT:
			case CLASS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 461;
				declStruct();
				}
				break;
			case CONVERT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 462;
				declConvert();
				}
				break;
			case CTOR:
				EnterOuterAlt(_localctx, 9);
				{
				State = 463;
				declCtor();
				}
				break;
			case DTOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 464;
				declDtor();
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 465;
				declOp();
				}
				break;
			case FUNC:
			case PROC:
			case METHOD:
				EnterOuterAlt(_localctx, 12);
				{
				State = 466;
				declFunc();
				}
				break;
			case CONST:
			case FIELD:
			case VAR:
			case LET:
				EnterOuterAlt(_localctx, 13);
				{
				State = 467;
				declVar();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(MyllParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefNamespaceContext defNamespace() {
			return GetRuleContext<DefNamespaceContext>(0);
		}
		public DeclNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclNamespaceContext declNamespace() {
		DeclNamespaceContext _localctx = new DeclNamespaceContext(Context, State);
		EnterRule(_localctx, 32, RULE_declNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			Match(NAMESPACE);
			{
			State = 471;
			defNamespace();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclUsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MyllParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefUsingContext defUsing() {
			return GetRuleContext<DefUsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrUsingContext[] attrUsing() {
			return GetRuleContexts<AttrUsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrUsingContext attrUsing(int i) {
			return GetRuleContext<AttrUsingContext>(i);
		}
		public DeclUsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declUsing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclUsingContext declUsing() {
		DeclUsingContext _localctx = new DeclUsingContext(Context, State);
		EnterRule(_localctx, 34, RULE_declUsing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(USING);
			State = 483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 474;
				defUsing();
				}
				break;
			case LCURLY:
				{
				State = 475;
				Match(LCURLY);
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || _la==ID) {
					{
					{
					State = 476;
					attrUsing();
					}
					}
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 482;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(MyllParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefAliasContext defAlias() {
			return GetRuleContext<DefAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrAliasContext[] attrAlias() {
			return GetRuleContexts<AttrAliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrAliasContext attrAlias(int i) {
			return GetRuleContext<AttrAliasContext>(i);
		}
		public DeclAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclAliasContext declAlias() {
		DeclAliasContext _localctx = new DeclAliasContext(Context, State);
		EnterRule(_localctx, 36, RULE_declAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(ALIAS);
			State = 495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 486;
				defAlias();
				}
				break;
			case LCURLY:
				{
				State = 487;
				Match(LCURLY);
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || _la==ID) {
					{
					{
					State = 488;
					attrAlias();
					}
					}
					State = 493;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 494;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclAspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASPECT() { return GetToken(MyllParser.ASPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefAspectContext defAspect() {
			return GetRuleContext<DefAspectContext>(0);
		}
		public DeclAspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declAspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclAspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclAspectContext declAspect() {
		DeclAspectContext _localctx = new DeclAspectContext(Context, State);
		EnterRule(_localctx, 38, RULE_declAspect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(ASPECT);
			{
			State = 498;
			defAspect();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclConceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCEPT() { return GetToken(MyllParser.CONCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefConceptContext defConcept() {
			return GetRuleContext<DefConceptContext>(0);
		}
		public DeclConceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declConcept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclConcept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclConceptContext declConcept() {
		DeclConceptContext _localctx = new DeclConceptContext(Context, State);
		EnterRule(_localctx, 40, RULE_declConcept);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(CONCEPT);
			{
			State = 501;
			defConcept();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MyllParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefEnumContext defEnum() {
			return GetRuleContext<DefEnumContext>(0);
		}
		public DeclEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclEnumContext declEnum() {
		DeclEnumContext _localctx = new DeclEnumContext(Context, State);
		EnterRule(_localctx, 42, RULE_declEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(ENUM);
			{
			State = 504;
			defEnum();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KindOfStructContext kindOfStruct() {
			return GetRuleContext<KindOfStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefStructContext defStruct() {
			return GetRuleContext<DefStructContext>(0);
		}
		public DeclStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclStructContext declStruct() {
		DeclStructContext _localctx = new DeclStructContext(Context, State);
		EnterRule(_localctx, 44, RULE_declStruct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			kindOfStruct();
			{
			State = 507;
			defStruct();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclConvertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MyllParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefConvertContext defConvert() {
			return GetRuleContext<DefConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrConvertContext[] attrConvert() {
			return GetRuleContexts<AttrConvertContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrConvertContext attrConvert(int i) {
			return GetRuleContext<AttrConvertContext>(i);
		}
		public DeclConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclConvert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclConvertContext declConvert() {
		DeclConvertContext _localctx = new DeclConvertContext(Context, State);
		EnterRule(_localctx, 46, RULE_declConvert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(CONVERT);
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RARROW:
			case LARROW:
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				{
				State = 510;
				defConvert();
				}
				break;
			case LCURLY:
				{
				State = 511;
				Match(LCURLY);
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RARROW) | (1L << LARROW) | (1L << LBRACK))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
					{
					{
					State = 512;
					attrConvert();
					}
					}
					State = 517;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 518;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclCtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CTOR() { return GetToken(MyllParser.CTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefCtorContext defCtor() {
			return GetRuleContext<DefCtorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrCtorContext[] attrCtor() {
			return GetRuleContexts<AttrCtorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrCtorContext attrCtor(int i) {
			return GetRuleContext<AttrCtorContext>(i);
		}
		public DeclCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declCtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclCtorContext declCtor() {
		DeclCtorContext _localctx = new DeclCtorContext(Context, State);
		EnterRule(_localctx, 48, RULE_declCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			Match(CTOR);
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 522;
				defCtor();
				}
				break;
			case 2:
				{
				State = 523;
				Match(LCURLY);
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << PHATRARROW) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << COLON) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (CONVERT - 108)) | (1L << (FORWARD - 108)) | (1L << (MOVE - 108)) | (1L << (COPY - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 524;
					attrCtor();
					}
					}
					State = 529;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 530;
				Match(RCURLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclDtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTOR() { return GetToken(MyllParser.DTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefDtorContext defDtor() {
			return GetRuleContext<DefDtorContext>(0);
		}
		public DeclDtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declDtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclDtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclDtorContext declDtor() {
		DeclDtorContext _localctx = new DeclDtorContext(Context, State);
		EnterRule(_localctx, 50, RULE_declDtor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(DTOR);
			{
			State = 534;
			defDtor();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(MyllParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefOpContext defOp() {
			return GetRuleContext<DefOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrOpContext[] attrOp() {
			return GetRuleContexts<AttrOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrOpContext attrOp(int i) {
			return GetRuleContext<AttrOpContext>(i);
		}
		public DeclOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclOpContext declOp() {
		DeclOpContext _localctx = new DeclOpContext(Context, State);
		EnterRule(_localctx, 52, RULE_declOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(OPERATOR);
			State = 546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LIT:
			case CONVERT:
			case FORWARD:
			case MOVE:
			case COPY:
				{
				State = 537;
				defOp();
				}
				break;
			case LCURLY:
				{
				State = 538;
				Match(LCURLY);
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STRING_LIT || _la==LBRACK || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (CONVERT - 156)) | (1L << (FORWARD - 156)) | (1L << (MOVE - 156)) | (1L << (COPY - 156)))) != 0)) {
					{
					{
					State = 539;
					attrOp();
					}
					}
					State = 544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 545;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KindOfFuncContext kindOfFunc() {
			return GetRuleContext<KindOfFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefFuncContext defFunc() {
			return GetRuleContext<DefFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrFuncContext[] attrFunc() {
			return GetRuleContexts<AttrFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrFuncContext attrFunc(int i) {
			return GetRuleContext<AttrFuncContext>(i);
		}
		public DeclFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclFuncContext declFunc() {
		DeclFuncContext _localctx = new DeclFuncContext(Context, State);
		EnterRule(_localctx, 54, RULE_declFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			kindOfFunc();
			State = 558;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 549;
				defFunc();
				}
				break;
			case LCURLY:
				{
				State = 550;
				Match(LCURLY);
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || _la==ID) {
					{
					{
					State = 551;
					attrFunc();
					}
					}
					State = 556;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 557;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KindOfVarContext kindOfVar() {
			return GetRuleContext<KindOfVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefVarContext defVar() {
			return GetRuleContext<DefVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrVarContext[] attrVar() {
			return GetRuleContexts<AttrVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrVarContext attrVar(int i) {
			return GetRuleContext<AttrVarContext>(i);
		}
		public DeclVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclVarContext declVar() {
		DeclVarContext _localctx = new DeclVarContext(Context, State);
		EnterRule(_localctx, 56, RULE_declVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			kindOfVar();
			State = 570;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				{
				State = 561;
				defVar();
				}
				break;
			case LCURLY:
				{
				State = 562;
				Match(LCURLY);
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
					{
					{
					State = 563;
					attrVar();
					}
					}
					State = 568;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 569;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DefNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefNamespaceContext defNamespace() {
		DefNamespaceContext _localctx = new DefNamespaceContext(Context, State);
		EnterRule(_localctx, 58, RULE_defNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			id();
			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOPE) {
				{
				{
				State = 573;
				Match(SCOPE);
				State = 574;
				id();
				}
				}
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 590;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				{
				State = 580;
				Match(SEMI);
				}
				break;
			case COLON:
				{
				State = 581;
				Match(COLON);
				}
				break;
			case LCURLY:
				{
				State = 582;
				Match(LCURLY);
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
					{
					{
					State = 583;
					decl();
					}
					}
					State = 588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 589;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefUsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public DefUsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defUsing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefUsingContext defUsing() {
		DefUsingContext _localctx = new DefUsingContext(Context, State);
		EnterRule(_localctx, 60, RULE_defUsing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			typespecsNested();
			State = 593;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		public DefAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefAliasContext defAlias() {
		DefAliasContext _localctx = new DefAliasContext(Context, State);
		EnterRule(_localctx, 62, RULE_defAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			id();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 596;
				tplParams();
				}
			}

			State = 599;
			Match(ASSIGN);
			State = 600;
			typespec();
			State = 601;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefAspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		public DefAspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defAspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefAspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefAspectContext defAspect() {
		DefAspectContext _localctx = new DefAspectContext(Context, State);
		EnterRule(_localctx, 64, RULE_defAspect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			id();
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 604;
				tplParams();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefConceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DefConceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defConcept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefConcept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefConceptContext defConcept() {
		DefConceptContext _localctx = new DefConceptContext(Context, State);
		EnterRule(_localctx, 66, RULE_defConcept);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			id();
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 608;
				tplParams();
				}
			}

			State = 613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 611;
				Match(COLON);
				State = 612;
				typespecsNested();
				}
			}

			State = 615;
			Match(LCURLY);
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
				{
				{
				State = 616;
				decl();
				}
				}
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 622;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefEnumContext : ParserRuleContext {
		public TypespecBasicContext bases;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdExprsContext idExprs() {
			return GetRuleContext<IdExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecBasicContext typespecBasic() {
			return GetRuleContext<TypespecBasicContext>(0);
		}
		public DefEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefEnumContext defEnum() {
		DefEnumContext _localctx = new DefEnumContext(Context, State);
		EnterRule(_localctx, 68, RULE_defEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			id();
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 625;
				Match(COLON);
				State = 626;
				_localctx.bases = typespecBasic();
				}
			}

			State = 629;
			Match(LCURLY);
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 630;
				idExprs();
				}
			}

			State = 633;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefStructContext : ParserRuleContext {
		public TypespecsNestedContext bases;
		public TypespecsNestedContext reqs;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext[] typespecsNested() {
			return GetRuleContexts<TypespecsNestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested(int i) {
			return GetRuleContext<TypespecsNestedContext>(i);
		}
		public DefStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefStructContext defStruct() {
		DefStructContext _localctx = new DefStructContext(Context, State);
		EnterRule(_localctx, 70, RULE_defStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			id();
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 636;
				tplParams();
				}
			}

			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 639;
				Match(COLON);
				State = 640;
				_localctx.bases = typespecsNested();
				}
			}

			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 643;
				Match(REQUIRES);
				State = 644;
				_localctx.reqs = typespecsNested();
				}
			}

			State = 647;
			Match(LCURLY);
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NAMESPACE - 103)) | (1L << (CONST - 103)) | (1L << (USING - 103)) | (1L << (ALIAS - 103)) | (1L << (UNION - 103)) | (1L << (STRUCT - 103)) | (1L << (CLASS - 103)) | (1L << (CTOR - 103)) | (1L << (DTOR - 103)) | (1L << (FUNC - 103)) | (1L << (PROC - 103)) | (1L << (METHOD - 103)) | (1L << (ENUM - 103)) | (1L << (ASPECT - 103)) | (1L << (CONCEPT - 103)) | (1L << (FIELD - 103)) | (1L << (OPERATOR - 103)) | (1L << (VAR - 103)) | (1L << (LET - 103)) | (1L << (CONVERT - 103)))) != 0)) {
				{
				{
				State = 648;
				decl();
				}
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 654;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefConvertContext : ParserRuleContext {
		public TypespecContext to;
		public TypespecContext from;
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(MyllParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public DefConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefConvert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefConvertContext defConvert() {
		DefConvertContext _localctx = new DefConvertContext(Context, State);
		EnterRule(_localctx, 72, RULE_defConvert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RARROW:
				{
				State = 656;
				Match(RARROW);
				State = 657;
				_localctx.to = typespec();
				}
				break;
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				{
				State = 658;
				_localctx.from = typespec();
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 659;
					id();
					}
				}

				State = 662;
				Match(RARROW);
				}
				break;
			case LARROW:
				{
				State = 664;
				Match(LARROW);
				State = 665;
				_localctx.from = typespec();
				State = 667;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 666;
					id();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 671;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefCtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KindOfPassingContext kindOfPassing() {
			return GetRuleContext<KindOfPassingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MyllParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(MyllParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitListContext initList() {
			return GetRuleContext<InitListContext>(0);
		}
		public DefCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defCtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefCtorContext defCtor() {
		DefCtorContext _localctx = new DefCtorContext(Context, State);
		EnterRule(_localctx, 74, RULE_defCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 673;
				kindOfPassing();
				State = 675;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 674;
					id();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 677;
				Match(CONVERT);
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LARROW) {
					{
					State = 678;
					Match(LARROW);
					}
				}

				State = 681;
				typespec();
				State = 683;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 682;
					id();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 685;
				Match(CONVERT);
				State = 686;
				typespec();
				State = 688;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 687;
					id();
					}
					break;
				}
				State = 691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 690;
					Match(RARROW);
					}
				}

				}
				break;
			case 4:
				{
				State = 694;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 693;
					funcTypeDef();
					}
					break;
				}
				State = 697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 696;
					initList();
					}
				}

				}
				break;
			}
			State = 701;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefDtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		public DefDtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defDtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefDtorContext defDtor() {
		DefDtorContext _localctx = new DefDtorContext(Context, State);
		EnterRule(_localctx, 76, RULE_defDtor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 703;
				Match(LPAREN);
				State = 704;
				Match(RPAREN);
				}
				break;
			}
			State = 707;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KindOfPassingContext kindOfPassing() {
			return GetRuleContext<KindOfPassingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MyllParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(MyllParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefCoreFuncContext defCoreFunc() {
			return GetRuleContext<DefCoreFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		public DefOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefOpContext defOp() {
		DefOpContext _localctx = new DefOpContext(Context, State);
		EnterRule(_localctx, 78, RULE_defOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORWARD:
			case MOVE:
			case COPY:
				{
				State = 709;
				kindOfPassing();
				State = 710;
				Match(ASSIGN);
				State = 712;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 711;
					id();
					}
					break;
				}
				}
				break;
			case CONVERT:
				{
				State = 714;
				Match(CONVERT);
				State = 716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 715;
					tplParams();
					}
				}

				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 718;
					Match(RARROW);
					}
				}

				State = 721;
				typespec();
				}
				break;
			case STRING_LIT:
				{
				State = 722;
				Match(STRING_LIT);
				State = 723;
				defCoreFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 726;
				Match(REQUIRES);
				State = 727;
				typespecsNested();
				}
			}

			State = 730;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefCoreFuncContext defCoreFunc() {
			return GetRuleContext<DefCoreFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(MyllParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecsNestedContext typespecsNested() {
			return GetRuleContext<TypespecsNestedContext>(0);
		}
		public DefFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefFuncContext defFunc() {
		DefFuncContext _localctx = new DefFuncContext(Context, State);
		EnterRule(_localctx, 80, RULE_defFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			id();
			State = 733;
			defCoreFunc();
			State = 736;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 734;
				Match(REQUIRES);
				State = 735;
				typespecsNested();
				}
			}

			State = 738;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefCoreFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public DefCoreFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defCoreFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefCoreFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefCoreFuncContext defCoreFunc() {
		DefCoreFuncContext _localctx = new DefCoreFuncContext(Context, State);
		EnterRule(_localctx, 82, RULE_defCoreFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 740;
				tplParams();
				}
			}

			State = 744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 743;
				funcTypeDef();
				}
				break;
			}
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RARROW) {
				{
				State = 746;
				Match(RARROW);
				State = 747;
				typespec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdAcorsContext typedIdAcors() {
			return GetRuleContext<TypedIdAcorsContext>(0);
		}
		public DefVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefVarContext defVar() {
		DefVarContext _localctx = new DefVarContext(Context, State);
		EnterRule(_localctx, 84, RULE_defVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			typedIdAcors();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefStmtContext defStmt() {
			return GetRuleContext<DefStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 752;
				attribBlk();
				}
			}

			State = 764;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LIT:
			case CHAR_LIT:
			case DBL_PLUS:
			case DBL_MINUS:
			case AUTOINDEX:
			case LPAREN:
			case AMP:
			case STAR:
			case PLUS:
			case MINUS:
			case SEMI:
			case EM:
			case TILDE:
			case USCORE:
			case CONST:
			case USING:
			case ALIAS:
			case FUNC:
			case FIELD:
			case VAR:
			case LET:
			case LOOP:
			case FOR:
			case DO:
			case WHILE:
			case IF:
			case SWITCH:
			case BREAK:
			case RETURN:
			case TRY:
			case DEFER:
			case SIZEOF:
			case NEW:
			case DELETE:
			case THROW:
			case ID:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				{
				State = 755;
				defStmt();
				}
				break;
			case LCURLY:
				{
				State = 756;
				Match(LCURLY);
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 757;
					stmt();
					}
					}
					State = 762;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 763;
				Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclUsingContext declUsing() {
			return GetRuleContext<DeclUsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclAliasContext declAlias() {
			return GetRuleContext<DeclAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclVarContext declVar() {
			return GetRuleContext<DeclVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtIfContext stmtIf() {
			return GetRuleContext<StmtIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtSwitchContext stmtSwitch() {
			return GetRuleContext<StmtSwitchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtLoopContext stmtLoop() {
			return GetRuleContext<StmtLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtForContext stmtFor() {
			return GetRuleContext<StmtForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtWhileContext stmtWhile() {
			return GetRuleContext<StmtWhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtDoWhileContext stmtDoWhile() {
			return GetRuleContext<StmtDoWhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtTimesContext stmtTimes() {
			return GetRuleContext<StmtTimesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtTryCatchContext stmtTryCatch() {
			return GetRuleContext<StmtTryCatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtReturnContext stmtReturn() {
			return GetRuleContext<StmtReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtReturnIfContext stmtReturnIf() {
			return GetRuleContext<StmtReturnIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtThrowContext stmtThrow() {
			return GetRuleContext<StmtThrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtBreakContext stmtBreak() {
			return GetRuleContext<StmtBreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtAssignContext stmtAssign() {
			return GetRuleContext<StmtAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtAggregateContext stmtAggregate() {
			return GetRuleContext<StmtAggregateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtDeferContext stmtDefer() {
			return GetRuleContext<StmtDeferContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtExprContext stmtExpr() {
			return GetRuleContext<StmtExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtEmptyContext stmtEmpty() {
			return GetRuleContext<StmtEmptyContext>(0);
		}
		public DefStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefStmtContext defStmt() {
		DefStmtContext _localctx = new DefStmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_defStmt);
		try {
			State = 786;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 766;
				declUsing();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 767;
				declAlias();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 768;
				declVar();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 769;
				stmtIf();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 770;
				stmtSwitch();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 771;
				stmtLoop();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 772;
				stmtFor();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 773;
				stmtWhile();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 774;
				stmtDoWhile();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 775;
				stmtTimes();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 776;
				stmtTryCatch();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 777;
				stmtReturn();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 778;
				stmtReturnIf();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 779;
				stmtThrow();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 780;
				stmtBreak();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 781;
				stmtAssign();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 782;
				stmtAggregate();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 783;
				stmtDefer();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 784;
				stmtExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 785;
				stmtEmpty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(MyllParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(MyllParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondThenContext[] condThen() {
			return GetRuleContexts<CondThenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondThenContext condThen(int i) {
			return GetRuleContext<CondThenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(MyllParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(MyllParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public StmtIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtIfContext stmtIf() {
		StmtIfContext _localctx = new StmtIfContext(Context, State);
		EnterRule(_localctx, 90, RULE_stmtIf);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 788;
			Match(IF);
			State = 789;
			condThen();
			State = 795;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 790;
					Match(ELSE);
					State = 791;
					Match(IF);
					State = 792;
					condThen();
					}
					} 
				}
				State = 797;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			State = 800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 798;
				Match(ELSE);
				State = 799;
				stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtSwitchContext : ParserRuleContext {
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(MyllParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public StmtSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtSwitch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtSwitchContext stmtSwitch() {
		StmtSwitchContext _localctx = new StmtSwitchContext(Context, State);
		EnterRule(_localctx, 92, RULE_stmtSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			Match(SWITCH);
			State = 803;
			Match(LPAREN);
			State = 804;
			_localctx.cond = expr(0);
			State = 805;
			Match(RPAREN);
			State = 806;
			Match(LCURLY);
			State = 808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 807;
				caseBlock();
				}
				}
				State = 810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE || _la==DEFAULT) {
				{
				State = 812;
				defaultBlock();
				}
			}

			State = 815;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtLoopContext : ParserRuleContext {
		public StmtContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(MyllParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public StmtLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtLoopContext stmtLoop() {
		StmtLoopContext _localctx = new StmtLoopContext(Context, State);
		EnterRule(_localctx, 94, RULE_stmtLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(LOOP);
			State = 818;
			_localctx.body = stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtForContext : ParserRuleContext {
		public StmtContext init;
		public ExprContext cond;
		public ExprContext iter;
		public StmtContext body;
		public StmtContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MyllParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StmtForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtFor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtForContext stmtFor() {
		StmtForContext _localctx = new StmtForContext(Context, State);
		EnterRule(_localctx, 96, RULE_stmtFor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(FOR);
			State = 821;
			Match(LPAREN);
			State = 822;
			_localctx.init = stmt();
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
				{
				State = 823;
				_localctx.cond = expr(0);
				}
			}

			State = 826;
			Match(SEMI);
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
				{
				State = 827;
				_localctx.iter = expr(0);
				}
			}

			State = 830;
			Match(RPAREN);
			State = 831;
			_localctx.body = stmt();
			State = 834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 832;
				Match(ELSE);
				State = 833;
				_localctx.els = stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtWhileContext : ParserRuleContext {
		public ExprContext cond;
		public StmtContext body;
		public StmtContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyllParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		public StmtWhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtWhile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtWhileContext stmtWhile() {
		StmtWhileContext _localctx = new StmtWhileContext(Context, State);
		EnterRule(_localctx, 98, RULE_stmtWhile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			Match(WHILE);
			State = 837;
			Match(LPAREN);
			State = 838;
			_localctx.cond = expr(0);
			State = 839;
			Match(RPAREN);
			State = 840;
			_localctx.body = stmt();
			State = 843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 841;
				Match(ELSE);
				State = 842;
				_localctx.els = stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtDoWhileContext : ParserRuleContext {
		public StmtContext body;
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyllParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtDoWhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtDoWhile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtDoWhileContext stmtDoWhile() {
		StmtDoWhileContext _localctx = new StmtDoWhileContext(Context, State);
		EnterRule(_localctx, 100, RULE_stmtDoWhile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845;
			Match(DO);
			State = 846;
			_localctx.body = stmt();
			State = 847;
			Match(WHILE);
			State = 848;
			Match(LPAREN);
			State = 849;
			_localctx.cond = expr(0);
			State = 850;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtTimesContext : ParserRuleContext {
		public ExprContext count;
		public IdContext name;
		public StmtContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(MyllParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		public StmtTimesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtTimes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtTimes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtTimesContext stmtTimes() {
		StmtTimesContext _localctx = new StmtTimesContext(Context, State);
		EnterRule(_localctx, 102, RULE_stmtTimes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DO) {
				{
				State = 852;
				Match(DO);
				}
			}

			State = 855;
			_localctx.count = expr(0);
			State = 856;
			Match(TIMES);
			State = 862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 857;
				_localctx.name = id();
				State = 860;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 858;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 859;
					Match(INTEGER_LIT);
					}
					break;
				}
				}
				break;
			}
			State = 864;
			_localctx.body = stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtTryCatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(MyllParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(MyllParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(MyllParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext[] funcTypeDef() {
			return GetRuleContexts<FuncTypeDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef(int i) {
			return GetRuleContext<FuncTypeDefContext>(i);
		}
		public StmtTryCatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtTryCatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtTryCatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtTryCatchContext stmtTryCatch() {
		StmtTryCatchContext _localctx = new StmtTryCatchContext(Context, State);
		EnterRule(_localctx, 104, RULE_stmtTryCatch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 866;
			Match(TRY);
			State = 867;
			stmt();
			State = 873;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 868;
					Match(CATCH);
					State = 870;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
					case 1:
						{
						State = 869;
						funcTypeDef();
						}
						break;
					}
					State = 872;
					stmt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 875;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MyllParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtReturnContext stmtReturn() {
		StmtReturnContext _localctx = new StmtReturnContext(Context, State);
		EnterRule(_localctx, 106, RULE_stmtReturn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			Match(RETURN);
			State = 879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
				{
				State = 878;
				expr(0);
				}
			}

			State = 881;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtReturnIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyllParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MyllParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MyllParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public StmtReturnIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtReturnIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtReturnIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtReturnIfContext stmtReturnIf() {
		StmtReturnIfContext _localctx = new StmtReturnIfContext(Context, State);
		EnterRule(_localctx, 108, RULE_stmtReturnIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			Match(DO);
			State = 884;
			Match(RETURN);
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
				{
				State = 885;
				expr(0);
				}
			}

			State = 888;
			Match(IF);
			State = 889;
			Match(LPAREN);
			State = 890;
			expr(0);
			State = 891;
			Match(RPAREN);
			State = 892;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtThrowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public StmtThrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtThrow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtThrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtThrowContext stmtThrow() {
		StmtThrowContext _localctx = new StmtThrowContext(Context, State);
		EnterRule(_localctx, 110, RULE_stmtThrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			Match(THROW);
			State = 895;
			expr(0);
			State = 896;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtBreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MyllParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		public StmtBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtBreak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtBreakContext stmtBreak() {
		StmtBreakContext _localctx = new StmtBreakContext(Context, State);
		EnterRule(_localctx, 112, RULE_stmtBreak);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			Match(BREAK);
			State = 900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER_LIT) {
				{
				State = 899;
				Match(INTEGER_LIT);
				}
			}

			State = 902;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContinueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MyllParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		public StmtContinueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtContinue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtContinue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContinueContext stmtContinue() {
		StmtContinueContext _localctx = new StmtContinueContext(Context, State);
		EnterRule(_localctx, 114, RULE_stmtContinue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			Match(CONTINUE);
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER_LIT) {
				{
				State = 905;
				Match(INTEGER_LIT);
				}
			}

			State = 908;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContinue2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MyllParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MyllParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MyllParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		public StmtContinue2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtContinue2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtContinue2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContinue2Context stmtContinue2() {
		StmtContinue2Context _localctx = new StmtContinue2Context(Context, State);
		EnterRule(_localctx, 116, RULE_stmtContinue2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			Match(CONTINUE);
			State = 915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				{
				State = 911;
				Match(CASE);
				State = 912;
				expr(0);
				}
				break;
			case DEFAULT:
				{
				State = 913;
				Match(DEFAULT);
				}
				break;
			case ELSE:
				{
				State = 914;
				Match(ELSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 917;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignOPContext[] assignOP() {
			return GetRuleContexts<AssignOPContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignOPContext assignOP(int i) {
			return GetRuleContext<AssignOPContext>(i);
		}
		public StmtAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtAssignContext stmtAssign() {
		StmtAssignContext _localctx = new StmtAssignContext(Context, State);
		EnterRule(_localctx, 118, RULE_stmtAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919;
			expr(0);
			State = 923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 920;
				assignOP();
				State = 921;
				expr(0);
				}
				}
				State = 925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ASSIGN );
			State = 927;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtAggregateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggrAssignOPContext aggrAssignOP() {
			return GetRuleContext<AggrAssignOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public StmtAggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtAggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtAggregateContext stmtAggregate() {
		StmtAggregateContext _localctx = new StmtAggregateContext(Context, State);
		EnterRule(_localctx, 120, RULE_stmtAggregate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			expr(0);
			State = 930;
			aggrAssignOP();
			State = 931;
			expr(0);
			State = 932;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtDeferContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFER() { return GetToken(MyllParser.DEFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public StmtDeferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtDefer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtDefer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtDeferContext stmtDefer() {
		StmtDeferContext _localctx = new StmtDeferContext(Context, State);
		EnterRule(_localctx, 122, RULE_stmtDefer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			Match(DEFER);
			State = 935;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public StmtExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtExprContext stmtExpr() {
		StmtExprContext _localctx = new StmtExprContext(Context, State);
		EnterRule(_localctx, 124, RULE_stmtExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937;
			expr(0);
			State = 938;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public StmtEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtEmptyContext stmtEmpty() {
		StmtEmptyContext _localctx = new StmtEmptyContext(Context, State);
		EnterRule(_localctx, 126, RULE_stmtEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindOfStructContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(MyllParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MyllParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MyllParser.UNION, 0); }
		public KindOfStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindOfStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindOfStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindOfStructContext kindOfStruct() {
		KindOfStructContext _localctx = new KindOfStructContext(Context, State);
		EnterRule(_localctx, 128, RULE_kindOfStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (UNION - 112)) | (1L << (STRUCT - 112)) | (1L << (CLASS - 112)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindOfFuncContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(MyllParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(MyllParser.METHOD, 0); }
		public KindOfFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindOfFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindOfFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindOfFuncContext kindOfFunc() {
		KindOfFuncContext _localctx = new KindOfFuncContext(Context, State);
		EnterRule(_localctx, 130, RULE_kindOfFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (PROC - 117)) | (1L << (METHOD - 117)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindOfVarContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(MyllParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MyllParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(MyllParser.LET, 0); }
		public KindOfVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindOfVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindOfVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindOfVarContext kindOfVar() {
		KindOfVarContext _localctx = new KindOfVarContext(Context, State);
		EnterRule(_localctx, 132, RULE_kindOfVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindOfPassingContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MyllParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(MyllParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(MyllParser.FORWARD, 0); }
		public KindOfPassingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindOfPassing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindOfPassing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindOfPassingContext kindOfPassing() {
		KindOfPassingContext _localctx = new KindOfPassingContext(Context, State);
		EnterRule(_localctx, 134, RULE_kindOfPassing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (FORWARD - 157)) | (1L << (MOVE - 157)) | (1L << (COPY - 157)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PLUS() { return GetToken(MyllParser.DBL_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_MINUS() { return GetToken(MyllParser.DBL_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM() { return GetToken(MyllParser.EM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(MyllParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		public PreOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreOPContext preOP() {
		PreOPContext _localctx = new PreOPContext(Context, State);
		EnterRule(_localctx, 136, RULE_preOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PLUS() { return GetToken(MyllParser.DBL_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_MINUS() { return GetToken(MyllParser.DBL_MINUS, 0); }
		public PostOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostOPContext postOP() {
		PostOPContext _localctx = new PostOPContext(Context, State);
		EnterRule(_localctx, 138, RULE_postOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DBL_PLUS || _la==DBL_MINUS) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MyllParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MyllParser.STAR, i);
		}
		public PowOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowOPContext powOP() {
		PowOPContext _localctx = new PowOPContext(Context, State);
		EnterRule(_localctx, 140, RULE_powOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954;
			Match(STAR);
			State = 955;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(MyllParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MyllParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MyllParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(MyllParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MyllParser.DIV, 0); }
		public MultOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOPContext multOP() {
		MultOPContext _localctx = new MultOPContext(Context, State);
		EnterRule(_localctx, 142, RULE_multOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AMP) | (1L << STAR) | (1L << SLASH) | (1L << MOD) | (1L << DOT) | (1L << CROSS) | (1L << DIV))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAT() { return GetToken(MyllParser.HAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(MyllParser.PIPE, 0); }
		public AddOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOPContext addOP() {
		AddOPContext _localctx = new AddOPContext(Context, State);
		EnterRule(_localctx, 144, RULE_addOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << PIPE) | (1L << HAT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(MyllParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(MyllParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(MyllParser.GT, i);
		}
		public ShiftOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOPContext shiftOP() {
		ShiftOPContext _localctx = new ShiftOPContext(Context, State);
		EnterRule(_localctx, 146, RULE_shiftOP);
		try {
			State = 964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LSHIFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 961;
				Match(LSHIFT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 962;
				Match(GT);
				State = 963;
				Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARE() { return GetToken(MyllParser.COMPARE, 0); }
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 148, RULE_cmpOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			Match(COMPARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(MyllParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(MyllParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		public RelOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelOPContext relOP() {
		RelOPContext _localctx = new RelOPContext(Context, State);
		EnterRule(_localctx, 150, RULE_relOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTEQ) | (1L << GTEQ) | (1L << LT) | (1L << GT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MyllParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(MyllParser.NEQ, 0); }
		public EqualOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualOPContext equalOP() {
		EqualOPContext _localctx = new EqualOPContext(Context, State);
		EnterRule(_localctx, 152, RULE_equalOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==EQ || _la==NEQ) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_AMP() { return GetToken(MyllParser.DBL_AMP, 0); }
		public AndOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOPContext andOP() {
		AndOPContext _localctx = new AndOPContext(Context, State);
		EnterRule(_localctx, 154, RULE_andOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972;
			Match(DBL_AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_PIPE() { return GetToken(MyllParser.DBL_PIPE, 0); }
		public OrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrOPContext orOP() {
		OrOPContext _localctx = new OrOPContext(Context, State);
		EnterRule(_localctx, 156, RULE_orOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974;
			Match(DBL_PIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulCoalOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_COLON() { return GetToken(MyllParser.QM_COLON, 0); }
		public NulCoalOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulCoalOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulCoalOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulCoalOPContext nulCoalOP() {
		NulCoalOPContext _localctx = new NulCoalOPContext(Context, State);
		EnterRule(_localctx, 158, RULE_nulCoalOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			Match(QM_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemAccOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MyllParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_POINT() { return GetToken(MyllParser.QM_POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		public MemAccOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memAccOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemAccOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemAccOPContext memAccOP() {
		MemAccOPContext _localctx = new MemAccOPContext(Context, State);
		EnterRule(_localctx, 160, RULE_memAccOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RARROW) | (1L << QM_POINT) | (1L << POINT))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemAccPtrOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_STAR() { return GetToken(MyllParser.POINT_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_POINT_STAR() { return GetToken(MyllParser.QM_POINT_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW_STAR() { return GetToken(MyllParser.ARROW_STAR, 0); }
		public MemAccPtrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memAccPtrOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemAccPtrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemAccPtrOPContext memAccPtrOP() {
		MemAccPtrOPContext _localctx = new MemAccPtrOPContext(Context, State);
		EnterRule(_localctx, 162, RULE_memAccPtrOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 980;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARROW_STAR) | (1L << POINT_STAR) | (1L << QM_POINT_STAR))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		public AssignOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOPContext assignOP() {
		AssignOPContext _localctx = new AssignOPContext(Context, State);
		EnterRule(_localctx, 164, RULE_assignOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggrAssignOPContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_POW() { return GetToken(MyllParser.AS_POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_MUL() { return GetToken(MyllParser.AS_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SLASH() { return GetToken(MyllParser.AS_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_MOD() { return GetToken(MyllParser.AS_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_AND() { return GetToken(MyllParser.AS_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_DOT() { return GetToken(MyllParser.AS_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_CROSS() { return GetToken(MyllParser.AS_CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_DIV() { return GetToken(MyllParser.AS_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_ADD() { return GetToken(MyllParser.AS_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SUB() { return GetToken(MyllParser.AS_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_OR() { return GetToken(MyllParser.AS_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_XOR() { return GetToken(MyllParser.AS_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_LSH() { return GetToken(MyllParser.AS_LSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_RSH() { return GetToken(MyllParser.AS_RSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_QM() { return GetToken(MyllParser.AS_QM, 0); }
		public AggrAssignOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggrAssignOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrAssignOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggrAssignOPContext aggrAssignOP() {
		AggrAssignOPContext _localctx = new AggrAssignOPContext(Context, State);
		EnterRule(_localctx, 166, RULE_aggrAssignOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (AS_POW - 60)) | (1L << (AS_MUL - 60)) | (1L << (AS_SLASH - 60)) | (1L << (AS_MOD - 60)) | (1L << (AS_DOT - 60)) | (1L << (AS_CROSS - 60)) | (1L << (AS_DIV - 60)) | (1L << (AS_ADD - 60)) | (1L << (AS_SUB - 60)) | (1L << (AS_LSH - 60)) | (1L << (AS_RSH - 60)) | (1L << (AS_AND - 60)) | (1L << (AS_OR - 60)) | (1L << (AS_XOR - 60)) | (1L << (AS_QM - 60)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_LIT() { return GetToken(MyllParser.CLASS_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(MyllParser.HEX_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LIT() { return GetToken(MyllParser.OCT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LIT() { return GetToken(MyllParser.BIN_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LIT() { return GetToken(MyllParser.INTEGER_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(MyllParser.FLOAT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(MyllParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LIT() { return GetToken(MyllParser.CHAR_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LIT() { return GetToken(MyllParser.BOOL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUL() { return GetToken(MyllParser.NUL, 0); }
		public LitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LitContext lit() {
		LitContext _localctx = new LitContext(Context, State);
		EnterRule(_localctx, 168, RULE_lit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LIT || _la==CHAR_LIT || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (NUL - 161)) | (1L << (CLASS_LIT - 161)) | (1L << (BOOL_LIT - 161)) | (1L << (FLOAT_LIT - 161)) | (1L << (HEX_LIT - 161)) | (1L << (OCT_LIT - 161)) | (1L << (BIN_LIT - 161)) | (1L << (INTEGER_LIT - 161)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINDEX() { return GetToken(MyllParser.AUTOINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USCORE() { return GetToken(MyllParser.USCORE, 0); }
		public WildIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildIdContext wildId() {
		WildIdContext _localctx = new WildIdContext(Context, State);
		EnterRule(_localctx, 170, RULE_wildId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTOINDEX || _la==USCORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyllParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 172, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdOrLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		public IdOrLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idOrLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdOrLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdOrLitContext idOrLit() {
		IdOrLitContext _localctx = new IdOrLitContext(Context, State);
		EnterRule(_localctx, 174, RULE_idOrLit);
		try {
			State = 994;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 992;
				id();
				}
				break;
			case STRING_LIT:
			case CHAR_LIT:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 993;
				lit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(MyllParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MyllParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MyllParser.BOOL, 0); }
		public SpecialTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialTypeContext specialType() {
		SpecialTypeContext _localctx = new SpecialTypeContext(Context, State);
		EnterRule(_localctx, 176, RULE_specialType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MyllParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEPOINT() { return GetToken(MyllParser.CODEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MyllParser.STRING, 0); }
		public CharTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharTypeContext charType() {
		CharTypeContext _localctx = new CharTypeContext(Context, State);
		EnterRule(_localctx, 178, RULE_charType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (CHAR - 83)) | (1L << (CODEPOINT - 83)) | (1L << (STRING - 83)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MyllParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F128() { return GetToken(MyllParser.F128, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F64() { return GetToken(MyllParser.F64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F32() { return GetToken(MyllParser.F32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F16() { return GetToken(MyllParser.F16, 0); }
		public FloatingTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingTypeContext floatingType() {
		FloatingTypeContext _localctx = new FloatingTypeContext(Context, State);
		EnterRule(_localctx, 180, RULE_floatingType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (FLOAT - 86)) | (1L << (F128 - 86)) | (1L << (F64 - 86)) | (1L << (F32 - 86)) | (1L << (F16 - 86)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(MyllParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B64() { return GetToken(MyllParser.B64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B32() { return GetToken(MyllParser.B32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B16() { return GetToken(MyllParser.B16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B8() { return GetToken(MyllParser.B8, 0); }
		public BinaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryTypeContext binaryType() {
		BinaryTypeContext _localctx = new BinaryTypeContext(Context, State);
		EnterRule(_localctx, 182, RULE_binaryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (BYTE - 82)) | (1L << (B64 - 82)) | (1L << (B32 - 82)) | (1L << (B16 - 82)) | (1L << (B8 - 82)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MyllParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISIZE() { return GetToken(MyllParser.ISIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(MyllParser.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(MyllParser.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(MyllParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(MyllParser.I8, 0); }
		public SignedIntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedIntType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntTypeContext signedIntType() {
		SignedIntTypeContext _localctx = new SignedIntTypeContext(Context, State);
		EnterRule(_localctx, 184, RULE_signedIntType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (INT - 78)) | (1L << (ISIZE - 78)) | (1L << (I64 - 78)) | (1L << (I32 - 78)) | (1L << (I16 - 78)) | (1L << (I8 - 78)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignIntTypeContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(MyllParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USIZE() { return GetToken(MyllParser.USIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U64() { return GetToken(MyllParser.U64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U32() { return GetToken(MyllParser.U32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U16() { return GetToken(MyllParser.U16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U8() { return GetToken(MyllParser.U8, 0); }
		public UnsignIntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignIntType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignIntTypeContext unsignIntType() {
		UnsignIntTypeContext _localctx = new UnsignIntTypeContext(Context, State);
		EnterRule(_localctx, 186, RULE_unsignIntType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (UINT - 79)) | (1L << (USIZE - 79)) | (1L << (U64 - 79)) | (1L << (U32 - 79)) | (1L << (U16 - 79)) | (1L << (U8 - 79)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTABLE() { return GetToken(MyllParser.MUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(MyllParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(MyllParser.STABLE, 0); }
		public QualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualContext qual() {
		QualContext _localctx = new QualContext(Context, State);
		EnterRule(_localctx, 188, RULE_qual);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePtrContext : ParserRuleContext {
		public IToken ptr;
		public IToken ary;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_AMP() { return GetToken(MyllParser.DBL_AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MyllParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MyllParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PTR_TO_ARY() { return GetToken(MyllParser.PTR_TO_ARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_LBRACK() { return GetToken(MyllParser.AT_LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM() { return GetToken(MyllParser.EM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		public TypePtrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePtr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePtr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePtrContext typePtr() {
		TypePtrContext _localctx = new TypePtrContext(Context, State);
		EnterRule(_localctx, 190, RULE_typePtr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)))) != 0)) {
				{
				{
				State = 1010;
				qual();
				}
				}
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1022;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PTR_TO_ARY:
			case DBL_AMP:
			case AMP:
			case STAR:
				{
				State = 1016;
				_localctx.ptr = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PTR_TO_ARY) | (1L << DBL_AMP) | (1L << AMP) | (1L << STAR))) != 0)) ) {
					_localctx.ptr = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AT_LBRACK:
			case LBRACK:
				{
				State = 1017;
				_localctx.ary = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AT_LBRACK || _la==LBRACK) ) {
					_localctx.ary = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
					{
					State = 1018;
					expr(0);
					}
				}

				State = 1021;
				Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 1024;
				_localctx.suffix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << EM) | (1L << QM))) != 0)) ) {
					_localctx.suffix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdTplArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplArgsContext tplArgs() {
			return GetRuleContext<TplArgsContext>(0);
		}
		public IdTplArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idTplArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdTplArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdTplArgsContext idTplArgs() {
		IdTplArgsContext _localctx = new IdTplArgsContext(Context, State);
		EnterRule(_localctx, 192, RULE_idTplArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027;
			id();
			State = 1029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1028;
				tplArgs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecBasicContext typespecBasic() {
			return GetRuleContext<TypespecBasicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecFuncContext typespecFunc() {
			return GetRuleContext<TypespecFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext typespecNested() {
			return GetRuleContext<TypespecNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePtrContext[] typePtr() {
			return GetRuleContexts<TypePtrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePtrContext typePtr(int i) {
			return GetRuleContext<TypePtrContext>(i);
		}
		public TypespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecContext typespec() {
		TypespecContext _localctx = new TypespecContext(Context, State);
		EnterRule(_localctx, 194, RULE_typespec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)))) != 0)) {
				{
				{
				State = 1031;
				qual();
				}
				}
				State = 1036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1059;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
				{
				State = 1037;
				typespecBasic();
				State = 1041;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1038;
						typePtr();
						}
						} 
					}
					State = 1043;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
				}
				}
				break;
			case FUNC:
				{
				State = 1044;
				Match(FUNC);
				State = 1048;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1045;
						typePtr();
						}
						} 
					}
					State = 1050;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
				}
				State = 1051;
				typespecFunc();
				}
				break;
			case ID:
				{
				State = 1052;
				typespecNested();
				State = 1056;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1053;
						typePtr();
						}
						} 
					}
					State = 1058;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecBasicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialTypeContext specialType() {
			return GetRuleContext<SpecialTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharTypeContext charType() {
			return GetRuleContext<CharTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatingTypeContext floatingType() {
			return GetRuleContext<FloatingTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryTypeContext binaryType() {
			return GetRuleContext<BinaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedIntTypeContext signedIntType() {
			return GetRuleContext<SignedIntTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignIntTypeContext unsignIntType() {
			return GetRuleContext<UnsignIntTypeContext>(0);
		}
		public TypespecBasicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecBasic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecBasic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecBasicContext typespecBasic() {
		TypespecBasicContext _localctx = new TypespecBasicContext(Context, State);
		EnterRule(_localctx, 196, RULE_typespecBasic);
		try {
			State = 1067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1061;
				specialType();
				}
				break;
			case CHAR:
			case CODEPOINT:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1062;
				charType();
				}
				break;
			case FLOAT:
			case F128:
			case F64:
			case F32:
			case F16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1063;
				floatingType();
				}
				break;
			case BYTE:
			case B64:
			case B32:
			case B16:
			case B8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1064;
				binaryType();
				}
				break;
			case INT:
			case ISIZE:
			case I64:
			case I32:
			case I16:
			case I8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1065;
				signedIntType();
				}
				break;
			case UINT:
			case USIZE:
			case U64:
			case U32:
			case U16:
			case U8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1066;
				unsignIntType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public TypespecFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecFuncContext typespecFunc() {
		TypespecFuncContext _localctx = new TypespecFuncContext(Context, State);
		EnterRule(_localctx, 198, RULE_typespecFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 1069;
				funcTypeDef();
				}
				break;
			}
			State = 1074;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1072;
				Match(RARROW);
				State = 1073;
				typespec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecNestedContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext[] idTplArgs() {
			return GetRuleContexts<IdTplArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs(int i) {
			return GetRuleContext<IdTplArgsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CTOR() { return GetToken(MyllParser.CTOR, 0); }
		public TypespecNestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecNested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecNestedContext typespecNested() {
		TypespecNestedContext _localctx = new TypespecNestedContext(Context, State);
		EnterRule(_localctx, 200, RULE_typespecNested);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1076;
			idTplArgs();
			State = 1081;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1077;
					Match(SCOPE);
					State = 1078;
					idTplArgs();
					}
					} 
				}
				State = 1083;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			State = 1086;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1084;
				Match(SCOPE);
				State = 1085;
				_localctx.v = Match(CTOR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecsNestedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext[] typespecNested() {
			return GetRuleContexts<TypespecNestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecNestedContext typespecNested(int i) {
			return GetRuleContext<TypespecNestedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TypespecsNestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecsNested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecsNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecsNestedContext typespecsNested() {
		TypespecsNestedContext _localctx = new TypespecsNestedContext(Context, State);
		EnterRule(_localctx, 202, RULE_typespecsNested);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088;
			typespecNested();
			State = 1093;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1089;
					Match(COMMA);
					State = 1090;
					typespecNested();
					}
					} 
				}
				State = 1095;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			State = 1097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1096;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 204, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 1099;
				id();
				State = 1100;
				Match(COLON);
				}
				break;
			}
			State = 1104;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 206, RULE_args);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106;
			arg();
			State = 1111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1107;
					Match(COMMA);
					State = 1108;
					arg();
					}
					} 
				}
				State = 1113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			State = 1115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1114;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_LPAREN() { return GetToken(MyllParser.QM_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 208, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117;
			_localctx.ary = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==QM_LPAREN || _la==LPAREN) ) {
				_localctx.ary = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
				{
				State = 1118;
				args();
				}
			}

			State = 1121;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexCallContext : ParserRuleContext {
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM_LBRACK() { return GetToken(MyllParser.QM_LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		public IndexCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexCallContext indexCall() {
		IndexCallContext _localctx = new IndexCallContext(Context, State);
		EnterRule(_localctx, 210, RULE_indexCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123;
			_localctx.ary = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LBRACK || _la==QM_LBRACK) ) {
				_localctx.ary = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1124;
			args();
			State = 1125;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 212, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127;
			typespec();
			State = 1129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 1128;
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public FuncTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeDefContext funcTypeDef() {
		FuncTypeDefContext _localctx = new FuncTypeDefContext(Context, State);
		EnterRule(_localctx, 214, RULE_funcTypeDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			Match(LPAREN);
			State = 1143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (AUTO - 75)) | (1L << (VOID - 75)) | (1L << (BOOL - 75)) | (1L << (INT - 75)) | (1L << (UINT - 75)) | (1L << (ISIZE - 75)) | (1L << (USIZE - 75)) | (1L << (BYTE - 75)) | (1L << (CHAR - 75)) | (1L << (CODEPOINT - 75)) | (1L << (STRING - 75)) | (1L << (FLOAT - 75)) | (1L << (I64 - 75)) | (1L << (I32 - 75)) | (1L << (I16 - 75)) | (1L << (I8 - 75)) | (1L << (U64 - 75)) | (1L << (U32 - 75)) | (1L << (U16 - 75)) | (1L << (U8 - 75)) | (1L << (B64 - 75)) | (1L << (B32 - 75)) | (1L << (B16 - 75)) | (1L << (B8 - 75)) | (1L << (F128 - 75)) | (1L << (F64 - 75)) | (1L << (F32 - 75)) | (1L << (F16 - 75)) | (1L << (VOLATILE - 75)) | (1L << (STABLE - 75)) | (1L << (CONST - 75)) | (1L << (MUTABLE - 75)) | (1L << (FUNC - 75)))) != 0) || _la==ID) {
				{
				State = 1132;
				param();
				State = 1137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1133;
						Match(COMMA);
						State = 1134;
						param();
						}
						} 
					}
					State = 1139;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
				}
				State = 1141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1140;
					Match(COMMA);
					}
				}

				}
			}

			State = 1145;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public TplArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplArgContext tplArg() {
		TplArgContext _localctx = new TplArgContext(Context, State);
		EnterRule(_localctx, 216, RULE_tplArg);
		try {
			State = 1149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LIT:
			case CHAR_LIT:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1147;
				lit();
				}
				break;
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F128:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1148;
				typespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TplArgContext[] tplArg() {
			return GetRuleContexts<TplArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplArgContext tplArg(int i) {
			return GetRuleContext<TplArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TplArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplArgsContext tplArgs() {
		TplArgsContext _localctx = new TplArgsContext(Context, State);
		EnterRule(_localctx, 218, RULE_tplArgs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151;
			Match(LT);
			State = 1152;
			tplArg();
			State = 1157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1153;
					Match(COMMA);
					State = 1154;
					tplArg();
					}
					} 
				}
				State = 1159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			State = 1161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1160;
				Match(COMMA);
				}
			}

			State = 1163;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyllParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyllParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public TplParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplParamsContext tplParams() {
		TplParamsContext _localctx = new TplParamsContext(Context, State);
		EnterRule(_localctx, 220, RULE_tplParams);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165;
			Match(LT);
			State = 1166;
			id();
			State = 1171;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1167;
					Match(COMMA);
					State = 1168;
					id();
					}
					} 
				}
				State = 1173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			State = 1175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1174;
				Match(COMMA);
				}
			}

			State = 1177;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreeWayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOPContext relOP() {
			return GetRuleContext<RelOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualOPContext equalOP() {
			return GetRuleContext<EqualOPContext>(0);
		}
		public ThreeWayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threeWay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreeWay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreeWayContext threeWay() {
		ThreeWayContext _localctx = new ThreeWayContext(Context, State);
		EnterRule(_localctx, 222, RULE_threeWay);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LTEQ:
			case GTEQ:
			case LT:
			case GT:
				{
				State = 1179;
				relOP();
				}
				break;
			case EQ:
			case NEQ:
				{
				State = 1180;
				equalOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1183;
			Match(COLON);
			State = 1184;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 224, RULE_capture);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1186;
			Match(LBRACK);
			State = 1188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (FUNC - 117)) | (1L << (SIZEOF - 117)) | (1L << (NEW - 117)) | (1L << (DELETE - 117)) | (1L << (THROW - 117)) | (1L << (ID - 117)) | (1L << (NUL - 117)) | (1L << (CLASS_LIT - 117)) | (1L << (BOOL_LIT - 117)) | (1L << (FLOAT_LIT - 117)) | (1L << (HEX_LIT - 117)) | (1L << (OCT_LIT - 117)) | (1L << (BIN_LIT - 117)) | (1L << (INTEGER_LIT - 117)))) != 0)) {
				{
				State = 1187;
				args();
				}
			}

			State = 1190;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndOPContext andOP() {
			return GetRuleContext<AndOPContext>(0);
		}
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public ComparisonExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(MyllParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeDefContext funcTypeDef() {
			return GetRuleContext<FuncTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(MyllParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		public LambdaExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowOPContext powOP() {
			return GetRuleContext<PowOPContext>(0);
		}
		public PowExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOPContext multOP() {
			return GetRuleContext<MultOPContext>(0);
		}
		public MultExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostOPContext postOP() {
			return GetRuleContext<PostOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexCallContext indexCall() {
			return GetRuleContext<IndexCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemAccOPContext memAccOP() {
			return GetRuleContext<MemAccOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs() {
			return GetRuleContext<IdTplArgsContext>(0);
		}
		public PostExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOPContext addOP() {
			return GetRuleContext<AddOPContext>(0);
		}
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOPContext relOP() {
			return GetRuleContext<RelOPContext>(0);
		}
		public RelationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRP_POINT() { return GetToken(MyllParser.TRP_POINT, 0); }
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ConditionalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemPtrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemAccPtrOPContext memAccPtrOP() {
			return GetRuleContext<MemAccPtrOPContext>(0);
		}
		public MemPtrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemPtrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalesceExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NulCoalOPContext nulCoalOP() {
			return GetRuleContext<NulCoalOPContext>(0);
		}
		public NullCoalesceExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalesceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrOPContext orOP() {
			return GetRuleContext<OrOPContext>(0);
		}
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThreeWayConditionalExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBL_QM() { return GetToken(MyllParser.DBL_QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreeWayContext[] threeWay() {
			return GetRuleContexts<ThreeWayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreeWayContext threeWay(int i) {
			return GetRuleContext<ThreeWayContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		public ThreeWayConditionalExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreeWayConditionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreExprContext : ExprContext {
		public IToken cv;
		public IToken ary;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(MyllParser.SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MyllParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreOPContext preOP() {
			return GetRuleContext<PreOPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MyllParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(MyllParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(MyllParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyllParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyllParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyllParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(MyllParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(MyllParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyllParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(MyllParser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EM() { return GetTokens(MyllParser.EM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EM(int i) {
			return GetToken(MyllParser.EM, i);
		}
		public PreExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildIdExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public WildIdContext wildId() {
			return GetRuleContext<WildIdContext>(0);
		}
		public WildIdExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualOPContext equalOP() {
			return GetRuleContext<EqualOPContext>(0);
		}
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(MyllParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThrowExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MyllParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public NewExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LitContext lit() {
			return GetRuleContext<LitContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopedExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext[] idTplArgs() {
			return GetRuleContexts<IdTplArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs(int i) {
			return GetRuleContext<IdTplArgsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(MyllParser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(MyllParser.SCOPE, i);
		}
		public ScopedExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdTplExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdTplArgsContext idTplArgs() {
			return GetRuleContext<IdTplArgsContext>(0);
		}
		public IdTplExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdTplExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOPContext shiftOP() {
			return GetRuleContext<ShiftOPContext>(0);
		}
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 226;
		EnterRecursionRule(_localctx, 226, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				_localctx = new ScopedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1196;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1193;
						idTplArgs();
						State = 1194;
						Match(SCOPE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1198;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 1200;
				idTplArgs();
				}
				break;
			case 2:
				{
				_localctx = new NewExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1202;
				Match(NEW);
				State = 1204;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
				case 1:
					{
					State = 1203;
					typespec();
					}
					break;
				}
				State = 1207;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
				case 1:
					{
					State = 1206;
					funcCall();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new PreExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1233;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 1209;
					Match(LPAREN);
					State = 1223;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
					case 1:
						{
						State = 1210;
						Match(COPY);
						}
						break;
					case 2:
						{
						State = 1211;
						Match(MOVE);
						}
						break;
					case 3:
						{
						State = 1212;
						Match(FORWARD);
						}
						break;
					case 4:
						{
						State = 1213;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1214;
						((PreExprContext)_localctx).cv = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==VOLATILE || _la==CONST) ) {
							((PreExprContext)_localctx).cv = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 5:
						{
						State = 1220;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
						case 1:
							{
							State = 1215;
							Match(QM);
							}
							break;
						case 2:
							{
							State = 1216;
							Match(MINUS);
							}
							break;
						case 3:
							{
							State = 1217;
							Match(EM);
							}
							break;
						case 4:
							{
							State = 1218;
							Match(EM);
							State = 1219;
							Match(EM);
							}
							break;
						}
						State = 1222;
						typespec();
						}
						break;
					}
					State = 1225;
					Match(RPAREN);
					}
					break;
				case SIZEOF:
					{
					State = 1226;
					Match(SIZEOF);
					}
					break;
				case DELETE:
					{
					State = 1227;
					Match(DELETE);
					State = 1230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LBRACK) {
						{
						State = 1228;
						((PreExprContext)_localctx).ary = Match(LBRACK);
						State = 1229;
						Match(RBRACK);
						}
					}

					}
					break;
				case DBL_PLUS:
				case DBL_MINUS:
				case AMP:
				case STAR:
				case PLUS:
				case MINUS:
				case EM:
				case TILDE:
					{
					State = 1232;
					preOP();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1235;
				expr(21);
				}
				break;
			case 4:
				{
				_localctx = new ThrowExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1236;
				Match(THROW);
				State = 1237;
				expr(6);
				}
				break;
			case 5:
				{
				_localctx = new LambdaExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1238;
				Match(FUNC);
				State = 1240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
				case 1:
					{
					State = 1239;
					capture();
					}
					break;
				}
				State = 1243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1242;
					tplParams();
					}
				}

				State = 1246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
				case 1:
					{
					State = 1245;
					funcTypeDef();
					}
					break;
				}
				State = 1250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 1248;
					Match(RARROW);
					State = 1249;
					typespec();
					}
				}

				State = 1252;
				funcBody();
				}
				break;
			case 6:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1253;
				Match(LPAREN);
				State = 1254;
				expr(0);
				State = 1255;
				Match(RPAREN);
				}
				break;
			case 7:
				{
				_localctx = new WildIdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1257;
				wildId();
				}
				break;
			case 8:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1258;
				lit();
				}
				break;
			case 9:
				{
				_localctx = new IdTplExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1259;
				idTplArgs();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1335;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
					case 1:
						{
						_localctx = new MemPtrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1262;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1263;
						memAccPtrOP();
						State = 1264;
						expr(21);
						}
						break;
					case 2:
						{
						_localctx = new PowExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1266;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1267;
						powOP();
						State = 1268;
						expr(19);
						}
						break;
					case 3:
						{
						_localctx = new MultExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1270;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1271;
						multOP();
						State = 1272;
						expr(19);
						}
						break;
					case 4:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1274;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1275;
						addOP();
						State = 1276;
						expr(18);
						}
						break;
					case 5:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1278;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1279;
						shiftOP();
						State = 1280;
						expr(17);
						}
						break;
					case 6:
						{
						_localctx = new ComparisonExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1282;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1283;
						cmpOp();
						State = 1284;
						expr(16);
						}
						break;
					case 7:
						{
						_localctx = new RelationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1286;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1287;
						relOP();
						State = 1288;
						expr(15);
						}
						break;
					case 8:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1290;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1291;
						equalOP();
						State = 1292;
						expr(14);
						}
						break;
					case 9:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1294;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1295;
						andOP();
						State = 1296;
						expr(13);
						}
						break;
					case 10:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1298;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1299;
						orOP();
						State = 1300;
						expr(12);
						}
						break;
					case 11:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1302;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1303;
						Match(TRP_POINT);
						State = 1304;
						expr(11);
						}
						break;
					case 12:
						{
						_localctx = new NullCoalesceExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1305;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1306;
						nulCoalOP();
						State = 1307;
						expr(10);
						}
						break;
					case 13:
						{
						_localctx = new ConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1309;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1310;
						Match(QM);
						State = 1311;
						expr(0);
						State = 1312;
						Match(COLON);
						State = 1313;
						expr(8);
						}
						break;
					case 14:
						{
						_localctx = new PostExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1315;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1322;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case DBL_PLUS:
						case DBL_MINUS:
							{
							State = 1316;
							postOP();
							}
							break;
						case QM_LPAREN:
						case LPAREN:
							{
							State = 1317;
							funcCall();
							}
							break;
						case LBRACK:
						case QM_LBRACK:
							{
							State = 1318;
							indexCall();
							}
							break;
						case RARROW:
						case QM_POINT:
						case POINT:
							{
							State = 1319;
							memAccOP();
							State = 1320;
							idTplArgs();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 15:
						{
						_localctx = new ThreeWayConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1324;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1325;
						Match(DBL_QM);
						State = 1327;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 1326;
								threeWay();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 1329;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 1333;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
						case 1:
							{
							State = 1331;
							Match(COLON);
							State = 1332;
							expr(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDefContext[] accessorDef() {
			return GetRuleContexts<AccessorDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorDefContext accessorDef(int i) {
			return GetRuleContext<AccessorDefContext>(i);
		}
		public IdAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdAccessorContext idAccessor() {
		IdAccessorContext _localctx = new IdAccessorContext(Context, State);
		EnterRule(_localctx, 228, RULE_idAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340;
			id();
			State = 1349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 1341;
				Match(LCURLY);
				State = 1343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1342;
					accessorDef();
					}
					}
					State = 1345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LBRACK || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)) | (1L << (GET - 106)) | (1L << (REFGET - 106)) | (1L << (SET - 106)))) != 0) );
				State = 1347;
				Match(RCURLY);
				}
			}

			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1351;
				Match(ASSIGN);
				State = 1352;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyllParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IdExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprContext idExpr() {
		IdExprContext _localctx = new IdExprContext(Context, State);
		EnterRule(_localctx, 230, RULE_idExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355;
			id();
			State = 1358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1356;
				Match(ASSIGN);
				State = 1357;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdAccessorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorContext[] idAccessor() {
			return GetRuleContexts<IdAccessorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorContext idAccessor(int i) {
			return GetRuleContext<IdAccessorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public IdAccessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idAccessors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAccessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdAccessorsContext idAccessors() {
		IdAccessorsContext _localctx = new IdAccessorsContext(Context, State);
		EnterRule(_localctx, 232, RULE_idAccessors);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			idAccessor();
			State = 1365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1361;
					Match(COMMA);
					State = 1362;
					idAccessor();
					}
					} 
				}
				State = 1367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			State = 1369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1368;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExprContext[] idExpr() {
			return GetRuleContexts<IdExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdExprContext idExpr(int i) {
			return GetRuleContext<IdExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public IdExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprsContext idExprs() {
		IdExprsContext _localctx = new IdExprsContext(Context, State);
		EnterRule(_localctx, 234, RULE_idExprs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			idExpr();
			State = 1376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1372;
					Match(COMMA);
					State = 1373;
					idExpr();
					}
					} 
				}
				State = 1378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			}
			State = 1380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1379;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdAcorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecContext typespec() {
			return GetRuleContext<TypespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdAccessorsContext idAccessors() {
			return GetRuleContext<IdAccessorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public TypedIdAcorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdAcors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdAcors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdAcorsContext typedIdAcors() {
		TypedIdAcorsContext _localctx = new TypedIdAcorsContext(Context, State);
		EnterRule(_localctx, 236, RULE_typedIdAcors);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1382;
			typespec();
			State = 1383;
			idAccessors();
			State = 1384;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MyllParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALL() { return GetToken(MyllParser.FALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 238, RULE_caseBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386;
			Match(CASE);
			State = 1387;
			expr(0);
			State = 1392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1388;
					Match(COMMA);
					State = 1389;
					expr(0);
					}
					} 
				}
				State = 1394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			State = 1396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1395;
				Match(COMMA);
				}
			}

			State = 1423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 1398;
				Match(COLON);
				State = 1402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1399;
					stmt();
					}
					}
					State = 1404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FALL) {
					{
					State = 1405;
					Match(FALL);
					State = 1406;
					Match(SEMI);
					}
				}

				}
				break;
			case LCURLY:
				{
				State = 1409;
				Match(LCURLY);
				State = 1413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1410;
					stmt();
					}
					}
					State = 1415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FALL) {
					{
					State = 1416;
					Match(FALL);
					State = 1417;
					Match(SEMI);
					}
				}

				State = 1420;
				Match(RCURLY);
				}
				break;
			case PHATRARROW:
				{
				State = 1421;
				Match(PHATRARROW);
				State = 1422;
				stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyllParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MyllParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(MyllParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(MyllParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 240, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			_la = TokenStream.LA(1);
			if ( !(_la==ELSE || _la==DEFAULT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 1426;
				Match(COLON);
				State = 1430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1427;
					stmt();
					}
					}
					State = 1432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LCURLY:
				{
				State = 1433;
				Match(LCURLY);
				State = 1437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << SEMI) | (1L << EM) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (CONST - 108)) | (1L << (USING - 108)) | (1L << (ALIAS - 108)) | (1L << (FUNC - 108)) | (1L << (FIELD - 108)) | (1L << (VAR - 108)) | (1L << (LET - 108)) | (1L << (LOOP - 108)) | (1L << (FOR - 108)) | (1L << (DO - 108)) | (1L << (WHILE - 108)) | (1L << (IF - 108)) | (1L << (SWITCH - 108)) | (1L << (BREAK - 108)) | (1L << (RETURN - 108)) | (1L << (TRY - 108)) | (1L << (DEFER - 108)) | (1L << (SIZEOF - 108)) | (1L << (NEW - 108)) | (1L << (DELETE - 108)) | (1L << (THROW - 108)) | (1L << (ID - 108)) | (1L << (NUL - 108)) | (1L << (CLASS_LIT - 108)) | (1L << (BOOL_LIT - 108)) | (1L << (FLOAT_LIT - 108)) | (1L << (HEX_LIT - 108)) | (1L << (OCT_LIT - 108)) | (1L << (BIN_LIT - 108)) | (1L << (INTEGER_LIT - 108)))) != 0)) {
					{
					{
					State = 1434;
					stmt();
					}
					}
					State = 1439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1440;
				Match(RCURLY);
				}
				break;
			case PHATRARROW:
				{
				State = 1441;
				Match(PHATRARROW);
				State = 1442;
				stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyllParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext[] funcCall() {
			return GetRuleContexts<FuncCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall(int i) {
			return GetRuleContext<FuncCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CTOR() { return GetToken(MyllParser.CTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyllParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyllParser.COMMA, i);
		}
		public InitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitListContext initList() {
		InitListContext _localctx = new InitListContext(Context, State);
		EnterRule(_localctx, 242, RULE_initList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			Match(COLON);
			State = 1465;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 1446;
				id();
				State = 1447;
				funcCall();
				State = 1454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1448;
						Match(COMMA);
						State = 1449;
						id();
						State = 1450;
						funcCall();
						}
						} 
					}
					State = 1456;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
				}
				State = 1458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1457;
					Match(COMMA);
					}
				}

				}
				break;
			case CTOR:
				{
				State = 1460;
				Match(CTOR);
				State = 1461;
				funcCall();
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1462;
					Match(COMMA);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHATRARROW() { return GetToken(MyllParser.PHATRARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyllParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public FuncBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncBodyContext funcBody() {
		FuncBodyContext _localctx = new FuncBodyContext(Context, State);
		EnterRule(_localctx, 244, RULE_funcBody);
		try {
			State = 1472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PHATRARROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1467;
				Match(PHATRARROW);
				State = 1468;
				expr(0);
				State = 1469;
				Match(SEMI);
				}
				break;
			case STRING_LIT:
			case CHAR_LIT:
			case DBL_PLUS:
			case DBL_MINUS:
			case AUTOINDEX:
			case LBRACK:
			case LCURLY:
			case LPAREN:
			case AMP:
			case STAR:
			case PLUS:
			case MINUS:
			case SEMI:
			case EM:
			case TILDE:
			case USCORE:
			case CONST:
			case USING:
			case ALIAS:
			case FUNC:
			case FIELD:
			case VAR:
			case LET:
			case LOOP:
			case FOR:
			case DO:
			case WHILE:
			case IF:
			case SWITCH:
			case BREAK:
			case RETURN:
			case TRY:
			case DEFER:
			case SIZEOF:
			case NEW:
			case DELETE:
			case THROW:
			case ID:
			case NUL:
			case CLASS_LIT:
			case BOOL_LIT:
			case FLOAT_LIT:
			case HEX_LIT:
			case OCT_LIT:
			case BIN_LIT:
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1471;
				stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDefContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(MyllParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFGET() { return GetToken(MyllParser.REFGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MyllParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		public AccessorDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessorDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDefContext accessorDef() {
		AccessorDefContext _localctx = new AccessorDefContext(Context, State);
		EnterRule(_localctx, 246, RULE_accessorDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 1474;
				attribBlk();
				}
			}

			State = 1480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (VOLATILE - 106)) | (1L << (STABLE - 106)) | (1L << (CONST - 106)) | (1L << (MUTABLE - 106)))) != 0)) {
				{
				{
				State = 1477;
				qual();
				}
				}
				State = 1482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1483;
			_localctx.v = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (GET - 124)) | (1L << (REFGET - 124)) | (1L << (SET - 124)))) != 0)) ) {
				_localctx.v = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1484;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondThenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyllParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyllParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public CondThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condThen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyllParserVisitor<TResult> typedVisitor = visitor as IMyllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondThenContext condThen() {
		CondThenContext _localctx = new CondThenContext(Context, State);
		EnterRule(_localctx, 248, RULE_condThen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1486;
			Match(LPAREN);
			State = 1487;
			expr(0);
			State = 1488;
			Match(RPAREN);
			State = 1489;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 113: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 23);
		case 14: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,171,1492,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,1,0,1,0,1,1,3,1,254,8,1,1,1,5,1,257,8,1,10,1,12,
		1,260,9,1,1,1,5,1,263,8,1,10,1,12,1,266,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		3,1,3,1,3,1,3,5,3,278,8,3,10,3,12,3,281,9,3,1,3,3,3,284,8,3,1,3,1,3,1,
		4,1,4,1,4,1,4,5,4,292,8,4,10,4,12,4,295,9,4,1,4,3,4,298,8,4,1,4,1,4,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,309,8,5,10,5,12,5,312,9,5,1,5,3,5,315,8,
		5,1,5,1,5,3,5,319,8,5,1,6,1,6,1,6,1,6,1,6,3,6,326,8,6,1,7,1,7,1,7,1,7,
		1,7,5,7,333,8,7,10,7,12,7,336,9,7,1,7,1,7,3,7,340,8,7,3,7,342,8,7,1,8,
		1,8,1,8,1,8,1,8,5,8,349,8,8,10,8,12,8,352,9,8,1,8,1,8,3,8,356,8,8,3,8,
		358,8,8,1,9,1,9,1,9,1,9,1,9,5,9,365,8,9,10,9,12,9,368,9,9,1,9,1,9,3,9,
		372,8,9,3,9,374,8,9,1,10,1,10,1,10,1,10,1,10,5,10,381,8,10,10,10,12,10,
		384,9,10,1,10,1,10,3,10,388,8,10,3,10,390,8,10,1,11,1,11,1,11,1,11,1,11,
		5,11,397,8,11,10,11,12,11,400,9,11,1,11,1,11,3,11,404,8,11,3,11,406,8,
		11,1,12,1,12,1,12,1,12,1,12,5,12,413,8,12,10,12,12,12,416,9,12,1,12,1,
		12,3,12,420,8,12,3,12,422,8,12,1,13,1,13,1,13,1,13,1,13,5,13,429,8,13,
		10,13,12,13,432,9,13,1,13,1,13,3,13,436,8,13,3,13,438,8,13,1,14,1,14,1,
		14,1,14,1,14,5,14,445,8,14,10,14,12,14,448,9,14,1,14,1,14,3,14,452,8,14,
		3,14,454,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,3,15,469,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,478,8,17,
		10,17,12,17,481,9,17,1,17,3,17,484,8,17,1,18,1,18,1,18,1,18,5,18,490,8,
		18,10,18,12,18,493,9,18,1,18,3,18,496,8,18,1,19,1,19,1,19,1,20,1,20,1,
		20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,5,23,514,8,23,10,
		23,12,23,517,9,23,1,23,3,23,520,8,23,1,24,1,24,1,24,1,24,5,24,526,8,24,
		10,24,12,24,529,9,24,1,24,3,24,532,8,24,1,25,1,25,1,25,1,26,1,26,1,26,
		1,26,5,26,541,8,26,10,26,12,26,544,9,26,1,26,3,26,547,8,26,1,27,1,27,1,
		27,1,27,5,27,553,8,27,10,27,12,27,556,9,27,1,27,3,27,559,8,27,1,28,1,28,
		1,28,1,28,5,28,565,8,28,10,28,12,28,568,9,28,1,28,3,28,571,8,28,1,29,1,
		29,1,29,5,29,576,8,29,10,29,12,29,579,9,29,1,29,1,29,1,29,1,29,5,29,585,
		8,29,10,29,12,29,588,9,29,1,29,3,29,591,8,29,1,30,1,30,1,30,1,31,1,31,
		3,31,598,8,31,1,31,1,31,1,31,1,31,1,32,1,32,3,32,606,8,32,1,33,1,33,3,
		33,610,8,33,1,33,1,33,3,33,614,8,33,1,33,1,33,5,33,618,8,33,10,33,12,33,
		621,9,33,1,33,1,33,1,34,1,34,1,34,3,34,628,8,34,1,34,1,34,3,34,632,8,34,
		1,34,1,34,1,35,1,35,3,35,638,8,35,1,35,1,35,3,35,642,8,35,1,35,1,35,3,
		35,646,8,35,1,35,1,35,5,35,650,8,35,10,35,12,35,653,9,35,1,35,1,35,1,36,
		1,36,1,36,1,36,3,36,661,8,36,1,36,1,36,1,36,1,36,1,36,3,36,668,8,36,3,
		36,670,8,36,1,36,1,36,1,37,1,37,3,37,676,8,37,1,37,1,37,3,37,680,8,37,
		1,37,1,37,3,37,684,8,37,1,37,1,37,1,37,3,37,689,8,37,1,37,3,37,692,8,37,
		1,37,3,37,695,8,37,1,37,3,37,698,8,37,3,37,700,8,37,1,37,1,37,1,38,1,38,
		3,38,706,8,38,1,38,1,38,1,39,1,39,1,39,3,39,713,8,39,1,39,1,39,3,39,717,
		8,39,1,39,3,39,720,8,39,1,39,1,39,1,39,3,39,725,8,39,1,39,1,39,3,39,729,
		8,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,737,8,40,1,40,1,40,1,41,3,41,742,
		8,41,1,41,3,41,745,8,41,1,41,1,41,3,41,749,8,41,1,42,1,42,1,43,3,43,754,
		8,43,1,43,1,43,1,43,5,43,759,8,43,10,43,12,43,762,9,43,1,43,3,43,765,8,
		43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,787,8,44,1,45,1,45,1,45,1,45,1,45,
		5,45,794,8,45,10,45,12,45,797,9,45,1,45,1,45,3,45,801,8,45,1,46,1,46,1,
		46,1,46,1,46,1,46,4,46,809,8,46,11,46,12,46,810,1,46,3,46,814,8,46,1,46,
		1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,825,8,48,1,48,1,48,3,48,829,
		8,48,1,48,1,48,1,48,1,48,3,48,835,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,3,49,844,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,3,51,854,8,51,
		1,51,1,51,1,51,1,51,1,51,3,51,861,8,51,3,51,863,8,51,1,51,1,51,1,52,1,
		52,1,52,1,52,3,52,871,8,52,1,52,4,52,874,8,52,11,52,12,52,875,1,53,1,53,
		3,53,880,8,53,1,53,1,53,1,54,1,54,1,54,3,54,887,8,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,3,56,901,8,56,1,56,1,56,1,57,
		1,57,3,57,907,8,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,3,58,916,8,58,1,
		58,1,58,1,59,1,59,1,59,1,59,4,59,924,8,59,11,59,12,59,925,1,59,1,59,1,
		60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,64,1,
		64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,
		71,1,71,1,72,1,72,1,73,1,73,1,73,3,73,965,8,73,1,74,1,74,1,75,1,75,1,76,
		1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,
		1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,3,87,995,8,87,1,88,1,88,1,
		89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,5,95,1012,
		8,95,10,95,12,95,1015,9,95,1,95,1,95,1,95,3,95,1020,8,95,1,95,3,95,1023,
		8,95,1,95,3,95,1026,8,95,1,96,1,96,3,96,1030,8,96,1,97,5,97,1033,8,97,
		10,97,12,97,1036,9,97,1,97,1,97,5,97,1040,8,97,10,97,12,97,1043,9,97,1,
		97,1,97,5,97,1047,8,97,10,97,12,97,1050,9,97,1,97,1,97,1,97,5,97,1055,
		8,97,10,97,12,97,1058,9,97,3,97,1060,8,97,1,98,1,98,1,98,1,98,1,98,1,98,
		3,98,1068,8,98,1,99,3,99,1071,8,99,1,99,1,99,3,99,1075,8,99,1,100,1,100,
		1,100,5,100,1080,8,100,10,100,12,100,1083,9,100,1,100,1,100,3,100,1087,
		8,100,1,101,1,101,1,101,5,101,1092,8,101,10,101,12,101,1095,9,101,1,101,
		3,101,1098,8,101,1,102,1,102,1,102,3,102,1103,8,102,1,102,1,102,1,103,
		1,103,1,103,5,103,1110,8,103,10,103,12,103,1113,9,103,1,103,3,103,1116,
		8,103,1,104,1,104,3,104,1120,8,104,1,104,1,104,1,105,1,105,1,105,1,105,
		1,106,1,106,3,106,1130,8,106,1,107,1,107,1,107,1,107,5,107,1136,8,107,
		10,107,12,107,1139,9,107,1,107,3,107,1142,8,107,3,107,1144,8,107,1,107,
		1,107,1,108,1,108,3,108,1150,8,108,1,109,1,109,1,109,1,109,5,109,1156,
		8,109,10,109,12,109,1159,9,109,1,109,3,109,1162,8,109,1,109,1,109,1,110,
		1,110,1,110,1,110,5,110,1170,8,110,10,110,12,110,1173,9,110,1,110,3,110,
		1176,8,110,1,110,1,110,1,111,1,111,3,111,1182,8,111,1,111,1,111,1,111,
		1,112,1,112,3,112,1189,8,112,1,112,1,112,1,113,1,113,1,113,1,113,4,113,
		1197,8,113,11,113,12,113,1198,1,113,1,113,1,113,1,113,3,113,1205,8,113,
		1,113,3,113,1208,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,3,113,1221,8,113,1,113,3,113,1224,8,113,1,113,1,113,
		1,113,1,113,1,113,3,113,1231,8,113,1,113,3,113,1234,8,113,1,113,1,113,
		1,113,1,113,1,113,3,113,1241,8,113,1,113,3,113,1244,8,113,1,113,3,113,
		1247,8,113,1,113,1,113,3,113,1251,8,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,3,113,1261,8,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,1,113,1,113,1,113,3,113,1323,8,113,1,113,1,113,1,113,
		4,113,1328,8,113,11,113,12,113,1329,1,113,1,113,3,113,1334,8,113,5,113,
		1336,8,113,10,113,12,113,1339,9,113,1,114,1,114,1,114,4,114,1344,8,114,
		11,114,12,114,1345,1,114,1,114,3,114,1350,8,114,1,114,1,114,3,114,1354,
		8,114,1,115,1,115,1,115,3,115,1359,8,115,1,116,1,116,1,116,5,116,1364,
		8,116,10,116,12,116,1367,9,116,1,116,3,116,1370,8,116,1,117,1,117,1,117,
		5,117,1375,8,117,10,117,12,117,1378,9,117,1,117,3,117,1381,8,117,1,118,
		1,118,1,118,1,118,1,119,1,119,1,119,1,119,5,119,1391,8,119,10,119,12,119,
		1394,9,119,1,119,3,119,1397,8,119,1,119,1,119,5,119,1401,8,119,10,119,
		12,119,1404,9,119,1,119,1,119,3,119,1408,8,119,1,119,1,119,5,119,1412,
		8,119,10,119,12,119,1415,9,119,1,119,1,119,3,119,1419,8,119,1,119,1,119,
		1,119,3,119,1424,8,119,1,120,1,120,1,120,5,120,1429,8,120,10,120,12,120,
		1432,9,120,1,120,1,120,5,120,1436,8,120,10,120,12,120,1439,9,120,1,120,
		1,120,1,120,3,120,1444,8,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
		5,121,1453,8,121,10,121,12,121,1456,9,121,1,121,3,121,1459,8,121,1,121,
		1,121,1,121,3,121,1464,8,121,3,121,1466,8,121,1,122,1,122,1,122,1,122,
		1,122,3,122,1473,8,122,1,123,3,123,1476,8,123,1,123,5,123,1479,8,123,10,
		123,12,123,1482,9,123,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,
		1,124,0,1,226,125,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
		162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
		198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
		234,236,238,240,242,244,246,248,0,31,1,0,34,35,1,0,112,114,1,0,117,119,
		3,0,108,108,127,127,129,130,1,0,157,159,4,0,13,14,30,31,34,35,46,47,1,
		0,13,14,2,0,30,33,42,44,3,0,34,35,49,49,51,51,1,0,55,58,1,0,53,54,3,0,
		15,15,40,40,45,45,2,0,4,5,39,39,1,0,60,74,2,0,2,3,161,168,2,0,21,21,52,
		52,1,0,75,77,1,0,83,85,2,0,86,86,99,102,2,0,82,82,95,98,3,0,78,78,80,80,
		87,90,3,0,79,79,81,81,91,94,1,0,106,109,3,0,6,6,10,10,30,31,2,0,20,20,
		22,22,3,0,34,34,46,46,50,50,1,0,26,27,2,0,22,22,41,41,2,0,106,106,108,
		108,2,0,137,137,139,139,1,0,124,126,1634,0,250,1,0,0,0,2,253,1,0,0,0,4,
		269,1,0,0,0,6,273,1,0,0,0,8,287,1,0,0,0,10,301,1,0,0,0,12,325,1,0,0,0,
		14,341,1,0,0,0,16,357,1,0,0,0,18,373,1,0,0,0,20,389,1,0,0,0,22,405,1,0,
		0,0,24,421,1,0,0,0,26,437,1,0,0,0,28,453,1,0,0,0,30,468,1,0,0,0,32,470,
		1,0,0,0,34,473,1,0,0,0,36,485,1,0,0,0,38,497,1,0,0,0,40,500,1,0,0,0,42,
		503,1,0,0,0,44,506,1,0,0,0,46,509,1,0,0,0,48,521,1,0,0,0,50,533,1,0,0,
		0,52,536,1,0,0,0,54,548,1,0,0,0,56,560,1,0,0,0,58,572,1,0,0,0,60,592,1,
		0,0,0,62,595,1,0,0,0,64,603,1,0,0,0,66,607,1,0,0,0,68,624,1,0,0,0,70,635,
		1,0,0,0,72,669,1,0,0,0,74,699,1,0,0,0,76,705,1,0,0,0,78,724,1,0,0,0,80,
		732,1,0,0,0,82,741,1,0,0,0,84,750,1,0,0,0,86,753,1,0,0,0,88,786,1,0,0,
		0,90,788,1,0,0,0,92,802,1,0,0,0,94,817,1,0,0,0,96,820,1,0,0,0,98,836,1,
		0,0,0,100,845,1,0,0,0,102,853,1,0,0,0,104,866,1,0,0,0,106,877,1,0,0,0,
		108,883,1,0,0,0,110,894,1,0,0,0,112,898,1,0,0,0,114,904,1,0,0,0,116,910,
		1,0,0,0,118,919,1,0,0,0,120,929,1,0,0,0,122,934,1,0,0,0,124,937,1,0,0,
		0,126,940,1,0,0,0,128,942,1,0,0,0,130,944,1,0,0,0,132,946,1,0,0,0,134,
		948,1,0,0,0,136,950,1,0,0,0,138,952,1,0,0,0,140,954,1,0,0,0,142,957,1,
		0,0,0,144,959,1,0,0,0,146,964,1,0,0,0,148,966,1,0,0,0,150,968,1,0,0,0,
		152,970,1,0,0,0,154,972,1,0,0,0,156,974,1,0,0,0,158,976,1,0,0,0,160,978,
		1,0,0,0,162,980,1,0,0,0,164,982,1,0,0,0,166,984,1,0,0,0,168,986,1,0,0,
		0,170,988,1,0,0,0,172,990,1,0,0,0,174,994,1,0,0,0,176,996,1,0,0,0,178,
		998,1,0,0,0,180,1000,1,0,0,0,182,1002,1,0,0,0,184,1004,1,0,0,0,186,1006,
		1,0,0,0,188,1008,1,0,0,0,190,1013,1,0,0,0,192,1027,1,0,0,0,194,1034,1,
		0,0,0,196,1067,1,0,0,0,198,1070,1,0,0,0,200,1076,1,0,0,0,202,1088,1,0,
		0,0,204,1102,1,0,0,0,206,1106,1,0,0,0,208,1117,1,0,0,0,210,1123,1,0,0,
		0,212,1127,1,0,0,0,214,1131,1,0,0,0,216,1149,1,0,0,0,218,1151,1,0,0,0,
		220,1165,1,0,0,0,222,1181,1,0,0,0,224,1186,1,0,0,0,226,1260,1,0,0,0,228,
		1340,1,0,0,0,230,1355,1,0,0,0,232,1360,1,0,0,0,234,1371,1,0,0,0,236,1382,
		1,0,0,0,238,1386,1,0,0,0,240,1425,1,0,0,0,242,1445,1,0,0,0,244,1472,1,
		0,0,0,246,1475,1,0,0,0,248,1486,1,0,0,0,250,251,5,1,0,0,251,1,1,0,0,0,
		252,254,3,4,2,0,253,252,1,0,0,0,253,254,1,0,0,0,254,258,1,0,0,0,255,257,
		3,6,3,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,
		0,259,264,1,0,0,0,260,258,1,0,0,0,261,263,3,14,7,0,262,261,1,0,0,0,263,
		266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,264,1,
		0,0,0,267,268,5,0,0,1,268,3,1,0,0,0,269,270,5,104,0,0,270,271,3,172,86,
		0,271,272,5,36,0,0,272,5,1,0,0,0,273,274,5,105,0,0,274,279,3,172,86,0,
		275,276,5,38,0,0,276,278,3,172,86,0,277,275,1,0,0,0,278,281,1,0,0,0,279,
		277,1,0,0,0,279,280,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,282,284,5,
		38,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,286,5,36,0,
		0,286,7,1,0,0,0,287,288,5,22,0,0,288,293,3,10,5,0,289,290,5,38,0,0,290,
		292,3,10,5,0,291,289,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,
		0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,296,298,5,38,0,0,297,296,1,0,0,0,
		297,298,1,0,0,0,298,299,1,0,0,0,299,300,5,23,0,0,300,9,1,0,0,0,301,318,
		3,12,6,0,302,303,5,59,0,0,303,319,3,174,87,0,304,305,5,27,0,0,305,310,
		3,174,87,0,306,307,5,38,0,0,307,309,3,174,87,0,308,306,1,0,0,0,309,312,
		1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,
		0,313,315,5,38,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,
		317,5,28,0,0,317,319,1,0,0,0,318,302,1,0,0,0,318,304,1,0,0,0,318,319,1,
		0,0,0,319,11,1,0,0,0,320,326,3,172,86,0,321,326,5,108,0,0,322,326,5,143,
		0,0,323,326,5,151,0,0,324,326,5,139,0,0,325,320,1,0,0,0,325,321,1,0,0,
		0,325,322,1,0,0,0,325,323,1,0,0,0,325,324,1,0,0,0,326,13,1,0,0,0,327,342,
		3,30,15,0,328,339,3,8,4,0,329,340,3,30,15,0,330,334,5,24,0,0,331,333,3,
		14,7,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,
		335,337,1,0,0,0,336,334,1,0,0,0,337,340,5,25,0,0,338,340,5,37,0,0,339,
		329,1,0,0,0,339,330,1,0,0,0,339,338,1,0,0,0,340,342,1,0,0,0,341,327,1,
		0,0,0,341,328,1,0,0,0,342,15,1,0,0,0,343,358,3,60,30,0,344,355,3,8,4,0,
		345,356,3,60,30,0,346,350,5,24,0,0,347,349,3,16,8,0,348,347,1,0,0,0,349,
		352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,350,1,
		0,0,0,353,356,5,25,0,0,354,356,5,37,0,0,355,345,1,0,0,0,355,346,1,0,0,
		0,355,354,1,0,0,0,356,358,1,0,0,0,357,343,1,0,0,0,357,344,1,0,0,0,358,
		17,1,0,0,0,359,374,3,62,31,0,360,371,3,8,4,0,361,372,3,62,31,0,362,366,
		5,24,0,0,363,365,3,18,9,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,
		0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,372,5,25,0,0,370,
		372,5,37,0,0,371,361,1,0,0,0,371,362,1,0,0,0,371,370,1,0,0,0,372,374,1,
		0,0,0,373,359,1,0,0,0,373,360,1,0,0,0,374,19,1,0,0,0,375,390,3,72,36,0,
		376,387,3,8,4,0,377,388,3,72,36,0,378,382,5,24,0,0,379,381,3,20,10,0,380,
		379,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,
		0,0,0,384,382,1,0,0,0,385,388,5,25,0,0,386,388,5,37,0,0,387,377,1,0,0,
		0,387,378,1,0,0,0,387,386,1,0,0,0,388,390,1,0,0,0,389,375,1,0,0,0,389,
		376,1,0,0,0,390,21,1,0,0,0,391,406,3,74,37,0,392,403,3,8,4,0,393,404,3,
		74,37,0,394,398,5,24,0,0,395,397,3,22,11,0,396,395,1,0,0,0,397,400,1,0,
		0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,
		404,5,25,0,0,402,404,5,37,0,0,403,393,1,0,0,0,403,394,1,0,0,0,403,402,
		1,0,0,0,404,406,1,0,0,0,405,391,1,0,0,0,405,392,1,0,0,0,406,23,1,0,0,0,
		407,422,3,78,39,0,408,419,3,8,4,0,409,420,3,78,39,0,410,414,5,24,0,0,411,
		413,3,24,12,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,
		1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,420,5,25,0,0,418,420,5,37,
		0,0,419,409,1,0,0,0,419,410,1,0,0,0,419,418,1,0,0,0,420,422,1,0,0,0,421,
		407,1,0,0,0,421,408,1,0,0,0,422,25,1,0,0,0,423,438,3,80,40,0,424,435,3,
		8,4,0,425,436,3,80,40,0,426,430,5,24,0,0,427,429,3,26,13,0,428,427,1,0,
		0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,
		430,1,0,0,0,433,436,5,25,0,0,434,436,5,37,0,0,435,425,1,0,0,0,435,426,
		1,0,0,0,435,434,1,0,0,0,436,438,1,0,0,0,437,423,1,0,0,0,437,424,1,0,0,
		0,438,27,1,0,0,0,439,454,3,84,42,0,440,451,3,8,4,0,441,452,3,84,42,0,442,
		446,5,24,0,0,443,445,3,28,14,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,
		1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,452,5,25,0,
		0,450,452,5,37,0,0,451,441,1,0,0,0,451,442,1,0,0,0,451,450,1,0,0,0,452,
		454,1,0,0,0,453,439,1,0,0,0,453,440,1,0,0,0,454,29,1,0,0,0,455,469,3,32,
		16,0,456,469,3,34,17,0,457,469,3,36,18,0,458,469,3,38,19,0,459,469,3,40,
		20,0,460,469,3,42,21,0,461,469,3,44,22,0,462,469,3,46,23,0,463,469,3,48,
		24,0,464,469,3,50,25,0,465,469,3,52,26,0,466,469,3,54,27,0,467,469,3,56,
		28,0,468,455,1,0,0,0,468,456,1,0,0,0,468,457,1,0,0,0,468,458,1,0,0,0,468,
		459,1,0,0,0,468,460,1,0,0,0,468,461,1,0,0,0,468,462,1,0,0,0,468,463,1,
		0,0,0,468,464,1,0,0,0,468,465,1,0,0,0,468,466,1,0,0,0,468,467,1,0,0,0,
		469,31,1,0,0,0,470,471,5,103,0,0,471,472,3,58,29,0,472,33,1,0,0,0,473,
		483,5,110,0,0,474,484,3,60,30,0,475,479,5,24,0,0,476,478,3,16,8,0,477,
		476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,482,1,
		0,0,0,481,479,1,0,0,0,482,484,5,25,0,0,483,474,1,0,0,0,483,475,1,0,0,0,
		484,35,1,0,0,0,485,495,5,111,0,0,486,496,3,62,31,0,487,491,5,24,0,0,488,
		490,3,18,9,0,489,488,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,
		0,0,0,492,494,1,0,0,0,493,491,1,0,0,0,494,496,5,25,0,0,495,486,1,0,0,0,
		495,487,1,0,0,0,496,37,1,0,0,0,497,498,5,121,0,0,498,499,3,64,32,0,499,
		39,1,0,0,0,500,501,5,122,0,0,501,502,3,66,33,0,502,41,1,0,0,0,503,504,
		5,120,0,0,504,505,3,68,34,0,505,43,1,0,0,0,506,507,3,128,64,0,507,508,
		3,70,35,0,508,45,1,0,0,0,509,519,5,156,0,0,510,520,3,72,36,0,511,515,5,
		24,0,0,512,514,3,20,10,0,513,512,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,
		0,515,516,1,0,0,0,516,518,1,0,0,0,517,515,1,0,0,0,518,520,5,25,0,0,519,
		510,1,0,0,0,519,511,1,0,0,0,520,47,1,0,0,0,521,531,5,115,0,0,522,532,3,
		74,37,0,523,527,5,24,0,0,524,526,3,22,11,0,525,524,1,0,0,0,526,529,1,0,
		0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,527,1,0,0,0,530,
		532,5,25,0,0,531,522,1,0,0,0,531,523,1,0,0,0,532,49,1,0,0,0,533,534,5,
		116,0,0,534,535,3,76,38,0,535,51,1,0,0,0,536,546,5,128,0,0,537,547,3,78,
		39,0,538,542,5,24,0,0,539,541,3,24,12,0,540,539,1,0,0,0,541,544,1,0,0,
		0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,542,1,0,0,0,545,
		547,5,25,0,0,546,537,1,0,0,0,546,538,1,0,0,0,547,53,1,0,0,0,548,558,3,
		130,65,0,549,559,3,80,40,0,550,554,5,24,0,0,551,553,3,26,13,0,552,551,
		1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,
		0,556,554,1,0,0,0,557,559,5,25,0,0,558,549,1,0,0,0,558,550,1,0,0,0,559,
		55,1,0,0,0,560,570,3,132,66,0,561,571,3,84,42,0,562,566,5,24,0,0,563,565,
		3,28,14,0,564,563,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,
		0,0,567,569,1,0,0,0,568,566,1,0,0,0,569,571,5,25,0,0,570,561,1,0,0,0,570,
		562,1,0,0,0,571,57,1,0,0,0,572,577,3,172,86,0,573,574,5,19,0,0,574,576,
		3,172,86,0,575,573,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,
		0,0,578,590,1,0,0,0,579,577,1,0,0,0,580,591,5,36,0,0,581,591,5,37,0,0,
		582,586,5,24,0,0,583,585,3,14,7,0,584,583,1,0,0,0,585,588,1,0,0,0,586,
		584,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,591,5,
		25,0,0,590,580,1,0,0,0,590,581,1,0,0,0,590,582,1,0,0,0,591,59,1,0,0,0,
		592,593,3,202,101,0,593,594,5,36,0,0,594,61,1,0,0,0,595,597,3,172,86,0,
		596,598,3,220,110,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,
		600,5,59,0,0,600,601,3,194,97,0,601,602,5,36,0,0,602,63,1,0,0,0,603,605,
		3,172,86,0,604,606,3,220,110,0,605,604,1,0,0,0,605,606,1,0,0,0,606,65,
		1,0,0,0,607,609,3,172,86,0,608,610,3,220,110,0,609,608,1,0,0,0,609,610,
		1,0,0,0,610,613,1,0,0,0,611,612,5,37,0,0,612,614,3,202,101,0,613,611,1,
		0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,619,5,24,0,0,616,618,3,14,7,
		0,617,616,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,
		622,1,0,0,0,621,619,1,0,0,0,622,623,5,25,0,0,623,67,1,0,0,0,624,627,3,
		172,86,0,625,626,5,37,0,0,626,628,3,196,98,0,627,625,1,0,0,0,627,628,1,
		0,0,0,628,629,1,0,0,0,629,631,5,24,0,0,630,632,3,234,117,0,631,630,1,0,
		0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,634,5,25,0,0,634,69,1,0,0,0,635,
		637,3,172,86,0,636,638,3,220,110,0,637,636,1,0,0,0,637,638,1,0,0,0,638,
		641,1,0,0,0,639,640,5,37,0,0,640,642,3,202,101,0,641,639,1,0,0,0,641,642,
		1,0,0,0,642,645,1,0,0,0,643,644,5,123,0,0,644,646,3,202,101,0,645,643,
		1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,651,5,24,0,0,648,650,3,14,
		7,0,649,648,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,
		654,1,0,0,0,653,651,1,0,0,0,654,655,5,25,0,0,655,71,1,0,0,0,656,657,5,
		15,0,0,657,670,3,194,97,0,658,660,3,194,97,0,659,661,3,172,86,0,660,659,
		1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,663,5,15,0,0,663,670,1,0,0,
		0,664,665,5,16,0,0,665,667,3,194,97,0,666,668,3,172,86,0,667,666,1,0,0,
		0,667,668,1,0,0,0,668,670,1,0,0,0,669,656,1,0,0,0,669,658,1,0,0,0,669,
		664,1,0,0,0,670,671,1,0,0,0,671,672,3,244,122,0,672,73,1,0,0,0,673,675,
		3,134,67,0,674,676,3,172,86,0,675,674,1,0,0,0,675,676,1,0,0,0,676,700,
		1,0,0,0,677,679,5,156,0,0,678,680,5,16,0,0,679,678,1,0,0,0,679,680,1,0,
		0,0,680,681,1,0,0,0,681,683,3,194,97,0,682,684,3,172,86,0,683,682,1,0,
		0,0,683,684,1,0,0,0,684,700,1,0,0,0,685,686,5,156,0,0,686,688,3,194,97,
		0,687,689,3,172,86,0,688,687,1,0,0,0,688,689,1,0,0,0,689,691,1,0,0,0,690,
		692,5,15,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,700,1,0,0,0,693,695,3,
		214,107,0,694,693,1,0,0,0,694,695,1,0,0,0,695,697,1,0,0,0,696,698,3,242,
		121,0,697,696,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,673,1,0,0,0,
		699,677,1,0,0,0,699,685,1,0,0,0,699,694,1,0,0,0,700,701,1,0,0,0,701,702,
		3,244,122,0,702,75,1,0,0,0,703,704,5,27,0,0,704,706,5,28,0,0,705,703,1,
		0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,3,244,122,0,708,77,1,0,0,
		0,709,710,3,134,67,0,710,712,5,59,0,0,711,713,3,172,86,0,712,711,1,0,0,
		0,712,713,1,0,0,0,713,725,1,0,0,0,714,716,5,156,0,0,715,717,3,220,110,
		0,716,715,1,0,0,0,716,717,1,0,0,0,717,719,1,0,0,0,718,720,5,15,0,0,719,
		718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,725,3,194,97,0,722,723,
		5,2,0,0,723,725,3,82,41,0,724,709,1,0,0,0,724,714,1,0,0,0,724,722,1,0,
		0,0,725,728,1,0,0,0,726,727,5,123,0,0,727,729,3,202,101,0,728,726,1,0,
		0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,731,3,244,122,0,731,79,1,0,0,0,
		732,733,3,172,86,0,733,736,3,82,41,0,734,735,5,123,0,0,735,737,3,202,101,
		0,736,734,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,739,3,244,122,0,
		739,81,1,0,0,0,740,742,3,220,110,0,741,740,1,0,0,0,741,742,1,0,0,0,742,
		744,1,0,0,0,743,745,3,214,107,0,744,743,1,0,0,0,744,745,1,0,0,0,745,748,
		1,0,0,0,746,747,5,15,0,0,747,749,3,194,97,0,748,746,1,0,0,0,748,749,1,
		0,0,0,749,83,1,0,0,0,750,751,3,236,118,0,751,85,1,0,0,0,752,754,3,8,4,
		0,753,752,1,0,0,0,753,754,1,0,0,0,754,764,1,0,0,0,755,765,3,88,44,0,756,
		760,5,24,0,0,757,759,3,86,43,0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,
		1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,760,1,0,0,0,763,765,5,25,0,
		0,764,755,1,0,0,0,764,756,1,0,0,0,765,87,1,0,0,0,766,787,3,34,17,0,767,
		787,3,36,18,0,768,787,3,56,28,0,769,787,3,90,45,0,770,787,3,92,46,0,771,
		787,3,94,47,0,772,787,3,96,48,0,773,787,3,98,49,0,774,787,3,100,50,0,775,
		787,3,102,51,0,776,787,3,104,52,0,777,787,3,106,53,0,778,787,3,108,54,
		0,779,787,3,110,55,0,780,787,3,112,56,0,781,787,3,118,59,0,782,787,3,120,
		60,0,783,787,3,122,61,0,784,787,3,124,62,0,785,787,3,126,63,0,786,766,
		1,0,0,0,786,767,1,0,0,0,786,768,1,0,0,0,786,769,1,0,0,0,786,770,1,0,0,
		0,786,771,1,0,0,0,786,772,1,0,0,0,786,773,1,0,0,0,786,774,1,0,0,0,786,
		775,1,0,0,0,786,776,1,0,0,0,786,777,1,0,0,0,786,778,1,0,0,0,786,779,1,
		0,0,0,786,780,1,0,0,0,786,781,1,0,0,0,786,782,1,0,0,0,786,783,1,0,0,0,
		786,784,1,0,0,0,786,785,1,0,0,0,787,89,1,0,0,0,788,789,5,136,0,0,789,795,
		3,248,124,0,790,791,5,137,0,0,791,792,5,136,0,0,792,794,3,248,124,0,793,
		790,1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,800,1,
		0,0,0,797,795,1,0,0,0,798,799,5,137,0,0,799,801,3,86,43,0,800,798,1,0,
		0,0,800,801,1,0,0,0,801,91,1,0,0,0,802,803,5,138,0,0,803,804,5,27,0,0,
		804,805,3,226,113,0,805,806,5,28,0,0,806,808,5,24,0,0,807,809,3,238,119,
		0,808,807,1,0,0,0,809,810,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,
		813,1,0,0,0,812,814,3,240,120,0,813,812,1,0,0,0,813,814,1,0,0,0,814,815,
		1,0,0,0,815,816,5,25,0,0,816,93,1,0,0,0,817,818,5,131,0,0,818,819,3,86,
		43,0,819,95,1,0,0,0,820,821,5,132,0,0,821,822,5,27,0,0,822,824,3,86,43,
		0,823,825,3,226,113,0,824,823,1,0,0,0,824,825,1,0,0,0,825,826,1,0,0,0,
		826,828,5,36,0,0,827,829,3,226,113,0,828,827,1,0,0,0,828,829,1,0,0,0,829,
		830,1,0,0,0,830,831,5,28,0,0,831,834,3,86,43,0,832,833,5,137,0,0,833,835,
		3,86,43,0,834,832,1,0,0,0,834,835,1,0,0,0,835,97,1,0,0,0,836,837,5,134,
		0,0,837,838,5,27,0,0,838,839,3,226,113,0,839,840,5,28,0,0,840,843,3,86,
		43,0,841,842,5,137,0,0,842,844,3,86,43,0,843,841,1,0,0,0,843,844,1,0,0,
		0,844,99,1,0,0,0,845,846,5,133,0,0,846,847,3,86,43,0,847,848,5,134,0,0,
		848,849,5,27,0,0,849,850,3,226,113,0,850,851,5,28,0,0,851,101,1,0,0,0,
		852,854,5,133,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,
		856,3,226,113,0,856,862,5,135,0,0,857,860,3,172,86,0,858,859,7,0,0,0,859,
		861,5,168,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,857,
		1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,3,86,43,0,865,103,1,0,
		0,0,866,867,5,145,0,0,867,873,3,86,43,0,868,870,5,146,0,0,869,871,3,214,
		107,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,874,3,86,43,
		0,873,868,1,0,0,0,874,875,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,
		105,1,0,0,0,877,879,5,144,0,0,878,880,3,226,113,0,879,878,1,0,0,0,879,
		880,1,0,0,0,880,881,1,0,0,0,881,882,5,36,0,0,882,107,1,0,0,0,883,884,5,
		133,0,0,884,886,5,144,0,0,885,887,3,226,113,0,886,885,1,0,0,0,886,887,
		1,0,0,0,887,888,1,0,0,0,888,889,5,136,0,0,889,890,5,27,0,0,890,891,3,226,
		113,0,891,892,5,28,0,0,892,893,5,36,0,0,893,109,1,0,0,0,894,895,5,151,
		0,0,895,896,3,226,113,0,896,897,5,36,0,0,897,111,1,0,0,0,898,900,5,142,
		0,0,899,901,5,168,0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,
		902,903,5,36,0,0,903,113,1,0,0,0,904,906,5,141,0,0,905,907,5,168,0,0,906,
		905,1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,0,908,909,5,36,0,0,909,115,1,
		0,0,0,910,915,5,141,0,0,911,912,5,140,0,0,912,916,3,226,113,0,913,916,
		5,139,0,0,914,916,5,137,0,0,915,911,1,0,0,0,915,913,1,0,0,0,915,914,1,
		0,0,0,916,917,1,0,0,0,917,918,5,36,0,0,918,117,1,0,0,0,919,923,3,226,113,
		0,920,921,3,164,82,0,921,922,3,226,113,0,922,924,1,0,0,0,923,920,1,0,0,
		0,924,925,1,0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,
		928,5,36,0,0,928,119,1,0,0,0,929,930,3,226,113,0,930,931,3,166,83,0,931,
		932,3,226,113,0,932,933,5,36,0,0,933,121,1,0,0,0,934,935,5,147,0,0,935,
		936,3,86,43,0,936,123,1,0,0,0,937,938,3,226,113,0,938,939,5,36,0,0,939,
		125,1,0,0,0,940,941,5,36,0,0,941,127,1,0,0,0,942,943,7,1,0,0,943,129,1,
		0,0,0,944,945,7,2,0,0,945,131,1,0,0,0,946,947,7,3,0,0,947,133,1,0,0,0,
		948,949,7,4,0,0,949,135,1,0,0,0,950,951,7,5,0,0,951,137,1,0,0,0,952,953,
		7,6,0,0,953,139,1,0,0,0,954,955,5,31,0,0,955,956,5,31,0,0,956,141,1,0,
		0,0,957,958,7,7,0,0,958,143,1,0,0,0,959,960,7,8,0,0,960,145,1,0,0,0,961,
		965,5,18,0,0,962,963,5,58,0,0,963,965,5,58,0,0,964,961,1,0,0,0,964,962,
		1,0,0,0,965,147,1,0,0,0,966,967,5,7,0,0,967,149,1,0,0,0,968,969,7,9,0,
		0,969,151,1,0,0,0,970,971,7,10,0,0,971,153,1,0,0,0,972,973,5,10,0,0,973,
		155,1,0,0,0,974,975,5,48,0,0,975,157,1,0,0,0,976,977,5,12,0,0,977,159,
		1,0,0,0,978,979,7,11,0,0,979,161,1,0,0,0,980,981,7,12,0,0,981,163,1,0,
		0,0,982,983,5,59,0,0,983,165,1,0,0,0,984,985,7,13,0,0,985,167,1,0,0,0,
		986,987,7,14,0,0,987,169,1,0,0,0,988,989,7,15,0,0,989,171,1,0,0,0,990,
		991,5,160,0,0,991,173,1,0,0,0,992,995,3,172,86,0,993,995,3,168,84,0,994,
		992,1,0,0,0,994,993,1,0,0,0,995,175,1,0,0,0,996,997,7,16,0,0,997,177,1,
		0,0,0,998,999,7,17,0,0,999,179,1,0,0,0,1000,1001,7,18,0,0,1001,181,1,0,
		0,0,1002,1003,7,19,0,0,1003,183,1,0,0,0,1004,1005,7,20,0,0,1005,185,1,
		0,0,0,1006,1007,7,21,0,0,1007,187,1,0,0,0,1008,1009,7,22,0,0,1009,189,
		1,0,0,0,1010,1012,3,188,94,0,1011,1010,1,0,0,0,1012,1015,1,0,0,0,1013,
		1011,1,0,0,0,1013,1014,1,0,0,0,1014,1022,1,0,0,0,1015,1013,1,0,0,0,1016,
		1023,7,23,0,0,1017,1019,7,24,0,0,1018,1020,3,226,113,0,1019,1018,1,0,0,
		0,1019,1020,1,0,0,0,1020,1021,1,0,0,0,1021,1023,5,23,0,0,1022,1016,1,0,
		0,0,1022,1017,1,0,0,0,1023,1025,1,0,0,0,1024,1026,7,25,0,0,1025,1024,1,
		0,0,0,1025,1026,1,0,0,0,1026,191,1,0,0,0,1027,1029,3,172,86,0,1028,1030,
		3,218,109,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,193,1,0,0,0,1031,
		1033,3,188,94,0,1032,1031,1,0,0,0,1033,1036,1,0,0,0,1034,1032,1,0,0,0,
		1034,1035,1,0,0,0,1035,1059,1,0,0,0,1036,1034,1,0,0,0,1037,1041,3,196,
		98,0,1038,1040,3,190,95,0,1039,1038,1,0,0,0,1040,1043,1,0,0,0,1041,1039,
		1,0,0,0,1041,1042,1,0,0,0,1042,1060,1,0,0,0,1043,1041,1,0,0,0,1044,1048,
		5,117,0,0,1045,1047,3,190,95,0,1046,1045,1,0,0,0,1047,1050,1,0,0,0,1048,
		1046,1,0,0,0,1048,1049,1,0,0,0,1049,1051,1,0,0,0,1050,1048,1,0,0,0,1051,
		1060,3,198,99,0,1052,1056,3,200,100,0,1053,1055,3,190,95,0,1054,1053,1,
		0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,1060,
		1,0,0,0,1058,1056,1,0,0,0,1059,1037,1,0,0,0,1059,1044,1,0,0,0,1059,1052,
		1,0,0,0,1060,195,1,0,0,0,1061,1068,3,176,88,0,1062,1068,3,178,89,0,1063,
		1068,3,180,90,0,1064,1068,3,182,91,0,1065,1068,3,184,92,0,1066,1068,3,
		186,93,0,1067,1061,1,0,0,0,1067,1062,1,0,0,0,1067,1063,1,0,0,0,1067,1064,
		1,0,0,0,1067,1065,1,0,0,0,1067,1066,1,0,0,0,1068,197,1,0,0,0,1069,1071,
		3,214,107,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,1074,1,0,0,0,1072,
		1073,5,15,0,0,1073,1075,3,194,97,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,
		1075,199,1,0,0,0,1076,1081,3,192,96,0,1077,1078,5,19,0,0,1078,1080,3,192,
		96,0,1079,1077,1,0,0,0,1080,1083,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,
		0,0,0,1082,1086,1,0,0,0,1083,1081,1,0,0,0,1084,1085,5,19,0,0,1085,1087,
		5,115,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,201,1,0,0,0,1088,1093,
		3,200,100,0,1089,1090,5,38,0,0,1090,1092,3,200,100,0,1091,1089,1,0,0,0,
		1092,1095,1,0,0,0,1093,1091,1,0,0,0,1093,1094,1,0,0,0,1094,1097,1,0,0,
		0,1095,1093,1,0,0,0,1096,1098,5,38,0,0,1097,1096,1,0,0,0,1097,1098,1,0,
		0,0,1098,203,1,0,0,0,1099,1100,3,172,86,0,1100,1101,5,37,0,0,1101,1103,
		1,0,0,0,1102,1099,1,0,0,0,1102,1103,1,0,0,0,1103,1104,1,0,0,0,1104,1105,
		3,226,113,0,1105,205,1,0,0,0,1106,1111,3,204,102,0,1107,1108,5,38,0,0,
		1108,1110,3,204,102,0,1109,1107,1,0,0,0,1110,1113,1,0,0,0,1111,1109,1,
		0,0,0,1111,1112,1,0,0,0,1112,1115,1,0,0,0,1113,1111,1,0,0,0,1114,1116,
		5,38,0,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,207,1,0,0,0,1117,1119,
		7,26,0,0,1118,1120,3,206,103,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,
		1121,1,0,0,0,1121,1122,5,28,0,0,1122,209,1,0,0,0,1123,1124,7,27,0,0,1124,
		1125,3,206,103,0,1125,1126,5,23,0,0,1126,211,1,0,0,0,1127,1129,3,194,97,
		0,1128,1130,3,172,86,0,1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,213,1,
		0,0,0,1131,1143,5,27,0,0,1132,1137,3,212,106,0,1133,1134,5,38,0,0,1134,
		1136,3,212,106,0,1135,1133,1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,
		1137,1138,1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1140,1142,5,38,0,
		0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1144,1,0,0,0,1143,1132,1,0,
		0,0,1143,1144,1,0,0,0,1144,1145,1,0,0,0,1145,1146,5,28,0,0,1146,215,1,
		0,0,0,1147,1150,3,168,84,0,1148,1150,3,194,97,0,1149,1147,1,0,0,0,1149,
		1148,1,0,0,0,1150,217,1,0,0,0,1151,1152,5,57,0,0,1152,1157,3,216,108,0,
		1153,1154,5,38,0,0,1154,1156,3,216,108,0,1155,1153,1,0,0,0,1156,1159,1,
		0,0,0,1157,1155,1,0,0,0,1157,1158,1,0,0,0,1158,1161,1,0,0,0,1159,1157,
		1,0,0,0,1160,1162,5,38,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,
		1,0,0,0,1163,1164,5,58,0,0,1164,219,1,0,0,0,1165,1166,5,57,0,0,1166,1171,
		3,172,86,0,1167,1168,5,38,0,0,1168,1170,3,172,86,0,1169,1167,1,0,0,0,1170,
		1173,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,1175,1,0,0,0,1173,
		1171,1,0,0,0,1174,1176,5,38,0,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,
		1177,1,0,0,0,1177,1178,5,58,0,0,1178,221,1,0,0,0,1179,1182,3,150,75,0,
		1180,1182,3,152,76,0,1181,1179,1,0,0,0,1181,1180,1,0,0,0,1182,1183,1,0,
		0,0,1183,1184,5,37,0,0,1184,1185,3,226,113,0,1185,223,1,0,0,0,1186,1188,
		5,22,0,0,1187,1189,3,206,103,0,1188,1187,1,0,0,0,1188,1189,1,0,0,0,1189,
		1190,1,0,0,0,1190,1191,5,23,0,0,1191,225,1,0,0,0,1192,1196,6,113,-1,0,
		1193,1194,3,192,96,0,1194,1195,5,19,0,0,1195,1197,1,0,0,0,1196,1193,1,
		0,0,0,1197,1198,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,1200,
		1,0,0,0,1200,1201,3,192,96,0,1201,1261,1,0,0,0,1202,1204,5,149,0,0,1203,
		1205,3,194,97,0,1204,1203,1,0,0,0,1204,1205,1,0,0,0,1205,1207,1,0,0,0,
		1206,1208,3,208,104,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1261,1,
		0,0,0,1209,1223,5,27,0,0,1210,1224,5,159,0,0,1211,1224,5,158,0,0,1212,
		1224,5,157,0,0,1213,1214,7,0,0,0,1214,1224,7,28,0,0,1215,1221,5,50,0,0,
		1216,1221,5,35,0,0,1217,1221,5,46,0,0,1218,1219,5,46,0,0,1219,1221,5,46,
		0,0,1220,1215,1,0,0,0,1220,1216,1,0,0,0,1220,1217,1,0,0,0,1220,1218,1,
		0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,0,0,1222,1224,3,194,97,0,1223,1210,
		1,0,0,0,1223,1211,1,0,0,0,1223,1212,1,0,0,0,1223,1213,1,0,0,0,1223,1220,
		1,0,0,0,1224,1225,1,0,0,0,1225,1234,5,28,0,0,1226,1234,5,148,0,0,1227,
		1230,5,150,0,0,1228,1229,5,22,0,0,1229,1231,5,23,0,0,1230,1228,1,0,0,0,
		1230,1231,1,0,0,0,1231,1234,1,0,0,0,1232,1234,3,136,68,0,1233,1209,1,0,
		0,0,1233,1226,1,0,0,0,1233,1227,1,0,0,0,1233,1232,1,0,0,0,1234,1235,1,
		0,0,0,1235,1261,3,226,113,21,1236,1237,5,151,0,0,1237,1261,3,226,113,6,
		1238,1240,5,117,0,0,1239,1241,3,224,112,0,1240,1239,1,0,0,0,1240,1241,
		1,0,0,0,1241,1243,1,0,0,0,1242,1244,3,220,110,0,1243,1242,1,0,0,0,1243,
		1244,1,0,0,0,1244,1246,1,0,0,0,1245,1247,3,214,107,0,1246,1245,1,0,0,0,
		1246,1247,1,0,0,0,1247,1250,1,0,0,0,1248,1249,5,15,0,0,1249,1251,3,194,
		97,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1261,3,
		244,122,0,1253,1254,5,27,0,0,1254,1255,3,226,113,0,1255,1256,5,28,0,0,
		1256,1261,1,0,0,0,1257,1261,3,170,85,0,1258,1261,3,168,84,0,1259,1261,
		3,192,96,0,1260,1192,1,0,0,0,1260,1202,1,0,0,0,1260,1233,1,0,0,0,1260,
		1236,1,0,0,0,1260,1238,1,0,0,0,1260,1253,1,0,0,0,1260,1257,1,0,0,0,1260,
		1258,1,0,0,0,1260,1259,1,0,0,0,1261,1337,1,0,0,0,1262,1263,10,20,0,0,1263,
		1264,3,162,81,0,1264,1265,3,226,113,21,1265,1336,1,0,0,0,1266,1267,10,
		19,0,0,1267,1268,3,140,70,0,1268,1269,3,226,113,19,1269,1336,1,0,0,0,1270,
		1271,10,18,0,0,1271,1272,3,142,71,0,1272,1273,3,226,113,19,1273,1336,1,
		0,0,0,1274,1275,10,17,0,0,1275,1276,3,144,72,0,1276,1277,3,226,113,18,
		1277,1336,1,0,0,0,1278,1279,10,16,0,0,1279,1280,3,146,73,0,1280,1281,3,
		226,113,17,1281,1336,1,0,0,0,1282,1283,10,15,0,0,1283,1284,3,148,74,0,
		1284,1285,3,226,113,16,1285,1336,1,0,0,0,1286,1287,10,14,0,0,1287,1288,
		3,150,75,0,1288,1289,3,226,113,15,1289,1336,1,0,0,0,1290,1291,10,13,0,
		0,1291,1292,3,152,76,0,1292,1293,3,226,113,14,1293,1336,1,0,0,0,1294,1295,
		10,12,0,0,1295,1296,3,154,77,0,1296,1297,3,226,113,13,1297,1336,1,0,0,
		0,1298,1299,10,11,0,0,1299,1300,3,156,78,0,1300,1301,3,226,113,12,1301,
		1336,1,0,0,0,1302,1303,10,10,0,0,1303,1304,5,8,0,0,1304,1336,3,226,113,
		11,1305,1306,10,9,0,0,1306,1307,3,158,79,0,1307,1308,3,226,113,10,1308,
		1336,1,0,0,0,1309,1310,10,8,0,0,1310,1311,5,50,0,0,1311,1312,3,226,113,
		0,1312,1313,5,37,0,0,1313,1314,3,226,113,8,1314,1336,1,0,0,0,1315,1322,
		10,23,0,0,1316,1323,3,138,69,0,1317,1323,3,208,104,0,1318,1323,3,210,105,
		0,1319,1320,3,160,80,0,1320,1321,3,192,96,0,1321,1323,1,0,0,0,1322,1316,
		1,0,0,0,1322,1317,1,0,0,0,1322,1318,1,0,0,0,1322,1319,1,0,0,0,1323,1336,
		1,0,0,0,1324,1325,10,7,0,0,1325,1327,5,11,0,0,1326,1328,3,222,111,0,1327,
		1326,1,0,0,0,1328,1329,1,0,0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,
		1333,1,0,0,0,1331,1332,5,37,0,0,1332,1334,3,226,113,0,1333,1331,1,0,0,
		0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,1262,1,0,0,0,1335,1266,1,0,
		0,0,1335,1270,1,0,0,0,1335,1274,1,0,0,0,1335,1278,1,0,0,0,1335,1282,1,
		0,0,0,1335,1286,1,0,0,0,1335,1290,1,0,0,0,1335,1294,1,0,0,0,1335,1298,
		1,0,0,0,1335,1302,1,0,0,0,1335,1305,1,0,0,0,1335,1309,1,0,0,0,1335,1315,
		1,0,0,0,1335,1324,1,0,0,0,1336,1339,1,0,0,0,1337,1335,1,0,0,0,1337,1338,
		1,0,0,0,1338,227,1,0,0,0,1339,1337,1,0,0,0,1340,1349,3,172,86,0,1341,1343,
		5,24,0,0,1342,1344,3,246,123,0,1343,1342,1,0,0,0,1344,1345,1,0,0,0,1345,
		1343,1,0,0,0,1345,1346,1,0,0,0,1346,1347,1,0,0,0,1347,1348,5,25,0,0,1348,
		1350,1,0,0,0,1349,1341,1,0,0,0,1349,1350,1,0,0,0,1350,1353,1,0,0,0,1351,
		1352,5,59,0,0,1352,1354,3,226,113,0,1353,1351,1,0,0,0,1353,1354,1,0,0,
		0,1354,229,1,0,0,0,1355,1358,3,172,86,0,1356,1357,5,59,0,0,1357,1359,3,
		226,113,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,231,1,0,0,0,1360,1365,
		3,228,114,0,1361,1362,5,38,0,0,1362,1364,3,228,114,0,1363,1361,1,0,0,0,
		1364,1367,1,0,0,0,1365,1363,1,0,0,0,1365,1366,1,0,0,0,1366,1369,1,0,0,
		0,1367,1365,1,0,0,0,1368,1370,5,38,0,0,1369,1368,1,0,0,0,1369,1370,1,0,
		0,0,1370,233,1,0,0,0,1371,1376,3,230,115,0,1372,1373,5,38,0,0,1373,1375,
		3,230,115,0,1374,1372,1,0,0,0,1375,1378,1,0,0,0,1376,1374,1,0,0,0,1376,
		1377,1,0,0,0,1377,1380,1,0,0,0,1378,1376,1,0,0,0,1379,1381,5,38,0,0,1380,
		1379,1,0,0,0,1380,1381,1,0,0,0,1381,235,1,0,0,0,1382,1383,3,194,97,0,1383,
		1384,3,232,116,0,1384,1385,5,36,0,0,1385,237,1,0,0,0,1386,1387,5,140,0,
		0,1387,1392,3,226,113,0,1388,1389,5,38,0,0,1389,1391,3,226,113,0,1390,
		1388,1,0,0,0,1391,1394,1,0,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,
		1396,1,0,0,0,1394,1392,1,0,0,0,1395,1397,5,38,0,0,1396,1395,1,0,0,0,1396,
		1397,1,0,0,0,1397,1423,1,0,0,0,1398,1402,5,37,0,0,1399,1401,3,86,43,0,
		1400,1399,1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,0,0,0,1402,1403,1,0,0,
		0,1403,1407,1,0,0,0,1404,1402,1,0,0,0,1405,1406,5,143,0,0,1406,1408,5,
		36,0,0,1407,1405,1,0,0,0,1407,1408,1,0,0,0,1408,1424,1,0,0,0,1409,1413,
		5,24,0,0,1410,1412,3,86,43,0,1411,1410,1,0,0,0,1412,1415,1,0,0,0,1413,
		1411,1,0,0,0,1413,1414,1,0,0,0,1414,1418,1,0,0,0,1415,1413,1,0,0,0,1416,
		1417,5,143,0,0,1417,1419,5,36,0,0,1418,1416,1,0,0,0,1418,1419,1,0,0,0,
		1419,1420,1,0,0,0,1420,1424,5,25,0,0,1421,1422,5,17,0,0,1422,1424,3,86,
		43,0,1423,1398,1,0,0,0,1423,1409,1,0,0,0,1423,1421,1,0,0,0,1424,239,1,
		0,0,0,1425,1443,7,29,0,0,1426,1430,5,37,0,0,1427,1429,3,86,43,0,1428,1427,
		1,0,0,0,1429,1432,1,0,0,0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,1444,
		1,0,0,0,1432,1430,1,0,0,0,1433,1437,5,24,0,0,1434,1436,3,86,43,0,1435,
		1434,1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,
		1440,1,0,0,0,1439,1437,1,0,0,0,1440,1444,5,25,0,0,1441,1442,5,17,0,0,1442,
		1444,3,86,43,0,1443,1426,1,0,0,0,1443,1433,1,0,0,0,1443,1441,1,0,0,0,1444,
		241,1,0,0,0,1445,1465,5,37,0,0,1446,1447,3,172,86,0,1447,1454,3,208,104,
		0,1448,1449,5,38,0,0,1449,1450,3,172,86,0,1450,1451,3,208,104,0,1451,1453,
		1,0,0,0,1452,1448,1,0,0,0,1453,1456,1,0,0,0,1454,1452,1,0,0,0,1454,1455,
		1,0,0,0,1455,1458,1,0,0,0,1456,1454,1,0,0,0,1457,1459,5,38,0,0,1458,1457,
		1,0,0,0,1458,1459,1,0,0,0,1459,1466,1,0,0,0,1460,1461,5,115,0,0,1461,1463,
		3,208,104,0,1462,1464,5,38,0,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,
		1466,1,0,0,0,1465,1446,1,0,0,0,1465,1460,1,0,0,0,1466,243,1,0,0,0,1467,
		1468,5,17,0,0,1468,1469,3,226,113,0,1469,1470,5,36,0,0,1470,1473,1,0,0,
		0,1471,1473,3,86,43,0,1472,1467,1,0,0,0,1472,1471,1,0,0,0,1473,245,1,0,
		0,0,1474,1476,3,8,4,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1480,1,
		0,0,0,1477,1479,3,188,94,0,1478,1477,1,0,0,0,1479,1482,1,0,0,0,1480,1478,
		1,0,0,0,1480,1481,1,0,0,0,1481,1483,1,0,0,0,1482,1480,1,0,0,0,1483,1484,
		7,30,0,0,1484,1485,3,244,122,0,1485,247,1,0,0,0,1486,1487,5,27,0,0,1487,
		1488,3,226,113,0,1488,1489,5,28,0,0,1489,1490,3,86,43,0,1490,249,1,0,0,
		0,184,253,258,264,279,283,293,297,310,314,318,325,334,339,341,350,355,
		357,366,371,373,382,387,389,398,403,405,414,419,421,430,435,437,446,451,
		453,468,479,483,491,495,515,519,527,531,542,546,554,558,566,570,577,586,
		590,597,605,609,613,619,627,631,637,641,645,651,660,667,669,675,679,683,
		688,691,694,697,699,705,712,716,719,724,728,736,741,744,748,753,760,764,
		786,795,800,810,813,824,828,834,843,853,860,862,870,875,879,886,900,906,
		915,925,964,994,1013,1019,1022,1025,1029,1034,1041,1048,1056,1059,1067,
		1070,1074,1081,1086,1093,1097,1102,1111,1115,1119,1129,1137,1141,1143,
		1149,1157,1161,1171,1175,1181,1188,1198,1204,1207,1220,1223,1230,1233,
		1240,1243,1246,1250,1260,1322,1329,1333,1335,1337,1345,1349,1353,1358,
		1365,1369,1376,1380,1392,1396,1402,1407,1413,1418,1423,1430,1437,1443,
		1454,1458,1463,1465,1472,1475,1480
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Myll
