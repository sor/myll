#!/usr/bin/myll // ignored by the compiler

/**
 * Ported with additions to Myll from OOA Ãœbungen, Blatt 2, Aufgabe 3:
 * Source: https://lionel.kr.hs-niederrhein.de/~rethmann/lehreOOA.html
 **/

// the name of this file "stack.myll" does make it "module stack" by default
//module stack;

// prevents unnecessary nesting
namespace Rethmann::OOA::Uebung2_3;

class StackEmptyException {}

class Stack<T> {
[priv]:
	field {
		// only these new array pointers would allow arithmetic and therefore indexing
		T[*] _values;
		int  _size, _last;
	}
	// the compiler could feed some info backwards here,
	// like the size and alignment of this class

	// this could be a getter, allowing to call it without ()
	[pure]
	method isFull() -> bool => _last == _size;

	[throw] // not supported yet, would make the method not noexcept, currently no method is noexcept but all but [throw] should be
	method increase() {
		var T[*] t = new T[_size * 2];
		// same as: for (int i = 0; i < _size; ++i)
		do _size times i
			t[i] = _values[i];
		_size *= 2;
		// this could drop the [] once we know that _values is an array from analyze step
		delete[] _values;
		_values = t;
	}

[pub]:
	ctor() {
		_last = 0;
		_size = 8;
		// this could throw an exception, but exceptions need dynamic memory themselves... and that is exactly what was missing
		_values = new T[_size];
	}

	// this is an explicit constructor by default
	// would need [implicit] to have C++'s implicit conversion behavior
	ctor( int size ) {
		_last = 0;
		_size = size;
		// this could throw an exception, but exceptions need dynamic memory themselves... and that is exactly what was missing
		_values = new T[_size];
	}

	dtor() {
		// this could drop the [] once we know that _values is an array from analyze step
		delete[] _values;
	}

	// this could be a getter, allowing to call it without ()
	// assignment mistake not possible anymore
	[pure]
	method isEmpty() -> bool => _last == 0;

//[throw]:
	// manually made to be able to chain call
	[throw] // throw because increase() is also throw
	method push(T value) -> Stack& {
		if (isFull())
			increase();
		_values[_last] = value;
		_last += 1;
		return *this;
	}

	// same as push(T) above with chaining added by attribute
	// adds return type (classname&) and return statement (return *this)
	// throw because increase() is also throw
	[chain, throw]
	method push_chaining(T value) {
		if (isFull())
			increase();
		_values[_last] = value;
		_last += 1;
	}

	// just for adding in a second template
	[throw] // top is throw, therefore this needs to be too
	method top_as<TT>() => (? TT) top();

	[throw]
	method top() -> T {
		if (isEmpty())
			throw StackEmptyException();
		return _values[_last - 1];
	}

	[throw]
	method pop() {
		if (isEmpty())
			throw StackEmptyException();
		_last -= 1;
	}
}
