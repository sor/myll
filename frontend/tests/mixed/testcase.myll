#!/usr/bin/myll // ignored by the compiler

module testcase;

import std_iostream;

class Base { [pub]: ctor(int a){} [virtual]dtor(){} }
class Derived : Base { [pub]: [virtual]dtor(){}}
class Unrelated {}

alias belanna = func(int)->bool*;

func test()->int
{
	using std; // does not work as decl, only stmt

	var i8 value = 50;
	if( 0 < value <= 100 )
		cout << "value in range\n";

	var int* blubb, blabb, blebb;

	var int a;
	var int* aptr = &a;
	*aptr = 13;

	var belanna* belannaptr = hansX;
	var func*(int)->bool hansptr = hans;
	var func**(int)->bool hansptrptr = &hansptr;
	var func*[4](int)->bool hansptrary;
	hansptrary[0] = hansptr;

	var Derived* my_var;
	(move)(!Unrelated*)(?Derived*)(Base*)my_var;
	//var int*! blubb;

	cout << hansptr(23);
	cout << (*hansptrptr)(42);

	return 42;
}

[moep]
func hans(int a) -> bool => a == 42;
func hansX(int a) -> bool* => new bool();

// TODO: find a way to select which main is gonna be build by module
func main()->int { return test(); }
/*
operator "|" (MyEnum lhs, MyEnum rhs) -> MyEnum
{
	return (MyEnum) (
		(std::underlying_type<MyEnum>::type)lhs |
		(std::underlying_type<MyEnum>::type)rhs
	);
}
*/
namespace MyNS
{
	class MyClass
	{
	public:
		[operators(bitwise),flags]
		enum MyEnum : u32
		{
			A = 4,
			B,
			C,
		}
	[priv]:
		method testEnums(MyEnum a)
		{
			var MyEnum b;
			a | b;
		}
	}
}
/*
namespace MyNamespace
{
	operator "|" (MyEnum lhs, MyEnum rhs) -> FE
	{
		return (MyEnum) (
			(std::underlying_type<MyEnum>::type)lhs |
			(std::underlying_type<MyEnum>::type)rhs
		);
	}

	[operators(bitwise)]
	enum MyEnum : u32
	{
		A,
		B = 3,
		C,
	}

	func foo() -> int
	{
		if(a+b|8==c)
			(move)(a)(?b)(!c)my_var;
		else
			left::fn() += 9|8+1;
		a = new Class( 1, "Blah" );
		2**8;
		//var int i = 9;
	}

	operator "|" ( int a, int b ) -> int => a | b;

	const float pi = 3.14;

	class MyClass<T>
	{
		field T::X x_with_typename; // needs typename in C++
		field int[5] ary;
		// will just be generated as a common ptr in C++
		field int[]* ptr_to_ary = &ary;
		// this is a non-arithmetic pointer and will not allow ++, --, +, -, []
		field int* ptr_to_int = &ary;
		field std::vector<int> vec;

		// creates a private backing field _a and getter and setter who use this backing field
		field int a { get; set; };
		// does not create _b, if one is implemented, all must be implemented manually
		field int b { get => _b; set _b = value; };
		field int _b;
		// this makes it a one liner
		field int _c, c { get => _c; set _c = value; };
		// accessors can exist without a backing field
		field int d { get => vec.count(); };
	public:
		[static]
		{
			field int s_c, s_d = 42;
			field
			{
				float s_e;
				f32   s_f;
				f64   s_g;
			}
		}

		//[inline, const(ifneedbe)]
		func a() -> int {
		do 10 times { cout << "blah\n"; }
		var int ten = 10;
		do ten times { cout << "blah\n"; }
		return _a; }

	private:
		class SubClass
		{
			method sub_meth(AnotherSubClass* other) -> void {}
			field int sub_var;
		}

	protected:
		class AnotherSubClass : SubClass
		{
			class SubSubClass{}
		}
	}
//*/
}
