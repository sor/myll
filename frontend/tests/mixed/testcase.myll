#!/usr/bin/myll // ignored by the compiler

module testcase;

namespace MyNamespace
{
	[operators(bitwise)]
	enum MyEnum : u32
	{
		A,
		B = 3,
		C,
	}

	func foo() -> int
	{
		if(a+b|8==c)
			(move)(a)(?b)(!c)my_var;
		else
			left::fn() += 9|8+1;
		a = new Class( 1, "Blah" );
		2**8;
		//var int i = 9;
	}

	const float pi = 3.14;

	class MyClass<T>
	{
		field T::X x; // typename
		field std::array<int*[],5>*[5] x;
		field int _a, _b;
	public:
		[static]
		{
			field int s_c, s_d = 42;
			field
			{
				float s_e;
				f32   s_f;
				f64   s_g;
			}
		}

		//[inline, const(ifneedbe)]
		func a() -> int {
		 var int xx;
		 10 times { cout << "blah\n"; }
		 return _a; }

	private:
		class SubClass
		{
			method sub_meth(AnotherSubClass* other) -> void {}
			field int sub_var;
		}

	protected:
		class AnotherSubClass : SubClass
		{
			class SubSubClass{}
		}
	}
}
