import std_iostream, c_stdlib, std_chrono, std_vector, MyContainers;

//#line 68 "../main.myll"

func stuff() -> int[]! {
	var int*[4][8] myArray1;	// declare myArray1 as pointer to array 4 of int
	var int[8][4]* myArray2;	// declare myArray2 as array 4 of pointer to int
	var int**!     myArray3;
	var int*[] @[] * asd;
	var int*!	iup2, jup2;
	var int@[]	a;

	//return {};		// unsupported still, should be relatively easy
	//return int[]!();	// does not work either, grammar change (is this func style cast?)
	return std::unique_ptr<int[]>();
}

namespace problem_3311 {
	func main() {
		a(); // clang++ error: use of undeclared identifier 'a'
	}
	func a() {}
}

namespace problem_3312 {
	class MyClass {
		field int myField1;
		field int myField2;
		field int myField3 = 3;
		[static] field int myStatic = 1;
	[pub]:
		ctor() {
			myField1 = 1;
			myField2 = 2;
		}
		method myMethod1() -> int => 1;
		[inline]		method myMethod2() -> int => 2;
		[inline,const]	method myMethod3() -> int => 3;
		[virtual]		method myVirtual() -> int => 4;
	}
}

namespace problem_3313 {
	func with_template<T>() -> int => 0;
	func without_template() -> int => 0;
}

namespace problem_3321 {
	alias a = int;
	alias c = int;
	func problem() {
		var a * b;
		const a * b1;
		var int a2, b2;
		a2 * b2;	// clang++ warning: expression result unused [-Wunused-value]
		var c d;
		var c e1 = c(); // different notation than in thesis
	}
	// TODO: problem_3321::c should just be c
	func e2() -> problem_3321::c { return 0; }
}

namespace problem_3322 {
	func problem_3322() {
		var int						i,			j;
		var int*					ip = &i,	jp = &j;
		var std::unique_ptr<int>	iu1, 		ju1;
		var int*!					iu2, 		ju2;
		var int&					ir =  i,	jr =  j;
		var int[10]					ia,			ja;
	}
}

namespace problem_3323 {
	func problem_3323() {
		var int[4]* ptr_to_ary_of_4;
		var int*[4] ary_of_4_ptrs;
	}
}

namespace problem_3324 {
	func f( int a, int b )-> void {}
	func ff( func*(int,int)->int f) -> void {}
	func func_ptr_fun() {
		var func*(int,int)->void				fp	= f;
		var func*(func*(int,int)->int)->void	ffp	= ff;
		var int[4]* c; // no func ptr
	}
	// all func need to be above all var to make this work without 'func_ptr_fun'
	// solution, change for out-of-struct but keep like this in-struct?
}

namespace problem_3331 {
	class C {
		[implicit]
		ctor(int i) {}
		ctor(float f) {}
		//[implicit, disable] // does not work either
		//ctor(float f);
	[pub]:
		//[pub] // does not work yet
		[static]
		method test() {
			var C c1 = C(1); // OK
			var C c2 = 2; // OK, man wollte explizit die implizierte Konvertierung von int erlauben
			var C c3 = C(3.0f); // OK
			var C c4 = 4.0f; // Error, man bekommt standardmäßig nur den float Konstruktor
			// NO Error? WTF C++
			// 4.0f is converted to int and uses the implicit ctor(int) :facepalm:
		}
	}
}

namespace problem_3332 {
	class C {}
	class D1 : C {}
	//class D2 : private C {} // private is not a keyword anymore, use attrib?
	//class D2 : [priv] C {}
}

namespace problem_3333 {
	// [throw=seldom] is default, this does still mean that a func need to have [throw] if they do throw
	class NoExplicitThrow {
		[throw] // OR [throw=yes] OR [except]
		func testThrow() {
			// Would not compile without the [throw]
			throw "Test";
		}
		func testNoThrow() {
			// This would not compile, neither class nor func is [throw]
			//throw "Test";
		}
	}

	[throw] // Means the same as [throw=often], func inside are automatically [throw] by default
	class WithExplicitThrow {
		func testThrow() {
			// The class enables throwing, no need to mention throw on the func
			throw "Test";
		}
		[nothrow] // OR [throw=no] OR [noexcept]
		func testNoThrow() {
			// This would not compile
			//throw "Test";
		}
		[nothrow]
		func testCatchNoThrow() {
			// This should compile, func is [nothrow] and the throw inside is caught
			try {
				throw "Test";
			} catch( Exception e ) {
			}
		}
	}
}

namespace problem_3334 {
	func do_this() {}
	func or_do_that() {}
	func two_cases_want_the_same() {}
	func test() -> const char* {
		var int a, b, c;

		switch( a ) {
			case 1:
				do_this();
				fall;	// error without either fall or break

			case 99:
			case 2:
				or_do_that();
				break;	// error without either fall or break

			case 3, 4:	// same as case 3: case 4:
				two_cases_want_the_same();

			else:
				null;
				null;
		}
		for(;;);

		// multiple statements in a scope, automatically break, fall may be possible
		switch( b ) {
			case 1 {
				do_this();
				fall;
			}
			case 2 {
				or_do_that();
			}
			case 3, 4 {
				two_cases_want_the_same();
			}
			else { null; }
		}

		// only one statement, automatically break after, fall is impossible
		switch( c ) {
			case 1		=> do_this();
			case 2		=> or_do_that();
			case 3, 4	=> two_cases_want_the_same();
		}

		// TODO: range does not work yet
		var int age;
		switch( age ) {
			case  0 ... 12:	return "child";
			case 13 ... 17:	return "teenager";
			case 18 ... 66:	return "work-work";
			default:		return "pensioner";
			// else: also would work here
		}

		// future idea, switch usable like an expr and it can yield it's content
		//return switch( age ) {
		//	case  0 ... 12	=> "child";
		//	case 13 ... 17	=> "teenager";
		//	case 18 ... 66	=> "work-work";
		//	default			=> "pensioner";
		//}
	}
}

namespace problem_3341 {
	// needs sema/analyze to work
	func test() {
		var i8	a = 17, b = 4;
		var i8	c = a + b;	// all okay, i8 = i8 + i8 is likely fine, overflow must be handled differently
		var i32	d = 707, e = 1337;
		var i8	f = d + e;	// should error, i8 is to small to implicitly receive i32 + i32 result
	}
}

namespace problem_3342 {
	// needs sema/analyze to work
	func takeBool(bool b) {}
	struct TakeBool {
		ctor(bool b) {}
	}
	func test() {
		// Each of these 3 lines should fail
		takeBool( 42 );
		var TakeBool tbc = TakeBool( 42 );
		var bool bool1 = 42;
	}
}

namespace problem_3343 {
	// needs sema/analyze to work
	func test() {
		var int* ip = 0;	// error
		var int* jp = null;	// OK

		var int scl;
		var int[10] ary;
		var int* ptr_to_scalar = &scl;		// OK, scalar pointer points to scalar
		// TODO: needs analyze to allow the & below
		var int[*] ptr_to_ary1 = /*&*/ary;	// OK, explicit decay from array to array pointer
		var int[*] ptr_to_ary2 = &scl;		// Error: Scalar can not be converted to an array pointer
		ptr_to_scalar++;	// Error: Pointer to scalar forbids arithmetic
		ptr_to_ary1++;		// OK
	}
}

namespace problem_3351 {
	func pow1( f32  b, int e ) -> f32	{ return b ** e; }
	func pow2( auto b, int e ) -> auto	{ return b ** e; }
	func pow3( auto b, int e )			{ return b ** e; } // same as pow2
	func pow4<T>( T b, int e ) -> auto	{ return b ** e; }
	func pow5<T>( T b, int e ) -> T		{ return b ** e; }
	func test() {
		var func*( f32 b, int e ) -> auto funcPtr = pow5<f32>;
		var f64 dbl = 99;
		var auto lambda = func( f32 b, int e) {
			var int i;
			return funcPtr(b, e) + dbl;
		};
		//auto lambda = [](float b, int e)  { return pow(b, e); };
		std::cout << lambda( 2, 10 ) << "\n";
	}
}

//*
namespace ctor_fun {

	//[copy=default(ed), move=disable(d)]
	class Test {
		field f32 f;
	[pub]:
		ctor()	{}
		ctor	{}	// same as above
		ctor;		// defaulted default ctor

		[moep]{
			method isEmpty() -> bool => _size == 0;
			ctor{}
		}

		ctor( const Test & other )	{ f = other.f;	}
		ctor copy					{ f = other.f;	}	// same as above
		ctor copy o					{ f = o.f;		}	// same as above

		[implicit] ctor( bool b )	{ f = b ? 1 : 2; }
		ctor convert bool b			{ f = b ? 1 : 2; }		// same as above
		ctor convert bool			{ f = other ? 1 : 2; }	// same as above
		ctor convert <- bool		{ f = other ? 1 : 2; }	// same as above
		ctor convert bool ->		{ f = other ? 1 : 2; }	// same as above
		convert <- bool b			{ f = b ? 1 : 2; }		// same as above
		convert bool b ->			{ f = b ? 1 : 2; }		// same as above

		dtor()	{}
		dtor	{}	// same as above
		dtor;		// defaulted dtor

		operator "=" ( const Test & other )	{ f = other.f; }
		operator copy=						{ f = other.f; } // same as above

		operator "=" ( Test && other )		{ f = other.f; }
		operator move=						{ f = other.f; } // same as above
	//	operator "=" copy					{ f = other.f; } // same as above
	}
}
//*/

func main( int argc, const char*[] argv ) -> int
{
	problem_3351::test();
	//problem_3331::C::test();
	return 0;// mainX( argc, argv );
	//loop{break;}
}

