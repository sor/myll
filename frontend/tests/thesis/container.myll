// Thesis page 19
module MyContainers;

//module main;

import std_iostream;

//[hidden] var float no_collide = 9.0;
//[global] var float do_collide = 9.0;

func mainX( int argc, const char*[] argv ) -> int {
	using std, JanSordid::Container;

	var MyStack<i8> stack = MyStack<i8>(4);
	stack.push( 42 ).push( 23 ).push( 16 ).push( 15 ).push( 8 ).push( 4 );

	{{
		// pushes -5 to +4 on the stack (10 numbers)
		do 10 times i-5
			stack.push( i );
		{
			// unnamed loop variable, pushes 1's on the stack
			do 10 times
				stack.push( 1 );
		}
	}}

	while( !stack.isEmpty() ) {
		// even int8_t will be printed via cout as char :(
		cout << (int)stack.top() << endl;
		//std::format_to( cout, "{0}", stack.top() );
		stack.pop();
	}
	return 0;
}

// all the same (4 a bit different)
func hans1() -> auto => 9;
func hans2() -> auto return 9;
func hans3() -> auto {return 9;}
func hans4() -> auto {{return 9;}}
//func hans5();


namespace JanSordid::Container: // ";" or ":"

[rule_of_n=0] // not yet validated
class MyStack<T> {
	const usize	_default_reserved = 8;
	field usize	_reserved = _default_reserved;
	field usize	_size = 0;
	field T[]!	_data = new T[_reserved]!;

[pub]:
	ctor() : ctor( _default_reserved ) {}
	ctor( usize reserved ) {
		_reserved	= reserved;
		_data		= new T[_reserved]!;
	}

	[pure] {
		method isEmpty() -> bool => _size == 0;

		//[precond(!isEmpty())]
		method top() -> T => _data[_size-1];
	}

	[chain] // when this works, then the return type "-> MyStack&" and return statement "return self;" can be omitted
	method push( T val ) -> MyStack& {
		if( _size >= _reserved )
			grow();
		_data[_size] = val;
		++_size;
		return self;
	}

	//[precond(!isEmpty())]
	method pop() {
		--_size;
	}

[priv]:
	method grow() {
		[debug] //
		std::cout << "grow\n";
		const	usize	new_reserved	= _reserved * 2;
		var		T[]!	new_data		= new T[new_reserved]!;

		do _size times i {
			new_data[i] = _data[i];
		}
		_reserved	= new_reserved;
		_data		= (move)new_data;
	}
}
//*/
