//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\sor\Documents\Visual Studio 2012\Projects\MyLangParser\MyLang.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MyLang {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MyLangParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IMyLangVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionStmt</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionStmt([NotNull] MyLangParser.ExpressionStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>VarsDecl</c>
	/// labeled alternative in <see cref="MyLangParser.vars_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarsDecl([NotNull] MyLangParser.VarsDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>NopExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNopExpr([NotNull] MyLangParser.NopExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>LessThan</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessThan([NotNull] MyLangParser.LessThanContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryMinus</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryMinus([NotNull] MyLangParser.UnaryMinusContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.characterType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCharacterType([NotNull] MyLangParser.CharacterTypeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.advancedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdvancedType([NotNull] MyLangParser.AdvancedTypeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.exprs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprs([NotNull] MyLangParser.ExprsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier200</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier200([NotNull] MyLangParser.Tier200Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.anyType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnyType([NotNull] MyLangParser.AnyTypeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenExpr([NotNull] MyLangParser.ParenExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSub([NotNull] MyLangParser.AddSubContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier9</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier9([NotNull] MyLangParser.Tier9Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.order_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrder_OP([NotNull] MyLangParser.Order_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier8</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier8([NotNull] MyLangParser.Tier8Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier7</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier7([NotNull] MyLangParser.Tier7Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier6</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier6([NotNull] MyLangParser.Tier6Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier5</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier5([NotNull] MyLangParser.Tier5Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.scope_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScope_OP([NotNull] MyLangParser.Scope_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier4</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier4([NotNull] MyLangParser.Tier4Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier3</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier3([NotNull] MyLangParser.Tier3Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier2</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier2([NotNull] MyLangParser.Tier2Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.add_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdd_OP([NotNull] MyLangParser.Add_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier1</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier1([NotNull] MyLangParser.Tier1Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.class_extened_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClass_extened_expr([NotNull] MyLangParser.Class_extened_exprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.bitor_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitor_OP([NotNull] MyLangParser.Bitor_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.anyTypeOrConst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnyTypeOrConst([NotNull] MyLangParser.AnyTypeOrConstContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>LessEqualThan</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessEqualThan([NotNull] MyLangParser.LessEqualThanContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComment([NotNull] MyLangParser.CommentContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>IdOrLitExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdOrLitExpr([NotNull] MyLangParser.IdOrLitExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.idTplType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdTplType([NotNull] MyLangParser.IdTplTypeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.castExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCastExpr([NotNull] MyLangParser.CastExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FuncCallExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncCallExpr([NotNull] MyLangParser.FuncCallExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>AttrPOD</c>
	/// labeled alternative in <see cref="MyLangParser.attrib"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAttrPOD([NotNull] MyLangParser.AttrPODContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StaticDecl</c>
	/// labeled alternative in <see cref="MyLangParser.class_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStaticDecl([NotNull] MyLangParser.StaticDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProg([NotNull] MyLangParser.ProgContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>NotEqual</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotEqual([NotNull] MyLangParser.NotEqualContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Equal</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqual([NotNull] MyLangParser.EqualContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockStmt([NotNull] MyLangParser.BlockStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>IndexExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexExpr([NotNull] MyLangParser.IndexExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.newExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNewExpr([NotNull] MyLangParser.NewExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.initializationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInitializationList([NotNull] MyLangParser.InitializationListContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>EnumDecl</c>
	/// labeled alternative in <see cref="MyLangParser.toplevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumDecl([NotNull] MyLangParser.EnumDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.bitxor_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitxor_OP([NotNull] MyLangParser.Bitxor_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>CtorDecl</c>
	/// labeled alternative in <see cref="MyLangParser.class_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCtorDecl([NotNull] MyLangParser.CtorDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.idOrLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdOrLit([NotNull] MyLangParser.IdOrLitContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.pre_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPre_OP([NotNull] MyLangParser.Pre_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.pow_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPow_OP([NotNull] MyLangParser.Pow_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.deleteExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeleteExpr([NotNull] MyLangParser.DeleteExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionDecl</c>
	/// labeled alternative in <see cref="MyLangParser.toplevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDecl([NotNull] MyLangParser.FunctionDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.id_opt_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitId_opt_value([NotNull] MyLangParser.Id_opt_valueContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>CtorDef</c>
	/// labeled alternative in <see cref="MyLangParser.ctor_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCtorDef([NotNull] MyLangParser.CtorDefContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Namespace</c>
	/// labeled alternative in <see cref="MyLangParser.toplevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamespace([NotNull] MyLangParser.NamespaceContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.typePtr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypePtr([NotNull] MyLangParser.TypePtrContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.equal_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqual_OP([NotNull] MyLangParser.Equal_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>PropDecl</c>
	/// labeled alternative in <see cref="MyLangParser.prop_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPropDecl([NotNull] MyLangParser.PropDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Attributes</c>
	/// labeled alternative in <see cref="MyLangParser.toplevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAttributes([NotNull] MyLangParser.AttributesContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>VariableDecl</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDecl([NotNull] MyLangParser.VariableDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier100</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier100([NotNull] MyLangParser.Tier100Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.memptr_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemptr_OP([NotNull] MyLangParser.Memptr_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>PreCrementExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreCrementExpr([NotNull] MyLangParser.PreCrementExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.sizeofExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSizeofExpr([NotNull] MyLangParser.SizeofExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.bitand_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitand_OP([NotNull] MyLangParser.Bitand_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>PostCrementExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostCrementExpr([NotNull] MyLangParser.PostCrementExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.shift_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitShift_OP([NotNull] MyLangParser.Shift_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.mult_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMult_OP([NotNull] MyLangParser.Mult_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>MulDivMod</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDivMod([NotNull] MyLangParser.MulDivModContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterThan</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterThan([NotNull] MyLangParser.GreaterThanContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier104</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier104([NotNull] MyLangParser.Tier104Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FuncMeth</c>
	/// labeled alternative in <see cref="MyLangParser.funcmeth_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncMeth([NotNull] MyLangParser.FuncMethContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameters([NotNull] MyLangParser.ParametersContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FieldDecl</c>
	/// labeled alternative in <see cref="MyLangParser.field_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFieldDecl([NotNull] MyLangParser.FieldDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ElementSelectExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElementSelectExpr([NotNull] MyLangParser.ElementSelectExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign([NotNull] MyLangParser.AssignContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStmt([NotNull] MyLangParser.ReturnStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ParensExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParensExpr([NotNull] MyLangParser.ParensExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.or_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOr_OP([NotNull] MyLangParser.Or_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.preOpExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreOpExpr([NotNull] MyLangParser.PreOpExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier4_5</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier4_5([NotNull] MyLangParser.Tier4_5Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStmt([NotNull] MyLangParser.IfStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.anyTypeCS"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnyTypeCS([NotNull] MyLangParser.AnyTypeCSContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.signQualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSignQualifier([NotNull] MyLangParser.SignQualifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.tt_exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTt_exp([NotNull] MyLangParser.Tt_expContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>rest</c>
	/// labeled alternative in <see cref="MyLangParser.toplevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRest([NotNull] MyLangParser.RestContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStmt([NotNull] MyLangParser.ForStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>OperatorDecl</c>
	/// labeled alternative in <see cref="MyLangParser.operator_decl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperatorDecl([NotNull] MyLangParser.OperatorDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>TimesStmt</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTimesStmt([NotNull] MyLangParser.TimesStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>BreakStmt</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStmt([NotNull] MyLangParser.BreakStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>AttrPoly</c>
	/// labeled alternative in <see cref="MyLangParser.attrib"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAttrPoly([NotNull] MyLangParser.AttrPolyContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ClassDecl</c>
	/// labeled alternative in <see cref="MyLangParser.toplevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClassDecl([NotNull] MyLangParser.ClassDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameter([NotNull] MyLangParser.ParameterContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>RShift</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRShift([NotNull] MyLangParser.RShiftContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>UnionDecl</c>
	/// labeled alternative in <see cref="MyLangParser.toplevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnionDecl([NotNull] MyLangParser.UnionDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatements([NotNull] MyLangParser.StatementsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StructDecl</c>
	/// labeled alternative in <see cref="MyLangParser.toplevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructDecl([NotNull] MyLangParser.StructDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>LShift</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLShift([NotNull] MyLangParser.LShiftContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ClassExtendedDecl</c>
	/// labeled alternative in <see cref="MyLangParser.class_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClassExtendedDecl([NotNull] MyLangParser.ClassExtendedDeclContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.typeQualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeQualifier([NotNull] MyLangParser.TypeQualifierContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Sqrt</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSqrt([NotNull] MyLangParser.SqrtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterEqualThan</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterEqualThan([NotNull] MyLangParser.GreaterEqualThanContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier17</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier17([NotNull] MyLangParser.Tier17Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier13</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier13([NotNull] MyLangParser.Tier13Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier14</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier14([NotNull] MyLangParser.Tier14Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier15</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier15([NotNull] MyLangParser.Tier15Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier16</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier16([NotNull] MyLangParser.Tier16Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentList([NotNull] MyLangParser.ArgumentListContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier10</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier10([NotNull] MyLangParser.Tier10Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier11</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier11([NotNull] MyLangParser.Tier11Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Tier12</c>
	/// labeled alternative in <see cref="MyLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTier12([NotNull] MyLangParser.Tier12Context context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.post_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPost_OP([NotNull] MyLangParser.Post_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.mem_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMem_OP([NotNull] MyLangParser.Mem_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.anyTypeOrConsts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnyTypeOrConsts([NotNull] MyLangParser.AnyTypeOrConstsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.and_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnd_OP([NotNull] MyLangParser.And_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.assign_OP"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign_OP([NotNull] MyLangParser.Assign_OPContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.floatingType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloatingType([NotNull] MyLangParser.FloatingTypeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StaticCastExpr</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStaticCastExpr([NotNull] MyLangParser.StaticCastExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>EachStmt</c>
	/// labeled alternative in <see cref="MyLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEachStmt([NotNull] MyLangParser.EachStmtContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.basicType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBasicType([NotNull] MyLangParser.BasicTypeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Pow</c>
	/// labeled alternative in <see cref="MyLangParser.expr_old"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPow([NotNull] MyLangParser.PowContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MyLangParser.integerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntegerType([NotNull] MyLangParser.IntegerTypeContext context);
}
} // namespace MyLang
