//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/documents/code/csharp/myll/Antlr\MyParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Myll {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class MyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, STRING_LIT=2, CHAR_LIT=3, ARROW_STAR=4, DOT_STAR=5, PTR_TO_ARY=6, 
		TRP_POINT=7, DBL_POINT=8, DBL_LBRACK=9, DBL_RBRACK=10, DBL_AMP=11, DBL_PLUS=12, 
		DBL_MINUS=13, RARROW=14, PHATRARROW=15, LSHIFT=16, SCOPE=17, AT_BANG=18, 
		AT_QUEST=19, AT_PLUS=20, AT_LBRACK=21, AUTOINDEX=22, LBRACK=23, RBRACK=24, 
		LCURLY=25, RCURLY=26, LPAREN=27, RPAREN=28, AT=29, AMP=30, STAR=31, SLASH=32, 
		MOD=33, PLUS=34, MINUS=35, SEMI=36, COLON=37, COMMA=38, POINT=39, EXCL=40, 
		TILDE=41, PIPEPIPE=42, PIPE=43, QM=44, HAT=45, USCORE=46, EQ=47, NEQ=48, 
		LTEQ=49, GTEQ=50, LT=51, GT=52, ASSIGN=53, AS_POW=54, AS_MUL=55, AS_DIV=56, 
		AS_MOD=57, AS_ADD=58, AS_SUB=59, AS_LSH=60, AS_RSH=61, AS_AND=62, AS_OR=63, 
		AS_XOR=64, AUTO=65, VOID=66, BOOL=67, INT=68, UINT=69, ISIZE=70, USIZE=71, 
		BYTE=72, CHAR=73, CODEPOINT=74, STRING=75, HALF=76, FLOAT=77, DOUBLE=78, 
		LONGDOUBLE=79, I64=80, I32=81, I16=82, I8=83, U64=84, U32=85, U16=86, 
		U8=87, B64=88, B32=89, B16=90, B8=91, F80=92, F64=93, F32=94, F16=95, 
		NS=96, VOLATILE=97, STABLE=98, CONST=99, MUTABLE=100, STATIC=101, USING=102, 
		ALIAS=103, UNION=104, STRUCT=105, CLASS=106, CTOR=107, DTOR=108, PUB=109, 
		PRIV=110, PROT=111, FUNC=112, METH=113, ENUM=114, PROP=115, FIELDS=116, 
		FIELD=117, OPERATOR=118, VAR=119, LET=120, FOR=121, TIMES=122, IF=123, 
		ELSE=124, BREAK=125, RETURN=126, SIZEOF=127, NEW=128, DELETE=129, THROW=130, 
		NUL=131, BOOL_LIT=132, ID=133, FLOAT_LIT=134, HEX_LIT=135, INTEGER_LIT=136, 
		NL=137, WS=138;
	public const int
		RULE_postOP = 0, RULE_preOP = 1, RULE_assignOP = 2, RULE_powOP = 3, RULE_multOP = 4, 
		RULE_addOP = 5, RULE_shiftOP = 6, RULE_bitAndOP = 7, RULE_bitXorOP = 8, 
		RULE_bitOrOP = 9, RULE_andOP = 10, RULE_orOP = 11, RULE_memOP = 12, RULE_memPtrOP = 13, 
		RULE_orderOP = 14, RULE_equalOP = 15, RULE_comment = 16, RULE_id = 17, 
		RULE_anyId = 18, RULE_idOrLit = 19, RULE_charType = 20, RULE_floatingType = 21, 
		RULE_binaryType = 22, RULE_integerType = 23, RULE_basicType = 24, RULE_typeQual = 25, 
		RULE_typeQuals = 26, RULE_typePtr = 27, RULE_nestedType = 28, RULE_funcType = 29, 
		RULE_qualType = 30, RULE_qualTypeOrLit = 31, RULE_tplParams = 32, RULE_idTplType = 33, 
		RULE_preOpExpr = 34, RULE_castExpr = 35, RULE_sizeofExpr = 36, RULE_newExpr = 37, 
		RULE_deleteExpr = 38, RULE_namedExpr = 39, RULE_namedExprs = 40, RULE_expr = 41, 
		RULE_exprs = 42, RULE_tt_exp = 43, RULE_idExpr = 44, RULE_typedIdExprs = 45, 
		RULE_attrib = 46, RULE_attribBlk = 47, RULE_stmt = 48, RULE_stmtBlk = 49, 
		RULE_classDef = 50, RULE_classExtDef = 51, RULE_argList = 52, RULE_initList = 53, 
		RULE_param = 54, RULE_params = 55, RULE_ctorDecl = 56, RULE_funcDecl = 57, 
		RULE_opDecl = 58, RULE_topLevel = 59, RULE_prog = 60;
	public static readonly string[] ruleNames = {
		"postOP", "preOP", "assignOP", "powOP", "multOP", "addOP", "shiftOP", 
		"bitAndOP", "bitXorOP", "bitOrOP", "andOP", "orOP", "memOP", "memPtrOP", 
		"orderOP", "equalOP", "comment", "id", "anyId", "idOrLit", "charType", 
		"floatingType", "binaryType", "integerType", "basicType", "typeQual", 
		"typeQuals", "typePtr", "nestedType", "funcType", "qualType", "qualTypeOrLit", 
		"tplParams", "idTplType", "preOpExpr", "castExpr", "sizeofExpr", "newExpr", 
		"deleteExpr", "namedExpr", "namedExprs", "expr", "exprs", "tt_exp", "idExpr", 
		"typedIdExprs", "attrib", "attribBlk", "stmt", "stmtBlk", "classDef", 
		"classExtDef", "argList", "initList", "param", "params", "ctorDecl", "funcDecl", 
		"opDecl", "topLevel", "prog"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'->*'", "'.*'", "'[*]'", "'...'", "'..'", "'[['", 
		"']]'", "'&&'", "'++'", "'--'", "'->'", "'=>'", "'<<'", "'::'", "'@!'", 
		"'@?'", "'@+'", "'@['", null, "'['", "']'", "'{'", "'}'", "'('", "')'", 
		"'@'", "'&'", "'*'", "'/'", "'%'", "'+'", "'-'", "';'", "':'", "','", 
		"'.'", "'!'", "'~'", "'||'", "'|'", "'?'", "'^'", "'_'", "'=='", "'!='", 
		"'<='", "'>='", "'<'", "'>'", "'='", "'**='", "'*='", "'/='", "'%='", 
		"'+='", "'-='", "'<<='", "'>>='", "'&='", "'|='", "'^='", "'auto'", "'void'", 
		"'bool'", "'int'", "'uint'", "'isize'", "'usize'", "'byte'", "'char'", 
		"'codepoint'", "'string'", "'half'", "'float'", "'double'", "'longdouble'", 
		"'i64'", "'i32'", "'i16'", "'i8'", "'u64'", "'u32'", "'u16'", "'u8'", 
		"'b64'", "'b32'", "'b16'", "'b8'", "'f80'", "'f64'", "'f32'", "'f16'", 
		"'namespace'", "'volatile'", "'stable'", "'const'", "'mutable'", "'static'", 
		"'using'", "'alias'", "'union'", "'struct'", "'class'", null, null, null, 
		null, null, null, null, "'enum'", "'prop'", "'fields'", "'field'", "'operator'", 
		"'var'", "'let'", "'for'", "'times'", "'if'", "'else'", "'break'", "'return'", 
		"'sizeof'", "'new'", "'delete'", "'throw'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "STRING_LIT", "CHAR_LIT", "ARROW_STAR", "DOT_STAR", "PTR_TO_ARY", 
		"TRP_POINT", "DBL_POINT", "DBL_LBRACK", "DBL_RBRACK", "DBL_AMP", "DBL_PLUS", 
		"DBL_MINUS", "RARROW", "PHATRARROW", "LSHIFT", "SCOPE", "AT_BANG", "AT_QUEST", 
		"AT_PLUS", "AT_LBRACK", "AUTOINDEX", "LBRACK", "RBRACK", "LCURLY", "RCURLY", 
		"LPAREN", "RPAREN", "AT", "AMP", "STAR", "SLASH", "MOD", "PLUS", "MINUS", 
		"SEMI", "COLON", "COMMA", "POINT", "EXCL", "TILDE", "PIPEPIPE", "PIPE", 
		"QM", "HAT", "USCORE", "EQ", "NEQ", "LTEQ", "GTEQ", "LT", "GT", "ASSIGN", 
		"AS_POW", "AS_MUL", "AS_DIV", "AS_MOD", "AS_ADD", "AS_SUB", "AS_LSH", 
		"AS_RSH", "AS_AND", "AS_OR", "AS_XOR", "AUTO", "VOID", "BOOL", "INT", 
		"UINT", "ISIZE", "USIZE", "BYTE", "CHAR", "CODEPOINT", "STRING", "HALF", 
		"FLOAT", "DOUBLE", "LONGDOUBLE", "I64", "I32", "I16", "I8", "U64", "U32", 
		"U16", "U8", "B64", "B32", "B16", "B8", "F80", "F64", "F32", "F16", "NS", 
		"VOLATILE", "STABLE", "CONST", "MUTABLE", "STATIC", "USING", "ALIAS", 
		"UNION", "STRUCT", "CLASS", "CTOR", "DTOR", "PUB", "PRIV", "PROT", "FUNC", 
		"METH", "ENUM", "PROP", "FIELDS", "FIELD", "OPERATOR", "VAR", "LET", "FOR", 
		"TIMES", "IF", "ELSE", "BREAK", "RETURN", "SIZEOF", "NEW", "DELETE", "THROW", 
		"NUL", "BOOL_LIT", "ID", "FLOAT_LIT", "HEX_LIT", "INTEGER_LIT", "NL", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class PostOPContext : ParserRuleContext {
		public PostOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostOPContext postOP() {
		PostOPContext _localctx = new PostOPContext(Context, State);
		EnterRule(_localctx, 0, RULE_postOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = TokenStream.LA(1);
			if ( !(_la==DBL_PLUS || _la==DBL_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreOPContext : ParserRuleContext {
		public PreOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreOPContext preOP() {
		PreOPContext _localctx = new PreOPContext(Context, State);
		EnterRule(_localctx, 2, RULE_preOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EXCL) | (1L << TILDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOPContext : ParserRuleContext {
		public AssignOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOPContext assignOP() {
		AssignOPContext _localctx = new AssignOPContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (ASSIGN - 53)) | (1L << (AS_POW - 53)) | (1L << (AS_MUL - 53)) | (1L << (AS_DIV - 53)) | (1L << (AS_MOD - 53)) | (1L << (AS_ADD - 53)) | (1L << (AS_SUB - 53)) | (1L << (AS_LSH - 53)) | (1L << (AS_RSH - 53)) | (1L << (AS_AND - 53)) | (1L << (AS_OR - 53)) | (1L << (AS_XOR - 53)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowOPContext : ParserRuleContext {
		public PowOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowOPContext powOP() {
		PowOPContext _localctx = new PowOPContext(Context, State);
		EnterRule(_localctx, 6, RULE_powOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(STAR);
			State = 129; Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOPContext : ParserRuleContext {
		public MultOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOPContext multOP() {
		MultOPContext _localctx = new MultOPContext(Context, State);
		EnterRule(_localctx, 8, RULE_multOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOPContext : ParserRuleContext {
		public AddOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOPContext addOP() {
		AddOPContext _localctx = new AddOPContext(Context, State);
		EnterRule(_localctx, 10, RULE_addOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOPContext : ParserRuleContext {
		public ShiftOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOPContext shiftOP() {
		ShiftOPContext _localctx = new ShiftOPContext(Context, State);
		EnterRule(_localctx, 12, RULE_shiftOP);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LSHIFT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135; Match(LSHIFT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; Match(GT);
				State = 137; Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitAndOPContext : ParserRuleContext {
		public BitAndOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitAndOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitAndOPContext bitAndOP() {
		BitAndOPContext _localctx = new BitAndOPContext(Context, State);
		EnterRule(_localctx, 14, RULE_bitAndOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitXorOPContext : ParserRuleContext {
		public BitXorOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitXorOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXorOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitXorOPContext bitXorOP() {
		BitXorOPContext _localctx = new BitXorOPContext(Context, State);
		EnterRule(_localctx, 16, RULE_bitXorOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(HAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOrOPContext : ParserRuleContext {
		public BitOrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOrOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitOrOPContext bitOrOP() {
		BitOrOPContext _localctx = new BitOrOPContext(Context, State);
		EnterRule(_localctx, 18, RULE_bitOrOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(PIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOPContext : ParserRuleContext {
		public AndOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOPContext andOP() {
		AndOPContext _localctx = new AndOPContext(Context, State);
		EnterRule(_localctx, 20, RULE_andOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(DBL_AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrOPContext : ParserRuleContext {
		public OrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrOPContext orOP() {
		OrOPContext _localctx = new OrOPContext(Context, State);
		EnterRule(_localctx, 22, RULE_orOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(PIPEPIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemOPContext : ParserRuleContext {
		public MemOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemOPContext memOP() {
		MemOPContext _localctx = new MemOPContext(Context, State);
		EnterRule(_localctx, 24, RULE_memOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_la = TokenStream.LA(1);
			if ( !(_la==RARROW || _la==POINT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemPtrOPContext : ParserRuleContext {
		public MemPtrOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memPtrOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemPtrOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemPtrOPContext memPtrOP() {
		MemPtrOPContext _localctx = new MemPtrOPContext(Context, State);
		EnterRule(_localctx, 26, RULE_memPtrOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = TokenStream.LA(1);
			if ( !(_la==ARROW_STAR || _la==DOT_STAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderOPContext : ParserRuleContext {
		public OrderOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderOPContext orderOP() {
		OrderOPContext _localctx = new OrderOPContext(Context, State);
		EnterRule(_localctx, 28, RULE_orderOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTEQ) | (1L << GTEQ) | (1L << LT) | (1L << GT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualOPContext : ParserRuleContext {
		public EqualOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualOPContext equalOP() {
		EqualOPContext _localctx = new EqualOPContext(Context, State);
		EnterRule(_localctx, 30, RULE_equalOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = TokenStream.LA(1);
			if ( !(_la==EQ || _la==NEQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(MyParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 32, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 34, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyIdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode AUTOINDEX() { return GetToken(MyParser.AUTOINDEX, 0); }
		public ITerminalNode USCORE() { return GetToken(MyParser.USCORE, 0); }
		public AnyIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyId; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyIdContext anyId() {
		AnyIdContext _localctx = new AnyIdContext(Context, State);
		EnterRule(_localctx, 36, RULE_anyId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTOINDEX || _la==USCORE || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdOrLitContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode INTEGER_LIT() { return GetToken(MyParser.INTEGER_LIT, 0); }
		public ITerminalNode HEX_LIT() { return GetToken(MyParser.HEX_LIT, 0); }
		public ITerminalNode FLOAT_LIT() { return GetToken(MyParser.FLOAT_LIT, 0); }
		public ITerminalNode STRING_LIT() { return GetToken(MyParser.STRING_LIT, 0); }
		public ITerminalNode CHAR_LIT() { return GetToken(MyParser.CHAR_LIT, 0); }
		public ITerminalNode BOOL_LIT() { return GetToken(MyParser.BOOL_LIT, 0); }
		public ITerminalNode NUL() { return GetToken(MyParser.NUL, 0); }
		public IdOrLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idOrLit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdOrLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdOrLitContext idOrLit() {
		IdOrLitContext _localctx = new IdOrLitContext(Context, State);
		EnterRule(_localctx, 38, RULE_idOrLit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LIT || _la==CHAR_LIT || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (NUL - 131)) | (1L << (BOOL_LIT - 131)) | (1L << (ID - 131)) | (1L << (FLOAT_LIT - 131)) | (1L << (HEX_LIT - 131)) | (1L << (INTEGER_LIT - 131)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharTypeContext : ParserRuleContext {
		public ITerminalNode CHAR() { return GetToken(MyParser.CHAR, 0); }
		public ITerminalNode CODEPOINT() { return GetToken(MyParser.CODEPOINT, 0); }
		public ITerminalNode STRING() { return GetToken(MyParser.STRING, 0); }
		public CharTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharTypeContext charType() {
		CharTypeContext _localctx = new CharTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_charType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (CHAR - 73)) | (1L << (CODEPOINT - 73)) | (1L << (STRING - 73)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingTypeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(MyParser.FLOAT, 0); }
		public ITerminalNode F80() { return GetToken(MyParser.F80, 0); }
		public ITerminalNode F64() { return GetToken(MyParser.F64, 0); }
		public ITerminalNode F32() { return GetToken(MyParser.F32, 0); }
		public ITerminalNode F16() { return GetToken(MyParser.F16, 0); }
		public FloatingTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingTypeContext floatingType() {
		FloatingTypeContext _localctx = new FloatingTypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_floatingType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (FLOAT - 77)) | (1L << (F80 - 77)) | (1L << (F64 - 77)) | (1L << (F32 - 77)) | (1L << (F16 - 77)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryTypeContext : ParserRuleContext {
		public ITerminalNode BYTE() { return GetToken(MyParser.BYTE, 0); }
		public ITerminalNode B64() { return GetToken(MyParser.B64, 0); }
		public ITerminalNode B32() { return GetToken(MyParser.B32, 0); }
		public ITerminalNode B16() { return GetToken(MyParser.B16, 0); }
		public ITerminalNode B8() { return GetToken(MyParser.B8, 0); }
		public BinaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryTypeContext binaryType() {
		BinaryTypeContext _localctx = new BinaryTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_binaryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (BYTE - 72)) | (1L << (B64 - 72)) | (1L << (B32 - 72)) | (1L << (B16 - 72)) | (1L << (B8 - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(MyParser.INT, 0); }
		public ITerminalNode UINT() { return GetToken(MyParser.UINT, 0); }
		public ITerminalNode ISIZE() { return GetToken(MyParser.ISIZE, 0); }
		public ITerminalNode USIZE() { return GetToken(MyParser.USIZE, 0); }
		public ITerminalNode I64() { return GetToken(MyParser.I64, 0); }
		public ITerminalNode I32() { return GetToken(MyParser.I32, 0); }
		public ITerminalNode I16() { return GetToken(MyParser.I16, 0); }
		public ITerminalNode I8() { return GetToken(MyParser.I8, 0); }
		public ITerminalNode U64() { return GetToken(MyParser.U64, 0); }
		public ITerminalNode U32() { return GetToken(MyParser.U32, 0); }
		public ITerminalNode U16() { return GetToken(MyParser.U16, 0); }
		public ITerminalNode U8() { return GetToken(MyParser.U8, 0); }
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_integerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INT - 68)) | (1L << (UINT - 68)) | (1L << (ISIZE - 68)) | (1L << (USIZE - 68)) | (1L << (I64 - 68)) | (1L << (I32 - 68)) | (1L << (I16 - 68)) | (1L << (I8 - 68)) | (1L << (U64 - 68)) | (1L << (U32 - 68)) | (1L << (U16 - 68)) | (1L << (U8 - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTypeContext : ParserRuleContext {
		public ITerminalNode AUTO() { return GetToken(MyParser.AUTO, 0); }
		public ITerminalNode VOID() { return GetToken(MyParser.VOID, 0); }
		public ITerminalNode BOOL() { return GetToken(MyParser.BOOL, 0); }
		public CharTypeContext charType() {
			return GetRuleContext<CharTypeContext>(0);
		}
		public FloatingTypeContext floatingType() {
			return GetRuleContext<FloatingTypeContext>(0);
		}
		public BinaryTypeContext binaryType() {
			return GetRuleContext<BinaryTypeContext>(0);
		}
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public BasicTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTypeContext basicType() {
		BasicTypeContext _localctx = new BasicTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_basicType);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; Match(AUTO);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; Match(VOID);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176; Match(BOOL);
				}
				break;
			case CHAR:
			case CODEPOINT:
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177; charType();
				}
				break;
			case FLOAT:
			case F80:
			case F64:
			case F32:
			case F16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 178; floatingType();
				}
				break;
			case BYTE:
			case B64:
			case B32:
			case B16:
			case B8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 179; binaryType();
				}
				break;
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
				EnterOuterAlt(_localctx, 7);
				{
				State = 180; integerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualContext : ParserRuleContext {
		public IToken qual;
		public ITerminalNode CONST() { return GetToken(MyParser.CONST, 0); }
		public ITerminalNode VOLATILE() { return GetToken(MyParser.VOLATILE, 0); }
		public ITerminalNode MUTABLE() { return GetToken(MyParser.MUTABLE, 0); }
		public ITerminalNode STABLE() { return GetToken(MyParser.STABLE, 0); }
		public TypeQualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQual; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualContext typeQual() {
		TypeQualContext _localctx = new TypeQualContext(Context, State);
		EnterRule(_localctx, 50, RULE_typeQual);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_localctx.qual = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (VOLATILE - 97)) | (1L << (STABLE - 97)) | (1L << (CONST - 97)) | (1L << (MUTABLE - 97)))) != 0)) ) {
				_localctx.qual = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualsContext : ParserRuleContext {
		public TypeQualContext[] typeQual() {
			return GetRuleContexts<TypeQualContext>();
		}
		public TypeQualContext typeQual(int i) {
			return GetRuleContext<TypeQualContext>(i);
		}
		public TypeQualsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQuals; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQuals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualsContext typeQuals() {
		TypeQualsContext _localctx = new TypeQualsContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeQuals);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 185; typeQual();
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePtrContext : ParserRuleContext {
		public IToken ptr;
		public IToken ary;
		public TypeQualsContext typeQuals() {
			return GetRuleContext<TypeQualsContext>(0);
		}
		public ITerminalNode AT_BANG() { return GetToken(MyParser.AT_BANG, 0); }
		public ITerminalNode AT_QUEST() { return GetToken(MyParser.AT_QUEST, 0); }
		public ITerminalNode AT_PLUS() { return GetToken(MyParser.AT_PLUS, 0); }
		public ITerminalNode DBL_AMP() { return GetToken(MyParser.DBL_AMP, 0); }
		public ITerminalNode AMP() { return GetToken(MyParser.AMP, 0); }
		public ITerminalNode STAR() { return GetToken(MyParser.STAR, 0); }
		public ITerminalNode PTR_TO_ARY() { return GetToken(MyParser.PTR_TO_ARY, 0); }
		public ITerminalNode RBRACK() { return GetToken(MyParser.RBRACK, 0); }
		public ITerminalNode AT_LBRACK() { return GetToken(MyParser.AT_LBRACK, 0); }
		public ITerminalNode LBRACK() { return GetToken(MyParser.LBRACK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TypePtrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePtr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePtr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePtrContext typePtr() {
		TypePtrContext _localctx = new TypePtrContext(Context, State);
		EnterRule(_localctx, 54, RULE_typePtr);
		int _la;
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PTR_TO_ARY:
			case DBL_AMP:
			case AT_BANG:
			case AT_QUEST:
			case AT_PLUS:
			case AMP:
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				_localctx.ptr = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PTR_TO_ARY) | (1L << DBL_AMP) | (1L << AT_BANG) | (1L << AT_QUEST) | (1L << AT_PLUS) | (1L << AMP) | (1L << STAR))) != 0)) ) {
					_localctx.ptr = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 192; typeQuals();
				}
				break;
			case AT_LBRACK:
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				_localctx.ary = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AT_LBRACK || _la==LBRACK) ) {
					_localctx.ary = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EXCL) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (SIZEOF - 127)) | (1L << (NEW - 127)) | (1L << (DELETE - 127)) | (1L << (THROW - 127)) | (1L << (NUL - 127)) | (1L << (BOOL_LIT - 127)) | (1L << (ID - 127)) | (1L << (FLOAT_LIT - 127)) | (1L << (HEX_LIT - 127)) | (1L << (INTEGER_LIT - 127)))) != 0)) {
					{
					State = 194; expr(0);
					}
				}

				State = 197; Match(RBRACK);
				State = 198; typeQuals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeContext : ParserRuleContext {
		public IdTplTypeContext[] idTplType() {
			return GetRuleContexts<IdTplTypeContext>();
		}
		public IdTplTypeContext idTplType(int i) {
			return GetRuleContext<IdTplTypeContext>(i);
		}
		public ITerminalNode[] SCOPE() { return GetTokens(MyParser.SCOPE); }
		public ITerminalNode SCOPE(int i) {
			return GetToken(MyParser.SCOPE, i);
		}
		public NestedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeContext nestedType() {
		NestedTypeContext _localctx = new NestedTypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_nestedType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; idTplType();
			State = 206;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 202; Match(SCOPE);
					State = 203; idTplType();
					}
					} 
				}
				State = 208;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		public ITerminalNode FUNC() { return GetToken(MyParser.FUNC, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(MyParser.RARROW, 0); }
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(FUNC);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 210; tplParams();
				}
			}

			State = 213; @params();
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 214; Match(RARROW);
				State = 215; qualType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualTypeContext : ParserRuleContext {
		public TypeQualsContext typeQuals() {
			return GetRuleContext<TypeQualsContext>(0);
		}
		public BasicTypeContext basicType() {
			return GetRuleContext<BasicTypeContext>(0);
		}
		public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public NestedTypeContext nestedType() {
			return GetRuleContext<NestedTypeContext>(0);
		}
		public TypePtrContext[] typePtr() {
			return GetRuleContexts<TypePtrContext>();
		}
		public TypePtrContext typePtr(int i) {
			return GetRuleContext<TypePtrContext>(i);
		}
		public QualTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualTypeContext qualType() {
		QualTypeContext _localctx = new QualTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_qualType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; typeQuals();
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F80:
			case F64:
			case F32:
			case F16:
				{
				State = 219; basicType();
				}
				break;
			case FUNC:
				{
				State = 220; funcType();
				}
				break;
			case ID:
				{
				State = 221; nestedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 224; typePtr();
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualTypeOrLitContext : ParserRuleContext {
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public ITerminalNode INTEGER_LIT() { return GetToken(MyParser.INTEGER_LIT, 0); }
		public QualTypeOrLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualTypeOrLit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualTypeOrLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualTypeOrLitContext qualTypeOrLit() {
		QualTypeOrLitContext _localctx = new QualTypeOrLitContext(Context, State);
		EnterRule(_localctx, 62, RULE_qualTypeOrLit);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
			case VOID:
			case BOOL:
			case INT:
			case UINT:
			case ISIZE:
			case USIZE:
			case BYTE:
			case CHAR:
			case CODEPOINT:
			case STRING:
			case FLOAT:
			case I64:
			case I32:
			case I16:
			case I8:
			case U64:
			case U32:
			case U16:
			case U8:
			case B64:
			case B32:
			case B16:
			case B8:
			case F80:
			case F64:
			case F32:
			case F16:
			case VOLATILE:
			case STABLE:
			case CONST:
			case MUTABLE:
			case FUNC:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230; qualType();
				}
				break;
			case INTEGER_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231; Match(INTEGER_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TplParamsContext : ParserRuleContext {
		public QualTypeOrLitContext[] qualTypeOrLit() {
			return GetRuleContexts<QualTypeOrLitContext>();
		}
		public QualTypeOrLitContext qualTypeOrLit(int i) {
			return GetRuleContext<QualTypeOrLitContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public TplParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tplParams; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTplParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TplParamsContext tplParams() {
		TplParamsContext _localctx = new TplParamsContext(Context, State);
		EnterRule(_localctx, 64, RULE_tplParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(LT);
			State = 235; qualTypeOrLit();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 236; Match(COMMA);
				State = 237; qualTypeOrLit();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 243; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdTplTypeContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TplParamsContext tplParams() {
			return GetRuleContext<TplParamsContext>(0);
		}
		public IdTplTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idTplType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdTplType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdTplTypeContext idTplType() {
		IdTplTypeContext _localctx = new IdTplTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_idTplType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; id();
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 246; tplParams();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreOpExprContext : ParserRuleContext {
		public PreOPContext preOP() {
			return GetRuleContext<PreOPContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PreOpExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preOpExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreOpExprContext preOpExpr() {
		PreOpExprContext _localctx = new PreOpExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_preOpExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; preOP();
			State = 250; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExprContext : ParserRuleContext {
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CastExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExprContext castExpr() {
		CastExprContext _localctx = new CastExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_castExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(LPAREN);
			State = 253; qualType();
			State = 254; Match(RPAREN);
			State = 255; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofExprContext : ParserRuleContext {
		public ITerminalNode SIZEOF() { return GetToken(MyParser.SIZEOF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SizeofExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeofExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeofExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeofExprContext sizeofExpr() {
		SizeofExprContext _localctx = new SizeofExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_sizeofExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(SIZEOF);
			State = 258; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExprContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(MyParser.NEW, 0); }
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public NewExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExprContext newExpr() {
		NewExprContext _localctx = new NewExprContext(Context, State);
		EnterRule(_localctx, 74, RULE_newExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(NEW);
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 261; qualType();
				}
				break;
			}
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 264; Match(LPAREN);
				State = 265; exprs();
				State = 266; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteExprContext : ParserRuleContext {
		public IToken ary;
		public ITerminalNode DELETE() { return GetToken(MyParser.DELETE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeleteExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteExprContext deleteExpr() {
		DeleteExprContext _localctx = new DeleteExprContext(Context, State);
		EnterRule(_localctx, 76, RULE_deleteExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(DELETE);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 271; _localctx.ary = Match(LBRACK);
				State = 272; Match(RBRACK);
				}
			}

			State = 275; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(MyParser.COLON, 0); }
		public NamedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedExprContext namedExpr() {
		NamedExprContext _localctx = new NamedExprContext(Context, State);
		EnterRule(_localctx, 78, RULE_namedExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 277; Match(ID);
				State = 278; Match(COLON);
				}
				break;
			}
			State = 281; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedExprsContext : ParserRuleContext {
		public NamedExprContext[] namedExpr() {
			return GetRuleContexts<NamedExprContext>();
		}
		public NamedExprContext namedExpr(int i) {
			return GetRuleContext<NamedExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public NamedExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedExprs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedExprsContext namedExprs() {
		NamedExprsContext _localctx = new NamedExprsContext(Context, State);
		EnterRule(_localctx, 80, RULE_namedExprs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; namedExpr();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 284; Match(COMMA);
				State = 285; namedExpr();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Tier2Context : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PostOPContext postOP() {
			return GetRuleContext<PostOPContext>(0);
		}
		public MemOPContext memOP() {
			return GetRuleContext<MemOPContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public NamedExprsContext namedExprs() {
			return GetRuleContext<NamedExprsContext>(0);
		}
		public Tier2Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier3Context : ExprContext {
		public PreOpExprContext preOpExpr() {
			return GetRuleContext<PreOpExprContext>(0);
		}
		public CastExprContext castExpr() {
			return GetRuleContext<CastExprContext>(0);
		}
		public SizeofExprContext sizeofExpr() {
			return GetRuleContext<SizeofExprContext>(0);
		}
		public NewExprContext newExpr() {
			return GetRuleContext<NewExprContext>(0);
		}
		public DeleteExprContext deleteExpr() {
			return GetRuleContext<DeleteExprContext>(0);
		}
		public Tier3Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier4Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MemPtrOPContext memPtrOP() {
			return GetRuleContext<MemPtrOPContext>(0);
		}
		public Tier4Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier5Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultOPContext multOP() {
			return GetRuleContext<MultOPContext>(0);
		}
		public Tier5Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier6Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddOPContext addOP() {
			return GetRuleContext<AddOPContext>(0);
		}
		public Tier6Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier7Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ShiftOPContext shiftOP() {
			return GetRuleContext<ShiftOPContext>(0);
		}
		public Tier7Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier7(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier8Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrderOPContext orderOP() {
			return GetRuleContext<OrderOPContext>(0);
		}
		public Tier8Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier9Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualOPContext equalOP() {
			return GetRuleContext<EqualOPContext>(0);
		}
		public Tier9Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier9(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier15Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignOPContext assignOP() {
			return GetRuleContext<AssignOPContext>(0);
		}
		public Tier15Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier15(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier16Context : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Tier16Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier13Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndOPContext andOP() {
			return GetRuleContext<AndOPContext>(0);
		}
		public Tier13Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier13(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier14Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrOPContext orOP() {
			return GetRuleContext<OrOPContext>(0);
		}
		public Tier14Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier14(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier200Context : ExprContext {
		public ITerminalNode AUTOINDEX() { return GetToken(MyParser.AUTOINDEX, 0); }
		public Tier200Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier200(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier11Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BitXorOPContext bitXorOP() {
			return GetRuleContext<BitXorOPContext>(0);
		}
		public Tier11Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier11(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier12Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BitOrOPContext bitOrOP() {
			return GetRuleContext<BitOrOPContext>(0);
		}
		public Tier12Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier12(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier104Context : ExprContext {
		public IdOrLitContext idOrLit() {
			return GetRuleContext<IdOrLitContext>(0);
		}
		public Tier104Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier104(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier10Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BitAndOPContext bitAndOP() {
			return GetRuleContext<BitAndOPContext>(0);
		}
		public Tier10Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier10(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier100Context : ExprContext {
		public AnyIdContext anyId() {
			return GetRuleContext<AnyIdContext>(0);
		}
		public Tt_expContext tt_exp() {
			return GetRuleContext<Tt_expContext>(0);
		}
		public Tier100Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier100(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier4_5Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PowOPContext powOP() {
			return GetRuleContext<PowOPContext>(0);
		}
		public Tier4_5Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier4_5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tier1Context : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode SCOPE() { return GetToken(MyParser.SCOPE, 0); }
		public Tier1Context(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTier1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				_localctx = new Tier3Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 297;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DBL_PLUS:
				case DBL_MINUS:
				case AMP:
				case STAR:
				case PLUS:
				case MINUS:
				case EXCL:
				case TILDE:
					{
					State = 292; preOpExpr();
					}
					break;
				case LPAREN:
					{
					State = 293; castExpr();
					}
					break;
				case SIZEOF:
					{
					State = 294; sizeofExpr();
					}
					break;
				case NEW:
					{
					State = 295; newExpr();
					}
					break;
				case DELETE:
					{
					State = 296; deleteExpr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				_localctx = new Tier16Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 299; Match(THROW);
				State = 300; expr(5);
				}
				break;
			case 3:
				{
				_localctx = new Tier100Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 301; anyId();
				State = 302; tt_exp();
				}
				break;
			case 4:
				{
				_localctx = new Tier104Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 304; idOrLit();
				}
				break;
			case 5:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 305; Match(LPAREN);
				State = 306; expr(0);
				State = 307; Match(RPAREN);
				}
				break;
			case 6:
				{
				_localctx = new Tier200Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 309; Match(AUTOINDEX);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 390;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new Tier1Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 312;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 313; Match(SCOPE);
						State = 314; expr(22);
						}
						break;
					case 2:
						{
						_localctx = new Tier4Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 315;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 316; memPtrOP();
						State = 317; expr(19);
						}
						break;
					case 3:
						{
						_localctx = new Tier4_5Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 319;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 320; powOP();
						State = 321; expr(18);
						}
						break;
					case 4:
						{
						_localctx = new Tier5Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 323;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 324; multOP();
						State = 325; expr(17);
						}
						break;
					case 5:
						{
						_localctx = new Tier6Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 327;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 328; addOP();
						State = 329; expr(16);
						}
						break;
					case 6:
						{
						_localctx = new Tier7Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 331;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 332; shiftOP();
						State = 333; expr(15);
						}
						break;
					case 7:
						{
						_localctx = new Tier8Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 335;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 336; orderOP();
						State = 337; expr(14);
						}
						break;
					case 8:
						{
						_localctx = new Tier9Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 339;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 340; equalOP();
						State = 341; expr(13);
						}
						break;
					case 9:
						{
						_localctx = new Tier10Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 343;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 344; bitAndOP();
						State = 345; expr(12);
						}
						break;
					case 10:
						{
						_localctx = new Tier11Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 347;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 348; bitXorOP();
						State = 349; expr(11);
						}
						break;
					case 11:
						{
						_localctx = new Tier12Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 351;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 352; bitOrOP();
						State = 353; expr(10);
						}
						break;
					case 12:
						{
						_localctx = new Tier13Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 355;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 356; andOP();
						State = 357; expr(9);
						}
						break;
					case 13:
						{
						_localctx = new Tier14Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 359;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 360; orOP();
						State = 361; expr(8);
						}
						break;
					case 14:
						{
						_localctx = new Tier15Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 363;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 369;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ASSIGN:
						case AS_POW:
						case AS_MUL:
						case AS_DIV:
						case AS_MOD:
						case AS_ADD:
						case AS_SUB:
						case AS_LSH:
						case AS_RSH:
						case AS_AND:
						case AS_OR:
						case AS_XOR:
							{
							State = 364; assignOP();
							}
							break;
						case QM:
							{
							State = 365; Match(QM);
							State = 366; expr(0);
							State = 367; Match(COLON);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 371; expr(6);
						}
						break;
					case 15:
						{
						_localctx = new Tier2Context(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 373;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 388;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case DBL_PLUS:
						case DBL_MINUS:
							{
							State = 374; postOP();
							}
							break;
						case LPAREN:
							{
							State = 375; Match(LPAREN);
							State = 377;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EXCL) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (SIZEOF - 127)) | (1L << (NEW - 127)) | (1L << (DELETE - 127)) | (1L << (THROW - 127)) | (1L << (NUL - 127)) | (1L << (BOOL_LIT - 127)) | (1L << (ID - 127)) | (1L << (FLOAT_LIT - 127)) | (1L << (HEX_LIT - 127)) | (1L << (INTEGER_LIT - 127)))) != 0)) {
								{
								State = 376; namedExprs();
								}
							}

							State = 379; Match(RPAREN);
							}
							break;
						case LBRACK:
							{
							State = 380; Match(LBRACK);
							State = 382;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EXCL) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (SIZEOF - 127)) | (1L << (NEW - 127)) | (1L << (DELETE - 127)) | (1L << (THROW - 127)) | (1L << (NUL - 127)) | (1L << (BOOL_LIT - 127)) | (1L << (ID - 127)) | (1L << (FLOAT_LIT - 127)) | (1L << (HEX_LIT - 127)) | (1L << (INTEGER_LIT - 127)))) != 0)) {
								{
								State = 381; namedExprs();
								}
							}

							State = 384; Match(RBRACK);
							}
							break;
						case RARROW:
						case POINT:
							{
							State = 385; memOP();
							State = 386; Match(ID);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public ExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprsContext exprs() {
		ExprsContext _localctx = new ExprsContext(Context, State);
		EnterRule(_localctx, 84, RULE_exprs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; expr(0);
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 396; Match(COMMA);
				State = 397; expr(0);
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tt_expContext : ParserRuleContext {
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public Tt_expContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tt_exp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTt_exp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tt_expContext tt_exp() {
		Tt_expContext _localctx = new Tt_expContext(Context, State);
		EnterRule(_localctx, 86, RULE_tt_exp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(LT);
			State = 404; exprs();
			State = 405; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MyParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IdExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprContext idExpr() {
		IdExprContext _localctx = new IdExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_idExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; id();
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 408; Match(ASSIGN);
				State = 409; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdExprsContext : ParserRuleContext {
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public IdExprContext[] idExpr() {
			return GetRuleContexts<IdExprContext>();
		}
		public IdExprContext idExpr(int i) {
			return GetRuleContext<IdExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public TypedIdExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdExprs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdExprsContext typedIdExprs() {
		TypedIdExprsContext _localctx = new TypedIdExprsContext(Context, State);
		EnterRule(_localctx, 90, RULE_typedIdExprs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; qualType();
			State = 413; idExpr();
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 414; Match(COMMA);
				State = 415; idExpr();
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public IdOrLitContext[] idOrLit() {
			return GetRuleContexts<IdOrLitContext>();
		}
		public IdOrLitContext idOrLit(int i) {
			return GetRuleContext<IdOrLitContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 92, RULE_attrib);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(ID);
			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 422; Match(ASSIGN);
				State = 423; idOrLit();
				}
				break;
			case LPAREN:
				{
				State = 424; Match(LPAREN);
				State = 425; idOrLit();
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 426; Match(COMMA);
					State = 427; idOrLit();
					}
					}
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 433; Match(RPAREN);
				}
				break;
			case RBRACK:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribBlkContext : ParserRuleContext {
		public ITerminalNode LBRACK() { return GetToken(MyParser.LBRACK, 0); }
		public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		public ITerminalNode RBRACK() { return GetToken(MyParser.RBRACK, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public AttribBlkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribBlk; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribBlk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribBlkContext attribBlk() {
		AttribBlkContext _localctx = new AttribBlkContext(Context, State);
		EnterRule(_localctx, 94, RULE_attribBlk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(LBRACK);
			State = 438; attrib();
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 439; Match(COMMA);
				State = 440; attrib();
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 446; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimesStmtContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode TIMES() { return GetToken(MyParser.TIMES, 0); }
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public TimesStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StmtContext {
		public ITerminalNode IF() { return GetToken(MyParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MyParser.RPAREN, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MyParser.ELSE, 0); }
		public IfStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : StmtContext {
		public ITerminalNode BREAK() { return GetToken(MyParser.BREAK, 0); }
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public BreakStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingContext : StmtContext {
		public ITerminalNode USING() { return GetToken(MyParser.USING, 0); }
		public NestedTypeContext[] nestedType() {
			return GetRuleContexts<NestedTypeContext>();
		}
		public NestedTypeContext nestedType(int i) {
			return GetRuleContext<NestedTypeContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public UsingContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EachStmtContext : StmtContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public EachStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StmtContext {
		public StmtBlkContext stmtBlk() {
			return GetRuleContext<StmtBlkContext>(0);
		}
		public BlockStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclContext : StmtContext {
		public ITerminalNode VAR() { return GetToken(MyParser.VAR, 0); }
		public TypedIdExprsContext typedIdExprs() {
			return GetRuleContext<TypedIdExprsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public ITerminalNode CONST() { return GetToken(MyParser.CONST, 0); }
		public VariableDeclContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StmtContext {
		public ITerminalNode FOR() { return GetToken(MyParser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(MyParser.LPAREN, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public ITerminalNode RPAREN() { return GetToken(MyParser.RPAREN, 0); }
		public ITerminalNode ELSE() { return GetToken(MyParser.ELSE, 0); }
		public ForStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		public ITerminalNode RETURN() { return GetToken(MyParser.RETURN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStmtContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public ExpressionStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_stmt);
		int _la;
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new UsingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 448; Match(USING);
				State = 449; nestedType();
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 450; Match(COMMA);
					State = 451; nestedType();
					}
					}
					State = 456;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 457; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new VariableDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 459; Match(VAR);
				State = 460; typedIdExprs();
				State = 461; Match(SEMI);
				}
				break;
			case 3:
				_localctx = new VariableDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 463; Match(CONST);
				State = 464; typedIdExprs();
				State = 465; Match(SEMI);
				}
				break;
			case 4:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 467; Match(IF);
				State = 468; Match(LPAREN);
				State = 469; expr(0);
				State = 470; Match(RPAREN);
				State = 471; stmt();
				State = 474;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 472; Match(ELSE);
					State = 473; stmt();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 476; Match(FOR);
				State = 477; Match(LPAREN);
				State = 478; stmt();
				State = 479; expr(0);
				State = 480; Match(SEMI);
				State = 481; expr(0);
				State = 482; Match(RPAREN);
				State = 483; stmt();
				State = 486;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 484; Match(ELSE);
					State = 485; stmt();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new TimesStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 488; expr(0);
				State = 489; Match(TIMES);
				State = 491;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 490; Match(ID);
					}
					break;
				}
				State = 493; stmt();
				}
				break;
			case 7:
				_localctx = new EachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 495; expr(0);
				State = 496; Match(DBL_POINT);
				State = 497; expr(0);
				State = 498; stmt();
				}
				break;
			case 8:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 500; Match(RETURN);
				State = 501; expr(0);
				State = 502; Match(SEMI);
				}
				break;
			case 9:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 504; Match(BREAK);
				State = 505; Match(SEMI);
				}
				break;
			case 10:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 506; stmtBlk();
				}
				break;
			case 11:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 507; expr(0);
				State = 508; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtBlkContext : ParserRuleContext {
		public ITerminalNode LCURLY() { return GetToken(MyParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(MyParser.RCURLY, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtBlkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtBlk; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtBlk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtBlkContext stmtBlk() {
		StmtBlkContext _localctx = new StmtBlkContext(Context, State);
		EnterRule(_localctx, 98, RULE_stmtBlk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512; Match(LCURLY);
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LCURLY) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EXCL) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (CONST - 99)) | (1L << (USING - 99)) | (1L << (VAR - 99)) | (1L << (FOR - 99)) | (1L << (IF - 99)) | (1L << (BREAK - 99)) | (1L << (RETURN - 99)) | (1L << (SIZEOF - 99)) | (1L << (NEW - 99)) | (1L << (DELETE - 99)) | (1L << (THROW - 99)) | (1L << (NUL - 99)) | (1L << (BOOL_LIT - 99)) | (1L << (ID - 99)) | (1L << (FLOAT_LIT - 99)) | (1L << (HEX_LIT - 99)) | (1L << (INTEGER_LIT - 99)))) != 0)) {
				{
				{
				State = 513; stmt();
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 519; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
	 
		public ClassDefContext() { }
		public virtual void CopyFrom(ClassDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassCtorDeclContext : ClassDefContext {
		public ITerminalNode CTOR() { return GetToken(MyParser.CTOR, 0); }
		public CtorDeclContext ctorDecl() {
			return GetRuleContext<CtorDeclContext>(0);
		}
		public ClassCtorDeclContext(ClassDefContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassCtorDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasContext : ClassDefContext {
		public ITerminalNode ALIAS() { return GetToken(MyParser.ALIAS, 0); }
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MyParser.ASSIGN, 0); }
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public AliasContext(ClassDefContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassExtendedDeclContext : ClassDefContext {
		public ClassExtDefContext classExtDef() {
			return GetRuleContext<ClassExtDefContext>(0);
		}
		public ClassExtendedDeclContext(ClassDefContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtendedDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessModContext : ClassDefContext {
		public ITerminalNode COLON() { return GetToken(MyParser.COLON, 0); }
		public ITerminalNode PUB() { return GetToken(MyParser.PUB, 0); }
		public ITerminalNode PRIV() { return GetToken(MyParser.PRIV, 0); }
		public ITerminalNode PROT() { return GetToken(MyParser.PROT, 0); }
		public AccessModContext(ClassDefContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StaticDeclContext : ClassDefContext {
		public ITerminalNode STATIC() { return GetToken(MyParser.STATIC, 0); }
		public ITerminalNode LCURLY() { return GetToken(MyParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(MyParser.RCURLY, 0); }
		public ClassExtDefContext[] classExtDef() {
			return GetRuleContexts<ClassExtDefContext>();
		}
		public ClassExtDefContext classExtDef(int i) {
			return GetRuleContext<ClassExtDefContext>(i);
		}
		public StaticDeclContext(ClassDefContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 100, RULE_classDef);
		int _la;
		try {
			State = 541;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUB:
			case PRIV:
			case PROT:
				_localctx = new AccessModContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 521;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (PUB - 109)) | (1L << (PRIV - 109)) | (1L << (PROT - 109)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 522; Match(COLON);
				}
				break;
			case CTOR:
				_localctx = new ClassCtorDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 523; Match(CTOR);
				State = 524; ctorDecl();
				}
				break;
			case ALIAS:
				_localctx = new AliasContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 525; Match(ALIAS);
				State = 526; Match(ID);
				State = 527; Match(ASSIGN);
				State = 528; qualType();
				State = 529; Match(SEMI);
				}
				break;
			case STATIC:
				_localctx = new StaticDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 531; Match(STATIC);
				State = 532; Match(LCURLY);
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (METH - 113)) | (1L << (PROP - 113)) | (1L << (FIELDS - 113)) | (1L << (FIELD - 113)) | (1L << (OPERATOR - 113)))) != 0)) {
					{
					{
					State = 533; classExtDef();
					}
					}
					State = 538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 539; Match(RCURLY);
				}
				break;
			case METH:
			case PROP:
			case FIELDS:
			case FIELD:
			case OPERATOR:
				_localctx = new ClassExtendedDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 540; classExtDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtDefContext : ParserRuleContext {
		public ITerminalNode FIELDS() { return GetToken(MyParser.FIELDS, 0); }
		public ITerminalNode LCURLY() { return GetToken(MyParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(MyParser.RCURLY, 0); }
		public TypedIdExprsContext[] typedIdExprs() {
			return GetRuleContexts<TypedIdExprsContext>();
		}
		public TypedIdExprsContext typedIdExprs(int i) {
			return GetRuleContext<TypedIdExprsContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(MyParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(MyParser.SEMI, i);
		}
		public ITerminalNode FIELD() { return GetToken(MyParser.FIELD, 0); }
		public ITerminalNode PROP() { return GetToken(MyParser.PROP, 0); }
		public ITerminalNode METH() { return GetToken(MyParser.METH, 0); }
		public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		public ITerminalNode OPERATOR() { return GetToken(MyParser.OPERATOR, 0); }
		public OpDeclContext opDecl() {
			return GetRuleContext<OpDeclContext>(0);
		}
		public ClassExtDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtDef; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtDefContext classExtDef() {
		ClassExtDefContext _localctx = new ClassExtDefContext(Context, State);
		EnterRule(_localctx, 102, RULE_classExtDef);
		int _la;
		try {
			State = 566;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIELDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; Match(FIELDS);
				State = 544; Match(LCURLY);
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (AUTO - 65)) | (1L << (VOID - 65)) | (1L << (BOOL - 65)) | (1L << (INT - 65)) | (1L << (UINT - 65)) | (1L << (ISIZE - 65)) | (1L << (USIZE - 65)) | (1L << (BYTE - 65)) | (1L << (CHAR - 65)) | (1L << (CODEPOINT - 65)) | (1L << (STRING - 65)) | (1L << (FLOAT - 65)) | (1L << (I64 - 65)) | (1L << (I32 - 65)) | (1L << (I16 - 65)) | (1L << (I8 - 65)) | (1L << (U64 - 65)) | (1L << (U32 - 65)) | (1L << (U16 - 65)) | (1L << (U8 - 65)) | (1L << (B64 - 65)) | (1L << (B32 - 65)) | (1L << (B16 - 65)) | (1L << (B8 - 65)) | (1L << (F80 - 65)) | (1L << (F64 - 65)) | (1L << (F32 - 65)) | (1L << (F16 - 65)) | (1L << (VOLATILE - 65)) | (1L << (STABLE - 65)) | (1L << (CONST - 65)) | (1L << (MUTABLE - 65)) | (1L << (FUNC - 65)))) != 0) || _la==ID) {
					{
					{
					State = 545; typedIdExprs();
					State = 546; Match(SEMI);
					}
					}
					State = 552;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 553; Match(RCURLY);
				}
				break;
			case FIELD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554; Match(FIELD);
				State = 555; typedIdExprs();
				State = 556; Match(SEMI);
				}
				break;
			case PROP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 558; Match(PROP);
				State = 559; typedIdExprs();
				State = 560; Match(SEMI);
				}
				break;
			case METH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 562; Match(METH);
				State = 563; funcDecl();
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 564; Match(OPERATOR);
				State = 565; opDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(MyParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(MyParser.RPAREN, 0); }
		public IdOrLitContext[] idOrLit() {
			return GetRuleContexts<IdOrLitContext>();
		}
		public IdOrLitContext idOrLit(int i) {
			return GetRuleContext<IdOrLitContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 104, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(LPAREN);
			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LIT || _la==CHAR_LIT || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (NUL - 131)) | (1L << (BOOL_LIT - 131)) | (1L << (ID - 131)) | (1L << (FLOAT_LIT - 131)) | (1L << (HEX_LIT - 131)) | (1L << (INTEGER_LIT - 131)))) != 0)) {
				{
				State = 569; idOrLit();
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 570; Match(COMMA);
					State = 571; idOrLit();
					}
					}
					State = 576;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 579; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitListContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(MyParser.COLON, 0); }
		public ITerminalNode[] ID() { return GetTokens(MyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MyParser.ID, i);
		}
		public ArgListContext[] argList() {
			return GetRuleContexts<ArgListContext>();
		}
		public ArgListContext argList(int i) {
			return GetRuleContext<ArgListContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public InitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitListContext initList() {
		InitListContext _localctx = new InitListContext(Context, State);
		EnterRule(_localctx, 106, RULE_initList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(COLON);
			State = 582; Match(ID);
			State = 583; argList();
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 584; Match(COMMA);
				State = 585; Match(ID);
				State = 586; argList();
				}
				}
				State = 591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 108, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; qualType();
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 593; Match(ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(MyParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(MyParser.RPAREN, 0); }
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 110, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; Match(LPAREN);
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (AUTO - 65)) | (1L << (VOID - 65)) | (1L << (BOOL - 65)) | (1L << (INT - 65)) | (1L << (UINT - 65)) | (1L << (ISIZE - 65)) | (1L << (USIZE - 65)) | (1L << (BYTE - 65)) | (1L << (CHAR - 65)) | (1L << (CODEPOINT - 65)) | (1L << (STRING - 65)) | (1L << (FLOAT - 65)) | (1L << (I64 - 65)) | (1L << (I32 - 65)) | (1L << (I16 - 65)) | (1L << (I8 - 65)) | (1L << (U64 - 65)) | (1L << (U32 - 65)) | (1L << (U16 - 65)) | (1L << (U8 - 65)) | (1L << (B64 - 65)) | (1L << (B32 - 65)) | (1L << (B16 - 65)) | (1L << (B8 - 65)) | (1L << (F80 - 65)) | (1L << (F64 - 65)) | (1L << (F32 - 65)) | (1L << (F16 - 65)) | (1L << (VOLATILE - 65)) | (1L << (STABLE - 65)) | (1L << (CONST - 65)) | (1L << (MUTABLE - 65)) | (1L << (FUNC - 65)))) != 0) || _la==ID) {
				{
				State = 597; param();
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 598; Match(COMMA);
					State = 599; param();
					}
					}
					State = 604;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 607; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorDeclContext : ParserRuleContext {
		public CtorDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctorDecl; } }
	 
		public CtorDeclContext() { }
		public virtual void CopyFrom(CtorDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CtorDefContext : CtorDeclContext {
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public StmtBlkContext stmtBlk() {
			return GetRuleContext<StmtBlkContext>(0);
		}
		public InitListContext initList() {
			return GetRuleContext<InitListContext>(0);
		}
		public CtorDefContext(CtorDeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtorDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtorDeclContext ctorDecl() {
		CtorDeclContext _localctx = new CtorDeclContext(Context, State);
		EnterRule(_localctx, 112, RULE_ctorDecl);
		int _la;
		try {
			_localctx = new CtorDefContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 609; @params();
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 610; initList();
				}
			}

			State = 613; stmtBlk();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
	 
		public FuncDeclContext() { }
		public virtual void CopyFrom(FuncDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncMethContext : FuncDeclContext {
		public IdTplTypeContext idTplType() {
			return GetRuleContext<IdTplTypeContext>(0);
		}
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(MyParser.RARROW, 0); }
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public StmtBlkContext stmtBlk() {
			return GetRuleContext<StmtBlkContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public FuncMethContext(FuncDeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncMeth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 114, RULE_funcDecl);
		try {
			_localctx = new FuncMethContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 615; idTplType();
				State = 616; @params();
				State = 617; Match(RARROW);
				State = 618; qualType();
				}
				break;
			case 2:
				{
				State = 620; idTplType();
				State = 621; @params();
				}
				break;
			}
			State = 630;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLY:
				{
				State = 625; stmtBlk();
				}
				break;
			case PHATRARROW:
				{
				State = 626; Match(PHATRARROW);
				State = 627; expr(0);
				State = 628; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpDeclContext : ParserRuleContext {
		public OpDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opDecl; } }
	 
		public OpDeclContext() { }
		public virtual void CopyFrom(OpDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorDeclContext : OpDeclContext {
		public ITerminalNode STRING_LIT() { return GetToken(MyParser.STRING_LIT, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode RARROW() { return GetToken(MyParser.RARROW, 0); }
		public QualTypeContext qualType() {
			return GetRuleContext<QualTypeContext>(0);
		}
		public StmtBlkContext stmtBlk() {
			return GetRuleContext<StmtBlkContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public OperatorDeclContext(OpDeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpDeclContext opDecl() {
		OpDeclContext _localctx = new OpDeclContext(Context, State);
		EnterRule(_localctx, 116, RULE_opDecl);
		try {
			_localctx = new OperatorDeclContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 632; Match(STRING_LIT);
				State = 633; @params();
				State = 634; Match(RARROW);
				State = 635; qualType();
				}
				break;
			case 2:
				{
				State = 637; Match(STRING_LIT);
				State = 638; @params();
				}
				break;
			}
			State = 646;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLY:
				{
				State = 641; stmtBlk();
				}
				break;
			case PHATRARROW:
				{
				State = 642; Match(PHATRARROW);
				State = 643; expr(0);
				State = 644; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelContext : ParserRuleContext {
		public TopLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevel; } }
	 
		public TopLevelContext() { }
		public virtual void CopyFrom(TopLevelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RestContext : TopLevelContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public RestContext(TopLevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclContext : TopLevelContext {
		public ITerminalNode CLASS() { return GetToken(MyParser.CLASS, 0); }
		public IdTplTypeContext idTplType() {
			return GetRuleContext<IdTplTypeContext>(0);
		}
		public ITerminalNode LCURLY() { return GetToken(MyParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(MyParser.RCURLY, 0); }
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public ClassDeclContext(TopLevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AttributesContext : TopLevelContext {
		public AttribBlkContext attribBlk() {
			return GetRuleContext<AttribBlkContext>(0);
		}
		public AttributesContext(TopLevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionDeclContext : TopLevelContext {
		public ITerminalNode UNION() { return GetToken(MyParser.UNION, 0); }
		public IdTplTypeContext idTplType() {
			return GetRuleContext<IdTplTypeContext>(0);
		}
		public ITerminalNode LCURLY() { return GetToken(MyParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(MyParser.RCURLY, 0); }
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public UnionDeclContext(TopLevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructDeclContext : TopLevelContext {
		public ITerminalNode STRUCT() { return GetToken(MyParser.STRUCT, 0); }
		public IdTplTypeContext idTplType() {
			return GetRuleContext<IdTplTypeContext>(0);
		}
		public ITerminalNode LCURLY() { return GetToken(MyParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(MyParser.RCURLY, 0); }
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public StructDeclContext(TopLevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnumDeclContext : TopLevelContext {
		public ITerminalNode ENUM() { return GetToken(MyParser.ENUM, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LCURLY() { return GetToken(MyParser.LCURLY, 0); }
		public IdExprContext[] idExpr() {
			return GetRuleContexts<IdExprContext>();
		}
		public IdExprContext idExpr(int i) {
			return GetRuleContext<IdExprContext>(i);
		}
		public ITerminalNode RCURLY() { return GetToken(MyParser.RCURLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public EnumDeclContext(TopLevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceContext : TopLevelContext {
		public ITerminalNode NS() { return GetToken(MyParser.NS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public ITerminalNode[] SCOPE() { return GetTokens(MyParser.SCOPE); }
		public ITerminalNode SCOPE(int i) {
			return GetToken(MyParser.SCOPE, i);
		}
		public ITerminalNode LCURLY() { return GetToken(MyParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(MyParser.RCURLY, 0); }
		public TopLevelContext[] topLevel() {
			return GetRuleContexts<TopLevelContext>();
		}
		public TopLevelContext topLevel(int i) {
			return GetRuleContext<TopLevelContext>(i);
		}
		public NamespaceContext(TopLevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclContext : TopLevelContext {
		public ITerminalNode FUNC() { return GetToken(MyParser.FUNC, 0); }
		public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		public FunctionDeclContext(TopLevelContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelContext topLevel() {
		TopLevelContext _localctx = new TopLevelContext(Context, State);
		EnterRule(_localctx, 118, RULE_topLevel);
		int _la;
		try {
			int _alt;
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				_localctx = new AttributesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 648; attribBlk();
				}
				break;
			case 2:
				_localctx = new NamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 649; Match(NS);
				State = 650; id();
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SCOPE) {
					{
					{
					State = 651; Match(SCOPE);
					State = 652; id();
					}
					}
					State = 657;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 658; Match(SEMI);
				}
				break;
			case 3:
				_localctx = new NamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 660; Match(NS);
				State = 661; id();
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SCOPE) {
					{
					{
					State = 662; Match(SCOPE);
					State = 663; id();
					}
					}
					State = 668;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 669; Match(LCURLY);
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 670; topLevel();
					}
					}
					State = 673;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EXCL) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (NS - 96)) | (1L << (UNION - 96)) | (1L << (STRUCT - 96)) | (1L << (CLASS - 96)) | (1L << (FUNC - 96)) | (1L << (ENUM - 96)) | (1L << (SIZEOF - 96)) | (1L << (NEW - 96)) | (1L << (DELETE - 96)) | (1L << (THROW - 96)) | (1L << (NUL - 96)) | (1L << (BOOL_LIT - 96)) | (1L << (ID - 96)) | (1L << (FLOAT_LIT - 96)) | (1L << (HEX_LIT - 96)) | (1L << (INTEGER_LIT - 96)))) != 0) );
				State = 675; Match(RCURLY);
				}
				break;
			case 4:
				_localctx = new ClassDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 677; Match(CLASS);
				State = 678; idTplType();
				State = 679; Match(LCURLY);
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (STATIC - 101)) | (1L << (ALIAS - 101)) | (1L << (CTOR - 101)) | (1L << (PUB - 101)) | (1L << (PRIV - 101)) | (1L << (PROT - 101)) | (1L << (METH - 101)) | (1L << (PROP - 101)) | (1L << (FIELDS - 101)) | (1L << (FIELD - 101)) | (1L << (OPERATOR - 101)))) != 0)) {
					{
					{
					State = 680; classDef();
					}
					}
					State = 685;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 686; Match(RCURLY);
				}
				break;
			case 5:
				_localctx = new StructDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 688; Match(STRUCT);
				State = 689; idTplType();
				State = 690; Match(LCURLY);
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (STATIC - 101)) | (1L << (ALIAS - 101)) | (1L << (CTOR - 101)) | (1L << (PUB - 101)) | (1L << (PRIV - 101)) | (1L << (PROT - 101)) | (1L << (METH - 101)) | (1L << (PROP - 101)) | (1L << (FIELDS - 101)) | (1L << (FIELD - 101)) | (1L << (OPERATOR - 101)))) != 0)) {
					{
					{
					State = 691; classDef();
					}
					}
					State = 696;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 697; Match(RCURLY);
				}
				break;
			case 6:
				_localctx = new UnionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 699; Match(UNION);
				State = 700; idTplType();
				State = 701; Match(LCURLY);
				State = 705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (STATIC - 101)) | (1L << (ALIAS - 101)) | (1L << (CTOR - 101)) | (1L << (PUB - 101)) | (1L << (PRIV - 101)) | (1L << (PROT - 101)) | (1L << (METH - 101)) | (1L << (PROP - 101)) | (1L << (FIELDS - 101)) | (1L << (FIELD - 101)) | (1L << (OPERATOR - 101)))) != 0)) {
					{
					{
					State = 702; classDef();
					}
					}
					State = 707;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 708; Match(RCURLY);
				}
				break;
			case 7:
				_localctx = new EnumDeclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 710; Match(ENUM);
				State = 711; id();
				State = 712; Match(LCURLY);
				State = 713; idExpr();
				State = 718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 714; Match(COMMA);
						State = 715; idExpr();
						}
						} 
					}
					State = 720;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
				}
				State = 722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 721; Match(COMMA);
					}
				}

				State = 724; Match(RCURLY);
				}
				break;
			case 8:
				_localctx = new FunctionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 726; Match(FUNC);
				State = 727; funcDecl();
				}
				break;
			case 9:
				_localctx = new RestContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 728; expr(0);
				State = 729; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		public TopLevelContext[] topLevel() {
			return GetRuleContexts<TopLevelContext>();
		}
		public TopLevelContext topLevel(int i) {
			return GetRuleContext<TopLevelContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 120, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 733; topLevel();
				}
				}
				State = 736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LIT) | (1L << CHAR_LIT) | (1L << DBL_PLUS) | (1L << DBL_MINUS) | (1L << AUTOINDEX) | (1L << LBRACK) | (1L << LPAREN) | (1L << AMP) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << EXCL) | (1L << TILDE) | (1L << USCORE))) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (NS - 96)) | (1L << (UNION - 96)) | (1L << (STRUCT - 96)) | (1L << (CLASS - 96)) | (1L << (FUNC - 96)) | (1L << (ENUM - 96)) | (1L << (SIZEOF - 96)) | (1L << (NEW - 96)) | (1L << (DELETE - 96)) | (1L << (THROW - 96)) | (1L << (NUL - 96)) | (1L << (BOOL_LIT - 96)) | (1L << (ID - 96)) | (1L << (FLOAT_LIT - 96)) | (1L << (HEX_LIT - 96)) | (1L << (INTEGER_LIT - 96)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 41: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 21);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 20);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x8C', '\x2E5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x8D', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\xB8', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\a', '\x1C', '\xBD', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\xC0', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\xC6', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\xCA', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\a', '\x1E', '\xCF', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', 
		'\xD2', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\xD6', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\xDB', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\xE1', '\n', ' ', '\x3', ' ', '\a', ' ', '\xE4', '\n', ' ', 
		'\f', ' ', '\xE', ' ', '\xE7', '\v', ' ', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\xEB', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\a', '\"', '\xF1', '\n', '\"', '\f', '\"', '\xE', '\"', '\xF4', 
		'\v', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\xFA', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x109', '\n', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x10F', '\n', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x114', '\n', '(', 
		'\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x5', ')', '\x11A', '\n', 
		')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\a', 
		'*', '\x121', '\n', '*', '\f', '*', '\xE', '*', '\x124', '\v', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', 
		'+', '\x12C', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x139', '\n', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x174', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x17C', '\n', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x5', '+', '\x181', '\n', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x187', '\n', '+', '\a', 
		'+', '\x189', '\n', '+', '\f', '+', '\xE', '+', '\x18C', '\v', '+', '\x3', 
		',', '\x3', ',', '\x3', ',', '\a', ',', '\x191', '\n', ',', '\f', ',', 
		'\xE', ',', '\x194', '\v', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x19D', '\n', '.', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x1A3', '\n', 
		'/', '\f', '/', '\xE', '/', '\x1A6', '\v', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\a', '\x30', '\x1AF', '\n', '\x30', '\f', '\x30', '\xE', '\x30', 
		'\x1B2', '\v', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x1B6', 
		'\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\a', '\x31', '\x1BC', '\n', '\x31', '\f', '\x31', '\xE', '\x31', '\x1BF', 
		'\v', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x1C7', '\n', '\x32', '\f', 
		'\x32', '\xE', '\x32', '\x1CA', '\v', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x1DD', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x1E9', '\n', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x1EE', '\n', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x201', '\n', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x205', '\n', '\x33', '\f', 
		'\x33', '\xE', '\x33', '\x208', '\v', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x219', '\n', 
		'\x34', '\f', '\x34', '\xE', '\x34', '\x21C', '\v', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x5', '\x34', '\x220', '\n', '\x34', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x227', 
		'\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x22A', '\v', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x239', '\n', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', 
		'\x23F', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x242', '\v', '\x36', 
		'\x5', '\x36', '\x244', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\a', '\x37', '\x24E', '\n', '\x37', '\f', '\x37', '\xE', '\x37', 
		'\x251', '\v', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x255', 
		'\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\a', '\x39', '\x25B', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x25E', 
		'\v', '\x39', '\x5', '\x39', '\x260', '\n', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', ':', '\x3', ':', '\x5', ':', '\x266', '\n', ':', '\x3', 
		':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x272', '\n', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', 
		'\x279', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x5', '<', '\x282', '\n', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x289', '\n', 
		'<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\a', 
		'=', '\x290', '\n', '=', '\f', '=', '\xE', '=', '\x293', '\v', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\a', 
		'=', '\x29B', '\n', '=', '\f', '=', '\xE', '=', '\x29E', '\v', '=', '\x3', 
		'=', '\x3', '=', '\x6', '=', '\x2A2', '\n', '=', '\r', '=', '\xE', '=', 
		'\x2A3', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\a', '=', '\x2AC', '\n', '=', '\f', '=', '\xE', '=', '\x2AF', '\v', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\a', '=', '\x2B7', '\n', '=', '\f', '=', '\xE', '=', '\x2BA', '\v', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\a', '=', '\x2C2', '\n', '=', '\f', '=', '\xE', '=', '\x2C5', '\v', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\a', '=', '\x2CF', '\n', '=', '\f', '=', 
		'\xE', '=', '\x2D2', '\v', '=', '\x3', '=', '\x5', '=', '\x2D5', '\n', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x5', '=', '\x2DE', '\n', '=', '\x3', '>', '\x6', '>', 
		'\x2E1', '\n', '>', '\r', '>', '\xE', '>', '\x2E2', '\x3', '>', '\x2', 
		'\x3', 'T', '?', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '\x2', '\x15', '\x3', '\x2', '\xE', 
		'\xF', '\x6', '\x2', '\xE', '\xF', ' ', '!', '$', '%', '*', '+', '\x3', 
		'\x2', '\x37', '\x42', '\x3', '\x2', '!', '#', '\x3', '\x2', '$', '%', 
		'\x4', '\x2', '\x10', '\x10', ')', ')', '\x3', '\x2', '\x6', '\a', '\x3', 
		'\x2', '\x33', '\x36', '\x3', '\x2', '\x31', '\x32', '\x5', '\x2', '\x18', 
		'\x18', '\x30', '\x30', '\x87', '\x87', '\x4', '\x2', '\x4', '\x5', '\x85', 
		'\x8A', '\x3', '\x2', 'K', 'M', '\x4', '\x2', 'O', 'O', '^', '\x61', '\x4', 
		'\x2', 'J', 'J', 'Z', ']', '\x4', '\x2', '\x46', 'I', 'R', 'Y', '\x3', 
		'\x2', '\x63', '\x66', '\x6', '\x2', '\b', '\b', '\r', '\r', '\x14', '\x16', 
		' ', '!', '\x4', '\x2', '\x17', '\x17', '\x19', '\x19', '\x3', '\x2', 
		'o', 'q', '\x2', '\x319', '\x2', '|', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x6', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x82', '\x3', '\x2', '\x2', '\x2', '\n', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x87', '\x3', '\x2', '\x2', '\x2', '\xE', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x90', '\x3', '\x2', '\x2', '\x2', '\x14', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x94', '\x3', '\x2', '\x2', '\x2', '\x18', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x9E', '\x3', '\x2', '\x2', '\x2', '\"', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xA2', '\x3', '\x2', '\x2', '\x2', '&', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xA6', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', ',', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '.', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x30', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x36', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\xC9', '\x3', '\x2', '\x2', '\x2', ':', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '<', '\xD3', '\x3', '\x2', '\x2', '\x2', '>', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '@', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\x44', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\xFB', '\x3', '\x2', '\x2', '\x2', 'H', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', 'J', '\x103', '\x3', '\x2', '\x2', '\x2', 'L', '\x106', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x119', '\x3', '\x2', '\x2', '\x2', 'R', '\x11D', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x138', '\x3', '\x2', '\x2', '\x2', 'V', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x199', '\x3', '\x2', '\x2', '\x2', '\\', '\x19E', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x1A7', '\x3', '\x2', '\x2', '\x2', '`', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x202', '\x3', '\x2', '\x2', '\x2', '\x66', '\x21F', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x238', '\x3', '\x2', '\x2', '\x2', 'j', '\x23A', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x252', '\x3', '\x2', '\x2', '\x2', 'p', '\x256', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x263', '\x3', '\x2', '\x2', '\x2', 't', '\x271', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x281', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x2DD', '\x3', '\x2', '\x2', '\x2', 'z', '\x2E0', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\t', '\x2', '\x2', '\x2', '}', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\t', '\x3', '\x2', '\x2', '\x7F', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\t', '\x4', '\x2', '\x2', 
		'\x81', '\a', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '!', '\x2', 
		'\x2', '\x83', '\x84', '\a', '!', '\x2', '\x2', '\x84', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\t', '\x5', '\x2', '\x2', '\x86', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\t', '\x6', '\x2', '\x2', 
		'\x88', '\r', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8D', '\a', '\x12', 
		'\x2', '\x2', '\x8A', '\x8B', '\a', '\x36', '\x2', '\x2', '\x8B', '\x8D', 
		'\a', '\x36', '\x2', '\x2', '\x8C', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\a', ' ', '\x2', '\x2', '\x8F', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '/', '\x2', '\x2', '\x91', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '-', '\x2', 
		'\x2', '\x93', '\x15', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\r', '\x2', '\x2', '\x95', '\x17', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\a', ',', '\x2', '\x2', '\x97', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x99', '\t', '\a', '\x2', '\x2', '\x99', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\t', '\b', '\x2', '\x2', '\x9B', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\t', '\t', '\x2', 
		'\x2', '\x9D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\t', 
		'\n', '\x2', '\x2', '\x9F', '!', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\a', '\x3', '\x2', '\x2', '\xA1', '#', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', '\x87', '\x2', '\x2', '\xA3', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\t', '\v', '\x2', '\x2', '\xA5', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\t', '\f', '\x2', '\x2', '\xA7', 
		')', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\t', '\r', '\x2', '\x2', 
		'\xA9', '+', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\t', '\xE', 
		'\x2', '\x2', '\xAB', '-', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\t', '\xF', '\x2', '\x2', '\xAD', '/', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\t', '\x10', '\x2', '\x2', '\xAF', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB8', '\a', '\x43', '\x2', '\x2', '\xB1', '\xB8', '\a', 
		'\x44', '\x2', '\x2', '\xB2', '\xB8', '\a', '\x45', '\x2', '\x2', '\xB3', 
		'\xB8', '\x5', '*', '\x16', '\x2', '\xB4', '\xB8', '\x5', ',', '\x17', 
		'\x2', '\xB5', '\xB8', '\x5', '.', '\x18', '\x2', '\xB6', '\xB8', '\x5', 
		'\x30', '\x19', '\x2', '\xB7', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\t', '\x11', '\x2', '\x2', '\xBA', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBD', '\x5', '\x34', '\x1B', '\x2', '\xBC', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\x37', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\t', '\x12', '\x2', 
		'\x2', '\xC2', '\xCA', '\x5', '\x36', '\x1C', '\x2', '\xC3', '\xC5', '\t', 
		'\x13', '\x2', '\x2', '\xC4', '\xC6', '\x5', 'T', '+', '\x2', '\xC5', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', 
		'\x1A', '\x2', '\x2', '\xC8', '\xCA', '\x5', '\x36', '\x1C', '\x2', '\xC9', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\x39', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xD0', '\x5', 
		'\x44', '#', '\x2', '\xCC', '\xCD', '\a', '\x13', '\x2', '\x2', '\xCD', 
		'\xCF', '\x5', '\x44', '#', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		';', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD5', '\a', 'r', '\x2', '\x2', '\xD4', '\xD6', '\x5', 
		'\x42', '\"', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xDA', '\x5', 'p', '\x39', '\x2', '\xD8', '\xD9', '\a', 
		'\x10', '\x2', '\x2', '\xD9', '\xDB', '\x5', '>', ' ', '\x2', '\xDA', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '=', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE0', '\x5', 
		'\x36', '\x1C', '\x2', '\xDD', '\xE1', '\x5', '\x32', '\x1A', '\x2', '\xDE', 
		'\xE1', '\x5', '<', '\x1F', '\x2', '\xDF', '\xE1', '\x5', ':', '\x1E', 
		'\x2', '\xE0', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', '\x38', '\x1D', 
		'\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '?', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x5', 
		'>', ' ', '\x2', '\xE9', '\xEB', '\a', '\x8A', '\x2', '\x2', '\xEA', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\x41', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\x35', 
		'\x2', '\x2', '\xED', '\xF2', '\x5', '@', '!', '\x2', '\xEE', '\xEF', 
		'\a', '(', '\x2', '\x2', '\xEF', '\xF1', '\x5', '@', '!', '\x2', '\xF0', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\a', '\x36', '\x2', 
		'\x2', '\xF6', '\x43', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', '\x5', 
		'$', '\x13', '\x2', '\xF8', '\xFA', '\x5', '\x42', '\"', '\x2', '\xF9', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\x45', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x5', 
		'\x4', '\x3', '\x2', '\xFC', '\xFD', '\x5', 'T', '+', '\x2', '\xFD', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '\x1D', '\x2', '\x2', 
		'\xFF', '\x100', '\x5', '>', ' ', '\x2', '\x100', '\x101', '\a', '\x1E', 
		'\x2', '\x2', '\x101', '\x102', '\x5', 'T', '+', '\x2', '\x102', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\a', '\x81', '\x2', '\x2', 
		'\x104', '\x105', '\x5', 'T', '+', '\x2', '\x105', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\x108', '\a', '\x82', '\x2', '\x2', '\x107', '\x109', 
		'\x5', '>', ' ', '\x2', '\x108', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10B', '\a', '\x1D', '\x2', '\x2', '\x10B', 
		'\x10C', '\x5', 'V', ',', '\x2', '\x10C', '\x10D', '\a', '\x1E', '\x2', 
		'\x2', '\x10D', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', 'M', '\x3', '\x2', '\x2', '\x2', '\x110', '\x113', '\a', '\x83', 
		'\x2', '\x2', '\x111', '\x112', '\a', '\x19', '\x2', '\x2', '\x112', '\x114', 
		'\a', '\x1A', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x116', '\x5', 'T', '+', '\x2', '\x116', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', '\x87', '\x2', 
		'\x2', '\x118', '\x11A', '\a', '\'', '\x2', '\x2', '\x119', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', 'T', '+', 
		'\x2', '\x11C', 'Q', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x122', '\x5', 
		'P', ')', '\x2', '\x11E', '\x11F', '\a', '(', '\x2', '\x2', '\x11F', '\x121', 
		'\x5', 'P', ')', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x124', '\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x124', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x12B', '\b', '+', '\x1', '\x2', '\x126', '\x12C', '\x5', 
		'\x46', '$', '\x2', '\x127', '\x12C', '\x5', 'H', '%', '\x2', '\x128', 
		'\x12C', '\x5', 'J', '&', '\x2', '\x129', '\x12C', '\x5', 'L', '\'', '\x2', 
		'\x12A', '\x12C', '\x5', 'N', '(', '\x2', '\x12B', '\x126', '\x3', '\x2', 
		'\x2', '\x2', '\x12B', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '\x84', '\x2', '\x2', '\x12E', 
		'\x139', '\x5', 'T', '+', '\a', '\x12F', '\x130', '\x5', '&', '\x14', 
		'\x2', '\x130', '\x131', '\x5', 'X', '-', '\x2', '\x131', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x139', '\x5', '(', '\x15', '\x2', '\x133', 
		'\x134', '\a', '\x1D', '\x2', '\x2', '\x134', '\x135', '\x5', 'T', '+', 
		'\x2', '\x135', '\x136', '\a', '\x1E', '\x2', '\x2', '\x136', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x139', '\a', '\x18', '\x2', '\x2', 
		'\x138', '\x125', '\x3', '\x2', '\x2', '\x2', '\x138', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x138', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\f', '\x17', '\x2', '\x2', 
		'\x13B', '\x13C', '\a', '\x13', '\x2', '\x2', '\x13C', '\x189', '\x5', 
		'T', '+', '\x18', '\x13D', '\x13E', '\f', '\x14', '\x2', '\x2', '\x13E', 
		'\x13F', '\x5', '\x1C', '\xF', '\x2', '\x13F', '\x140', '\x5', 'T', '+', 
		'\x15', '\x140', '\x189', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', 
		'\f', '\x13', '\x2', '\x2', '\x142', '\x143', '\x5', '\b', '\x5', '\x2', 
		'\x143', '\x144', '\x5', 'T', '+', '\x14', '\x144', '\x189', '\x3', '\x2', 
		'\x2', '\x2', '\x145', '\x146', '\f', '\x12', '\x2', '\x2', '\x146', '\x147', 
		'\x5', '\n', '\x6', '\x2', '\x147', '\x148', '\x5', 'T', '+', '\x13', 
		'\x148', '\x189', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\f', 
		'\x11', '\x2', '\x2', '\x14A', '\x14B', '\x5', '\f', '\a', '\x2', '\x14B', 
		'\x14C', '\x5', 'T', '+', '\x12', '\x14C', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14E', '\f', '\x10', '\x2', '\x2', '\x14E', '\x14F', 
		'\x5', '\xE', '\b', '\x2', '\x14F', '\x150', '\x5', 'T', '+', '\x11', 
		'\x150', '\x189', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\f', 
		'\xF', '\x2', '\x2', '\x152', '\x153', '\x5', '\x1E', '\x10', '\x2', '\x153', 
		'\x154', '\x5', 'T', '+', '\x10', '\x154', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x156', '\f', '\xE', '\x2', '\x2', '\x156', '\x157', 
		'\x5', ' ', '\x11', '\x2', '\x157', '\x158', '\x5', 'T', '+', '\xF', '\x158', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\f', '\r', '\x2', 
		'\x2', '\x15A', '\x15B', '\x5', '\x10', '\t', '\x2', '\x15B', '\x15C', 
		'\x5', 'T', '+', '\xE', '\x15C', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15E', '\f', '\f', '\x2', '\x2', '\x15E', '\x15F', '\x5', '\x12', 
		'\n', '\x2', '\x15F', '\x160', '\x5', 'T', '+', '\r', '\x160', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\f', '\v', '\x2', '\x2', 
		'\x162', '\x163', '\x5', '\x14', '\v', '\x2', '\x163', '\x164', '\x5', 
		'T', '+', '\f', '\x164', '\x189', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x166', '\f', '\n', '\x2', '\x2', '\x166', '\x167', '\x5', '\x16', '\f', 
		'\x2', '\x167', '\x168', '\x5', 'T', '+', '\v', '\x168', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x16A', '\f', '\t', '\x2', '\x2', '\x16A', 
		'\x16B', '\x5', '\x18', '\r', '\x2', '\x16B', '\x16C', '\x5', 'T', '+', 
		'\n', '\x16C', '\x189', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x173', 
		'\f', '\b', '\x2', '\x2', '\x16E', '\x174', '\x5', '\x6', '\x4', '\x2', 
		'\x16F', '\x170', '\a', '.', '\x2', '\x2', '\x170', '\x171', '\x5', 'T', 
		'+', '\x2', '\x171', '\x172', '\a', '\'', '\x2', '\x2', '\x172', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x175', '\x176', '\x5', 'T', '+', '\b', '\x176', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x177', '\x186', '\f', '\x16', '\x2', 
		'\x2', '\x178', '\x187', '\x5', '\x2', '\x2', '\x2', '\x179', '\x17B', 
		'\a', '\x1D', '\x2', '\x2', '\x17A', '\x17C', '\x5', 'R', '*', '\x2', 
		'\x17B', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x187', '\a', '\x1E', '\x2', '\x2', '\x17E', '\x180', '\a', '\x19', '\x2', 
		'\x2', '\x17F', '\x181', '\x5', 'R', '*', '\x2', '\x180', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x181', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '\x187', '\a', '\x1A', '\x2', 
		'\x2', '\x183', '\x184', '\x5', '\x1A', '\xE', '\x2', '\x184', '\x185', 
		'\a', '\x87', '\x2', '\x2', '\x185', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x178', '\x3', '\x2', '\x2', '\x2', '\x186', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x187', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x188', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x188', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x145', '\x3', '\x2', '\x2', '\x2', '\x188', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x188', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x159', '\x3', '\x2', '\x2', '\x2', '\x188', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x188', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x165', '\x3', '\x2', '\x2', '\x2', '\x188', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x192', '\x5', 
		'T', '+', '\x2', '\x18E', '\x18F', '\a', '(', '\x2', '\x2', '\x18F', '\x191', 
		'\x5', 'T', '+', '\x2', '\x190', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x194', '\x3', '\x2', '\x2', '\x2', '\x192', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\x193', '\x3', '\x2', '\x2', '\x2', '\x193', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x194', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x195', '\x196', '\a', '\x35', '\x2', '\x2', '\x196', '\x197', 
		'\x5', 'V', ',', '\x2', '\x197', '\x198', '\a', '\x36', '\x2', '\x2', 
		'\x198', 'Y', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19C', '\x5', '$', 
		'\x13', '\x2', '\x19A', '\x19B', '\a', '\x37', '\x2', '\x2', '\x19B', 
		'\x19D', '\x5', 'T', '+', '\x2', '\x19C', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19F', '\x5', '>', ' ', '\x2', '\x19F', 
		'\x1A4', '\x5', 'Z', '.', '\x2', '\x1A0', '\x1A1', '\a', '(', '\x2', '\x2', 
		'\x1A1', '\x1A3', '\x5', 'Z', '.', '\x2', '\x1A2', '\x1A0', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', ']', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', 
		'\x2', '\x2', '\x1A7', '\x1B5', '\a', '\x87', '\x2', '\x2', '\x1A8', '\x1A9', 
		'\a', '\x37', '\x2', '\x2', '\x1A9', '\x1B6', '\x5', '(', '\x15', '\x2', 
		'\x1AA', '\x1AB', '\a', '\x1D', '\x2', '\x2', '\x1AB', '\x1B0', '\x5', 
		'(', '\x15', '\x2', '\x1AC', '\x1AD', '\a', '(', '\x2', '\x2', '\x1AD', 
		'\x1AF', '\x5', '(', '\x15', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '\x1E', '\x2', '\x2', '\x1B4', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x1B7', '\x1B8', '\a', '\x19', '\x2', '\x2', '\x1B8', '\x1BD', '\x5', 
		'^', '\x30', '\x2', '\x1B9', '\x1BA', '\a', '(', '\x2', '\x2', '\x1BA', 
		'\x1BC', '\x5', '^', '\x30', '\x2', '\x1BB', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\x1A', '\x2', '\x2', '\x1C1', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\a', 'h', '\x2', 
		'\x2', '\x1C3', '\x1C8', '\x5', ':', '\x1E', '\x2', '\x1C4', '\x1C5', 
		'\a', '(', '\x2', '\x2', '\x1C5', '\x1C7', '\x5', ':', '\x1E', '\x2', 
		'\x1C6', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1CA', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', 
		'\a', '&', '\x2', '\x2', '\x1CC', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1CE', '\a', 'y', '\x2', '\x2', '\x1CE', '\x1CF', '\x5', '\\', 
		'/', '\x2', '\x1CF', '\x1D0', '\a', '&', '\x2', '\x2', '\x1D0', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\a', '\x65', '\x2', '\x2', 
		'\x1D2', '\x1D3', '\x5', '\\', '/', '\x2', '\x1D3', '\x1D4', '\a', '&', 
		'\x2', '\x2', '\x1D4', '\x201', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', 
		'\a', '}', '\x2', '\x2', '\x1D6', '\x1D7', '\a', '\x1D', '\x2', '\x2', 
		'\x1D7', '\x1D8', '\x5', 'T', '+', '\x2', '\x1D8', '\x1D9', '\a', '\x1E', 
		'\x2', '\x2', '\x1D9', '\x1DC', '\x5', '\x62', '\x32', '\x2', '\x1DA', 
		'\x1DB', '\a', '~', '\x2', '\x2', '\x1DB', '\x1DD', '\x5', '\x62', '\x32', 
		'\x2', '\x1DC', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1DF', '\a', '{', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x1D', 
		'\x2', '\x2', '\x1E0', '\x1E1', '\x5', '\x62', '\x32', '\x2', '\x1E1', 
		'\x1E2', '\x5', 'T', '+', '\x2', '\x1E2', '\x1E3', '\a', '&', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\x5', 'T', '+', '\x2', '\x1E4', '\x1E5', '\a', '\x1E', 
		'\x2', '\x2', '\x1E5', '\x1E8', '\x5', '\x62', '\x32', '\x2', '\x1E6', 
		'\x1E7', '\a', '~', '\x2', '\x2', '\x1E7', '\x1E9', '\x5', '\x62', '\x32', 
		'\x2', '\x1E8', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1EB', '\x5', 'T', '+', '\x2', '\x1EB', '\x1ED', '\a', '|', 
		'\x2', '\x2', '\x1EC', '\x1EE', '\a', '\x87', '\x2', '\x2', '\x1ED', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x5', 
		'\x62', '\x32', '\x2', '\x1F0', '\x201', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1F2', '\x5', 'T', '+', '\x2', '\x1F2', '\x1F3', '\a', '\n', '\x2', 
		'\x2', '\x1F3', '\x1F4', '\x5', 'T', '+', '\x2', '\x1F4', '\x1F5', '\x5', 
		'\x62', '\x32', '\x2', '\x1F5', '\x201', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1F7', '\a', '\x80', '\x2', '\x2', '\x1F7', '\x1F8', '\x5', 'T', '+', 
		'\x2', '\x1F8', '\x1F9', '\a', '&', '\x2', '\x2', '\x1F9', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\a', '\x7F', '\x2', '\x2', '\x1FB', 
		'\x201', '\a', '&', '\x2', '\x2', '\x1FC', '\x201', '\x5', '\x64', '\x33', 
		'\x2', '\x1FD', '\x1FE', '\x5', 'T', '+', '\x2', '\x1FE', '\x1FF', '\a', 
		'&', '\x2', '\x2', '\x1FF', '\x201', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1CD', '\x3', '\x2', '\x2', 
		'\x2', '\x200', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\x200', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x200', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x201', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x206', '\a', '\x1B', '\x2', '\x2', 
		'\x203', '\x205', '\x5', '\x62', '\x32', '\x2', '\x204', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x208', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x204', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x207', '\x209', '\x3', '\x2', '\x2', '\x2', '\x208', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\a', '\x1C', '\x2', '\x2', 
		'\x20A', '\x65', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\t', '\x14', 
		'\x2', '\x2', '\x20C', '\x220', '\a', '\'', '\x2', '\x2', '\x20D', '\x20E', 
		'\a', 'm', '\x2', '\x2', '\x20E', '\x220', '\x5', 'r', ':', '\x2', '\x20F', 
		'\x210', '\a', 'i', '\x2', '\x2', '\x210', '\x211', '\a', '\x87', '\x2', 
		'\x2', '\x211', '\x212', '\a', '\x37', '\x2', '\x2', '\x212', '\x213', 
		'\x5', '>', ' ', '\x2', '\x213', '\x214', '\a', '&', '\x2', '\x2', '\x214', 
		'\x220', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\a', 'g', '\x2', 
		'\x2', '\x216', '\x21A', '\a', '\x1B', '\x2', '\x2', '\x217', '\x219', 
		'\x5', 'h', '\x35', '\x2', '\x218', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x219', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x218', '\x3', 
		'\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21A', '\x3', '\x2', '\x2', 
		'\x2', '\x21D', '\x220', '\a', '\x1C', '\x2', '\x2', '\x21E', '\x220', 
		'\x5', 'h', '\x35', '\x2', '\x21F', '\x20B', '\x3', '\x2', '\x2', '\x2', 
		'\x21F', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x20F', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', '\x215', '\x3', '\x2', '\x2', '\x2', '\x21F', 
		'\x21E', '\x3', '\x2', '\x2', '\x2', '\x220', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x222', '\a', 'v', '\x2', '\x2', '\x222', '\x228', '\a', 
		'\x1B', '\x2', '\x2', '\x223', '\x224', '\x5', '\\', '/', '\x2', '\x224', 
		'\x225', '\a', '&', '\x2', '\x2', '\x225', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x226', '\x223', '\x3', '\x2', '\x2', '\x2', '\x227', '\x22A', 
		'\x3', '\x2', '\x2', '\x2', '\x228', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x229', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22B', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x228', '\x3', '\x2', '\x2', '\x2', '\x22B', 
		'\x239', '\a', '\x1C', '\x2', '\x2', '\x22C', '\x22D', '\a', 'w', '\x2', 
		'\x2', '\x22D', '\x22E', '\x5', '\\', '/', '\x2', '\x22E', '\x22F', '\a', 
		'&', '\x2', '\x2', '\x22F', '\x239', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x231', '\a', 'u', '\x2', '\x2', '\x231', '\x232', '\x5', '\\', '/', 
		'\x2', '\x232', '\x233', '\a', '&', '\x2', '\x2', '\x233', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\x235', '\a', 's', '\x2', '\x2', '\x235', 
		'\x239', '\x5', 't', ';', '\x2', '\x236', '\x237', '\a', 'x', '\x2', '\x2', 
		'\x237', '\x239', '\x5', 'v', '<', '\x2', '\x238', '\x221', '\x3', '\x2', 
		'\x2', '\x2', '\x238', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x238', '\x230', 
		'\x3', '\x2', '\x2', '\x2', '\x238', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x238', '\x236', '\x3', '\x2', '\x2', '\x2', '\x239', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x23A', '\x243', '\a', '\x1D', '\x2', '\x2', '\x23B', '\x240', 
		'\x5', '(', '\x15', '\x2', '\x23C', '\x23D', '\a', '(', '\x2', '\x2', 
		'\x23D', '\x23F', '\x5', '(', '\x15', '\x2', '\x23E', '\x23C', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x242', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\x3', '\x2', '\x2', 
		'\x2', '\x241', '\x244', '\x3', '\x2', '\x2', '\x2', '\x242', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '\x243', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'\x243', '\x244', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245', '\x3', 
		'\x2', '\x2', '\x2', '\x245', '\x246', '\a', '\x1E', '\x2', '\x2', '\x246', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x247', '\x248', '\a', '\'', '\x2', 
		'\x2', '\x248', '\x249', '\a', '\x87', '\x2', '\x2', '\x249', '\x24F', 
		'\x5', 'j', '\x36', '\x2', '\x24A', '\x24B', '\a', '(', '\x2', '\x2', 
		'\x24B', '\x24C', '\a', '\x87', '\x2', '\x2', '\x24C', '\x24E', '\x5', 
		'j', '\x36', '\x2', '\x24D', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\x24F', '\x250', '\x3', '\x2', '\x2', '\x2', '\x250', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x251', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x254', '\x5', '>', ' ', '\x2', '\x253', '\x255', '\a', '\x87', '\x2', 
		'\x2', '\x254', '\x253', '\x3', '\x2', '\x2', '\x2', '\x254', '\x255', 
		'\x3', '\x2', '\x2', '\x2', '\x255', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x256', '\x25F', '\a', '\x1D', '\x2', '\x2', '\x257', '\x25C', '\x5', 
		'n', '\x38', '\x2', '\x258', '\x259', '\a', '(', '\x2', '\x2', '\x259', 
		'\x25B', '\x5', 'n', '\x38', '\x2', '\x25A', '\x258', '\x3', '\x2', '\x2', 
		'\x2', '\x25B', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x260', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25C', '\x3', 
		'\x2', '\x2', '\x2', '\x25F', '\x257', '\x3', '\x2', '\x2', '\x2', '\x25F', 
		'\x260', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x262', '\a', '\x1E', '\x2', '\x2', '\x262', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x263', '\x265', '\x5', 'p', '\x39', '\x2', '\x264', 
		'\x266', '\x5', 'l', '\x37', '\x2', '\x265', '\x264', '\x3', '\x2', '\x2', 
		'\x2', '\x265', '\x266', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', 
		'\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x5', '\x64', '\x33', '\x2', 
		'\x268', 's', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26A', '\x5', '\x44', 
		'#', '\x2', '\x26A', '\x26B', '\x5', 'p', '\x39', '\x2', '\x26B', '\x26C', 
		'\a', '\x10', '\x2', '\x2', '\x26C', '\x26D', '\x5', '>', ' ', '\x2', 
		'\x26D', '\x272', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', '\x5', 
		'\x44', '#', '\x2', '\x26F', '\x270', '\x5', 'p', '\x39', '\x2', '\x270', 
		'\x272', '\x3', '\x2', '\x2', '\x2', '\x271', '\x269', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x272', '\x278', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x279', '\x5', '\x64', '\x33', '\x2', 
		'\x274', '\x275', '\a', '\x11', '\x2', '\x2', '\x275', '\x276', '\x5', 
		'T', '+', '\x2', '\x276', '\x277', '\a', '&', '\x2', '\x2', '\x277', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '\x278', '\x273', '\x3', '\x2', '\x2', '\x2', 
		'\x278', '\x274', '\x3', '\x2', '\x2', '\x2', '\x279', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x27A', '\x27B', '\a', '\x4', '\x2', '\x2', '\x27B', '\x27C', 
		'\x5', 'p', '\x39', '\x2', '\x27C', '\x27D', '\a', '\x10', '\x2', '\x2', 
		'\x27D', '\x27E', '\x5', '>', ' ', '\x2', '\x27E', '\x282', '\x3', '\x2', 
		'\x2', '\x2', '\x27F', '\x280', '\a', '\x4', '\x2', '\x2', '\x280', '\x282', 
		'\x5', 'p', '\x39', '\x2', '\x281', '\x27A', '\x3', '\x2', '\x2', '\x2', 
		'\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x282', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x289', '\x5', '\x64', '\x33', '\x2', '\x284', 
		'\x285', '\a', '\x11', '\x2', '\x2', '\x285', '\x286', '\x5', 'T', '+', 
		'\x2', '\x286', '\x287', '\a', '&', '\x2', '\x2', '\x287', '\x289', '\x3', 
		'\x2', '\x2', '\x2', '\x288', '\x283', '\x3', '\x2', '\x2', '\x2', '\x288', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x289', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x28A', '\x2DE', '\x5', '`', '\x31', '\x2', '\x28B', '\x28C', 
		'\a', '\x62', '\x2', '\x2', '\x28C', '\x291', '\x5', '$', '\x13', '\x2', 
		'\x28D', '\x28E', '\a', '\x13', '\x2', '\x2', '\x28E', '\x290', '\x5', 
		'$', '\x13', '\x2', '\x28F', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x290', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x291', '\x28F', '\x3', '\x2', '\x2', 
		'\x2', '\x291', '\x292', '\x3', '\x2', '\x2', '\x2', '\x292', '\x294', 
		'\x3', '\x2', '\x2', '\x2', '\x293', '\x291', '\x3', '\x2', '\x2', '\x2', 
		'\x294', '\x295', '\a', '&', '\x2', '\x2', '\x295', '\x2DE', '\x3', '\x2', 
		'\x2', '\x2', '\x296', '\x297', '\a', '\x62', '\x2', '\x2', '\x297', '\x29C', 
		'\x5', '$', '\x13', '\x2', '\x298', '\x299', '\a', '\x13', '\x2', '\x2', 
		'\x299', '\x29B', '\x5', '$', '\x13', '\x2', '\x29A', '\x298', '\x3', 
		'\x2', '\x2', '\x2', '\x29B', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x29C', 
		'\x29A', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', '\x3', '\x2', '\x2', 
		'\x2', '\x29D', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A1', '\a', '\x1B', '\x2', '\x2', 
		'\x2A0', '\x2A2', '\x5', 'x', '=', '\x2', '\x2A1', '\x2A0', '\x3', '\x2', 
		'\x2', '\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A1', 
		'\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\x3', '\x2', '\x2', '\x2', 
		'\x2A4', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\a', 
		'\x1C', '\x2', '\x2', '\x2A6', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2A7', 
		'\x2A8', '\a', 'l', '\x2', '\x2', '\x2A8', '\x2A9', '\x5', '\x44', '#', 
		'\x2', '\x2A9', '\x2AD', '\a', '\x1B', '\x2', '\x2', '\x2AA', '\x2AC', 
		'\x5', '\x66', '\x34', '\x2', '\x2AB', '\x2AA', '\x3', '\x2', '\x2', '\x2', 
		'\x2AC', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AB', '\x3', 
		'\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2AE', 
		'\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2AD', '\x3', '\x2', '\x2', 
		'\x2', '\x2B0', '\x2B1', '\a', '\x1C', '\x2', '\x2', '\x2B1', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\a', 'k', '\x2', '\x2', 
		'\x2B3', '\x2B4', '\x5', '\x44', '#', '\x2', '\x2B4', '\x2B8', '\a', '\x1B', 
		'\x2', '\x2', '\x2B5', '\x2B7', '\x5', '\x66', '\x34', '\x2', '\x2B6', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2BA', '\x3', '\x2', '\x2', 
		'\x2', '\x2B8', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B9', 
		'\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BB', '\x3', '\x2', '\x2', '\x2', 
		'\x2BA', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\a', 
		'\x1C', '\x2', '\x2', '\x2BC', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2BD', 
		'\x2BE', '\a', 'j', '\x2', '\x2', '\x2BE', '\x2BF', '\x5', '\x44', '#', 
		'\x2', '\x2BF', '\x2C3', '\a', '\x1B', '\x2', '\x2', '\x2C0', '\x2C2', 
		'\x5', '\x66', '\x34', '\x2', '\x2C1', '\x2C0', '\x3', '\x2', '\x2', '\x2', 
		'\x2C2', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C1', '\x3', 
		'\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C4', 
		'\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C3', '\x3', '\x2', '\x2', 
		'\x2', '\x2C6', '\x2C7', '\a', '\x1C', '\x2', '\x2', '\x2C7', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\a', 't', '\x2', '\x2', 
		'\x2C9', '\x2CA', '\x5', '$', '\x13', '\x2', '\x2CA', '\x2CB', '\a', '\x1B', 
		'\x2', '\x2', '\x2CB', '\x2D0', '\x5', 'Z', '.', '\x2', '\x2CC', '\x2CD', 
		'\a', '(', '\x2', '\x2', '\x2CD', '\x2CF', '\x5', 'Z', '.', '\x2', '\x2CE', 
		'\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D2', '\x3', '\x2', '\x2', 
		'\x2', '\x2D0', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', 
		'\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'\x2D2', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D5', '\a', 
		'(', '\x2', '\x2', '\x2D4', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D4', 
		'\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D6', '\x3', '\x2', '\x2', 
		'\x2', '\x2D6', '\x2D7', '\a', '\x1C', '\x2', '\x2', '\x2D7', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\a', 'r', '\x2', '\x2', 
		'\x2D9', '\x2DE', '\x5', 't', ';', '\x2', '\x2DA', '\x2DB', '\x5', 'T', 
		'+', '\x2', '\x2DB', '\x2DC', '\a', '&', '\x2', '\x2', '\x2DC', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x2DD', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x296', '\x3', 
		'\x2', '\x2', '\x2', '\x2DD', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2DD', 
		'\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2BD', '\x3', '\x2', '\x2', 
		'\x2', '\x2DD', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2D8', 
		'\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DA', '\x3', '\x2', '\x2', '\x2', 
		'\x2DE', 'y', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E1', '\x5', 'x', 
		'=', '\x2', '\x2E0', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', 
		'\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E0', '\x3', '\x2', '\x2', '\x2', 
		'\x2E2', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E3', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x8C', '\xB7', '\xBE', '\xC5', '\xC9', '\xD0', 
		'\xD5', '\xDA', '\xE0', '\xE5', '\xEA', '\xF2', '\xF9', '\x108', '\x10E', 
		'\x113', '\x119', '\x122', '\x12B', '\x138', '\x173', '\x17B', '\x180', 
		'\x186', '\x188', '\x18A', '\x192', '\x19C', '\x1A4', '\x1B0', '\x1B5', 
		'\x1BD', '\x1C8', '\x1DC', '\x1E8', '\x1ED', '\x200', '\x206', '\x21A', 
		'\x21F', '\x228', '\x238', '\x240', '\x243', '\x24F', '\x254', '\x25C', 
		'\x25F', '\x265', '\x271', '\x278', '\x281', '\x288', '\x291', '\x29C', 
		'\x2A3', '\x2AD', '\x2B8', '\x2C3', '\x2D0', '\x2D4', '\x2DD', '\x2E2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Myll
